
Quardruped_Spider_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077ec  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08007900  08007900  00008900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d58  08007d58  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007d58  08007d58  00008d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d60  08007d60  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d60  08007d60  00008d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d64  08007d64  00008d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007d68  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  200001d4  08007f3c  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  08007f3c  00009398  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000632f  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000150a  00000000  00000000  0000f52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a0  00000000  00000000  00010a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005cb  00000000  00000000  000111d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017867  00000000  00000000  000117a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000098ae  00000000  00000000  0002900a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083e98  00000000  00000000  000328b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6750  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003370  00000000  00000000  000b6794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000b9b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080078e4 	.word	0x080078e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080078e4 	.word	0x080078e4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_f2uiz>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	d20e      	bcs.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b70:	d30b      	bcc.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b72:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b7a:	d409      	bmi.n	8000b90 <__aeabi_f2uiz+0x28>
 8000b7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b84:	fa23 f002 	lsr.w	r0, r3, r2
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr
 8000b90:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b94:	d101      	bne.n	8000b9a <__aeabi_f2uiz+0x32>
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_f2uiz+0x38>
 8000b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2lz>:
 8000ba8:	b538      	push	{r3, r4, r5, lr}
 8000baa:	2200      	movs	r2, #0
 8000bac:	2300      	movs	r3, #0
 8000bae:	4604      	mov	r4, r0
 8000bb0:	460d      	mov	r5, r1
 8000bb2:	f7ff ff03 	bl	80009bc <__aeabi_dcmplt>
 8000bb6:	b928      	cbnz	r0, 8000bc4 <__aeabi_d2lz+0x1c>
 8000bb8:	4620      	mov	r0, r4
 8000bba:	4629      	mov	r1, r5
 8000bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bc0:	f000 b80a 	b.w	8000bd8 <__aeabi_d2ulz>
 8000bc4:	4620      	mov	r0, r4
 8000bc6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000bca:	f000 f805 	bl	8000bd8 <__aeabi_d2ulz>
 8000bce:	4240      	negs	r0, r0
 8000bd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bd4:	bd38      	pop	{r3, r4, r5, pc}
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2ulz>:
 8000bd8:	b5d0      	push	{r4, r6, r7, lr}
 8000bda:	2200      	movs	r2, #0
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <__aeabi_d2ulz+0x34>)
 8000bde:	4606      	mov	r6, r0
 8000be0:	460f      	mov	r7, r1
 8000be2:	f7ff fc79 	bl	80004d8 <__aeabi_dmul>
 8000be6:	f7ff ff4f 	bl	8000a88 <__aeabi_d2uiz>
 8000bea:	4604      	mov	r4, r0
 8000bec:	f7ff fbfa 	bl	80003e4 <__aeabi_ui2d>
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	4b07      	ldr	r3, [pc, #28]	@ (8000c10 <__aeabi_d2ulz+0x38>)
 8000bf4:	f7ff fc70 	bl	80004d8 <__aeabi_dmul>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	4630      	mov	r0, r6
 8000bfe:	4639      	mov	r1, r7
 8000c00:	f7ff fab2 	bl	8000168 <__aeabi_dsub>
 8000c04:	f7ff ff40 	bl	8000a88 <__aeabi_d2uiz>
 8000c08:	4621      	mov	r1, r4
 8000c0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c0c:	3df00000 	.word	0x3df00000
 8000c10:	41f00000 	.word	0x41f00000

08000c14 <PCA9685_SetBit>:
//    readAnglesFromFile("leg3_angles.txt", 2);
//    readAnglesFromFile("leg4_angles.txt", 3);
//}

void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af04      	add	r7, sp, #16
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
 8000c1e:	460b      	mov	r3, r1
 8000c20:	71bb      	strb	r3, [r7, #6]
 8000c22:	4613      	mov	r3, r2
 8000c24:	717b      	strb	r3, [r7, #5]
  uint8_t readValue;
  // Read all 8 bits and set only one bit to 0/1 and write all 8 bits back
  HAL_I2C_Mem_Read(&hi2c1, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	b29a      	uxth	r2, r3
 8000c2a:	230a      	movs	r3, #10
 8000c2c:	9302      	str	r3, [sp, #8]
 8000c2e:	2301      	movs	r3, #1
 8000c30:	9301      	str	r3, [sp, #4]
 8000c32:	f107 030f 	add.w	r3, r7, #15
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	2301      	movs	r3, #1
 8000c3a:	2180      	movs	r1, #128	@ 0x80
 8000c3c:	4819      	ldr	r0, [pc, #100]	@ (8000ca4 <PCA9685_SetBit+0x90>)
 8000c3e:	f001 f8d1 	bl	8001de4 <HAL_I2C_Mem_Read>
  if (Value == 0) readValue &= ~(1 << Bit);
 8000c42:	797b      	ldrb	r3, [r7, #5]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d10d      	bne.n	8000c64 <PCA9685_SetBit+0x50>
 8000c48:	79bb      	ldrb	r3, [r7, #6]
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	b25b      	sxtb	r3, r3
 8000c52:	43db      	mvns	r3, r3
 8000c54:	b25a      	sxtb	r2, r3
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	b25b      	sxtb	r3, r3
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	b25b      	sxtb	r3, r3
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	73fb      	strb	r3, [r7, #15]
 8000c62:	e00a      	b.n	8000c7a <PCA9685_SetBit+0x66>
  else readValue |= (1 << Bit);
 8000c64:	79bb      	ldrb	r3, [r7, #6]
 8000c66:	2201      	movs	r2, #1
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	b25a      	sxtb	r2, r3
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	b25b      	sxtb	r3, r3
 8000c72:	4313      	orrs	r3, r2
 8000c74:	b25b      	sxtb	r3, r3
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	230a      	movs	r3, #10
 8000c80:	9302      	str	r3, [sp, #8]
 8000c82:	2301      	movs	r3, #1
 8000c84:	9301      	str	r3, [sp, #4]
 8000c86:	f107 030f 	add.w	r3, r7, #15
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	2180      	movs	r1, #128	@ 0x80
 8000c90:	4804      	ldr	r0, [pc, #16]	@ (8000ca4 <PCA9685_SetBit+0x90>)
 8000c92:	f000 ffad 	bl	8001bf0 <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 8000c96:	2001      	movs	r0, #1
 8000c98:	f000 fbda 	bl	8001450 <HAL_Delay>
}
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200001f0 	.word	0x200001f0

08000ca8 <PCA9685_SetPWMFrequency>:

void PCA9685_SetPWMFrequency(uint16_t frequency)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af04      	add	r7, sp, #16
 8000cae:	4603      	mov	r3, r0
 8000cb0:	80fb      	strh	r3, [r7, #6]
  uint8_t prescale;
  if(frequency >= 1526) prescale = 0x03;
 8000cb2:	88fb      	ldrh	r3, [r7, #6]
 8000cb4:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d902      	bls.n	8000cc2 <PCA9685_SetPWMFrequency+0x1a>
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	73fb      	strb	r3, [r7, #15]
 8000cc0:	e00c      	b.n	8000cdc <PCA9685_SetPWMFrequency+0x34>
  else if(frequency <= 24) prescale = 0xFF;
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	2b18      	cmp	r3, #24
 8000cc6:	d802      	bhi.n	8000cce <PCA9685_SetPWMFrequency+0x26>
 8000cc8:	23ff      	movs	r3, #255	@ 0xff
 8000cca:	73fb      	strb	r3, [r7, #15]
 8000ccc:	e006      	b.n	8000cdc <PCA9685_SetPWMFrequency+0x34>
  //  internal 25 MHz oscillator as in the datasheet page no 1/52
  else prescale = 25000000 / (4096 * frequency);
 8000cce:	88fb      	ldrh	r3, [r7, #6]
 8000cd0:	031b      	lsls	r3, r3, #12
 8000cd2:	4a12      	ldr	r2, [pc, #72]	@ (8000d1c <PCA9685_SetPWMFrequency+0x74>)
 8000cd4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	73fb      	strb	r3, [r7, #15]
  // prescale changes 3 to 255 for 1526Hz to 24Hz as in the datasheet page no 1/52
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2104      	movs	r1, #4
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f7ff ff97 	bl	8000c14 <PCA9685_SetBit>
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 8000ce6:	230a      	movs	r3, #10
 8000ce8:	9302      	str	r3, [sp, #8]
 8000cea:	2301      	movs	r3, #1
 8000cec:	9301      	str	r3, [sp, #4]
 8000cee:	f107 030f 	add.w	r3, r7, #15
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	22fe      	movs	r2, #254	@ 0xfe
 8000cf8:	2180      	movs	r1, #128	@ 0x80
 8000cfa:	4809      	ldr	r0, [pc, #36]	@ (8000d20 <PCA9685_SetPWMFrequency+0x78>)
 8000cfc:	f000 ff78 	bl	8001bf0 <HAL_I2C_Mem_Write>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2104      	movs	r1, #4
 8000d04:	2000      	movs	r0, #0
 8000d06:	f7ff ff85 	bl	8000c14 <PCA9685_SetBit>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2107      	movs	r1, #7
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f7ff ff80 	bl	8000c14 <PCA9685_SetBit>
}
 8000d14:	bf00      	nop
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	017d7840 	.word	0x017d7840
 8000d20:	200001f0 	.word	0x200001f0

08000d24 <PCA9685_Init>:

void PCA9685_Init(uint16_t frequency)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	80fb      	strh	r3, [r7, #6]
  PCA9685_SetPWMFrequency(frequency); // 50 Hz for servo
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ffb9 	bl	8000ca8 <PCA9685_SetPWMFrequency>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 8000d36:	2201      	movs	r2, #1
 8000d38:	2105      	movs	r1, #5
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f7ff ff6a 	bl	8000c14 <PCA9685_SetBit>
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <PCA9685_SetPWM>:

void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af04      	add	r7, sp, #16
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
 8000d52:	460b      	mov	r3, r1
 8000d54:	80bb      	strh	r3, [r7, #4]
 8000d56:	4613      	mov	r3, r2
 8000d58:	807b      	strh	r3, [r7, #2]
  uint8_t registerAddress;
  uint8_t pwm[4];
  registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	3306      	adds	r3, #6
 8000d62:	73fb      	strb	r3, [r7, #15]
  // See example 1 in the datasheet page no 18/52
  pwm[0] = OnTime & 0xFF;  //BYTE 	thấp
 8000d64:	88bb      	ldrh	r3, [r7, #4]
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	723b      	strb	r3, [r7, #8]
  pwm[1] = OnTime>>8;	   //byte cao
 8000d6a:	88bb      	ldrh	r3, [r7, #4]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;
 8000d74:	887b      	ldrh	r3, [r7, #2]
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	72bb      	strb	r3, [r7, #10]
  pwm[3] = OffTime>>8;
 8000d7a:	887b      	ldrh	r3, [r7, #2]
 8000d7c:	0a1b      	lsrs	r3, r3, #8
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	230a      	movs	r3, #10
 8000d8a:	9302      	str	r3, [sp, #8]
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	9301      	str	r3, [sp, #4]
 8000d90:	f107 0308 	add.w	r3, r7, #8
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	2301      	movs	r3, #1
 8000d98:	2180      	movs	r1, #128	@ 0x80
 8000d9a:	4803      	ldr	r0, [pc, #12]	@ (8000da8 <PCA9685_SetPWM+0x60>)
 8000d9c:	f000 ff28 	bl	8001bf0 <HAL_I2C_Mem_Write>
}
 8000da0:	bf00      	nop
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	200001f0 	.word	0x200001f0
 8000dac:	00000000 	.word	0x00000000

08000db0 <PCA9685_SetServoAngle>:

void PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
  float Value;
  // độ phân giải của pwm của pca9685 là 12bit -> tương ứng với giá trị 2^12-1=4095
  // 50 Hz servo then 4095 Value --> 20 milliseconds
  // 0 degree --> 0.5 ms(102.4 Value) and 180 degree --> 2.5 ms(511.9 Value)
  Value = (Angle * (511.9 - 102.4) / 180.0) + 102.4;
 8000dbc:	6838      	ldr	r0, [r7, #0]
 8000dbe:	f7ff fb33 	bl	8000428 <__aeabi_f2d>
 8000dc2:	a317      	add	r3, pc, #92	@ (adr r3, 8000e20 <PCA9685_SetServoAngle+0x70>)
 8000dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc8:	f7ff fb86 	bl	80004d8 <__aeabi_dmul>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f04f 0200 	mov.w	r2, #0
 8000dd8:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <PCA9685_SetServoAngle+0x80>)
 8000dda:	f7ff fca7 	bl	800072c <__aeabi_ddiv>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	4610      	mov	r0, r2
 8000de4:	4619      	mov	r1, r3
 8000de6:	a310      	add	r3, pc, #64	@ (adr r3, 8000e28 <PCA9685_SetServoAngle+0x78>)
 8000de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dec:	f7ff f9be 	bl	800016c <__adddf3>
 8000df0:	4602      	mov	r2, r0
 8000df2:	460b      	mov	r3, r1
 8000df4:	4610      	mov	r0, r2
 8000df6:	4619      	mov	r1, r3
 8000df8:	f7ff fe66 	bl	8000ac8 <__aeabi_d2f>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	60fb      	str	r3, [r7, #12]
  PCA9685_SetPWM(Channel, 0, (uint16_t)Value);
 8000e00:	68f8      	ldr	r0, [r7, #12]
 8000e02:	f7ff feb1 	bl	8000b68 <__aeabi_f2uiz>
 8000e06:	4603      	mov	r3, r0
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ff9a 	bl	8000d48 <PCA9685_SetPWM>
}
 8000e14:	bf00      	nop
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	f3af 8000 	nop.w
 8000e20:	00000000 	.word	0x00000000
 8000e24:	40799800 	.word	0x40799800
 8000e28:	9999999a 	.word	0x9999999a
 8000e2c:	40599999 	.word	0x40599999
 8000e30:	40668000 	.word	0x40668000

08000e34 <init_gait>:

void init_gait(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	  // nhin tu phia truoc
	  //1: truoc phai
		PCA9685_SetServoAngle(0, 45); //tang : nguoc kim
 8000e38:	4918      	ldr	r1, [pc, #96]	@ (8000e9c <init_gait+0x68>)
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f7ff ffb8 	bl	8000db0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(1, 135 ); // tang : huong len
 8000e40:	4917      	ldr	r1, [pc, #92]	@ (8000ea0 <init_gait+0x6c>)
 8000e42:	2001      	movs	r0, #1
 8000e44:	f7ff ffb4 	bl	8000db0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(2, 135); //tang : thu vao
 8000e48:	4915      	ldr	r1, [pc, #84]	@ (8000ea0 <init_gait+0x6c>)
 8000e4a:	2002      	movs	r0, #2
 8000e4c:	f7ff ffb0 	bl	8000db0 <PCA9685_SetServoAngle>
	  //2: truoc trai
		PCA9685_SetServoAngle(4, 140); //tang : nguoc kim
 8000e50:	4914      	ldr	r1, [pc, #80]	@ (8000ea4 <init_gait+0x70>)
 8000e52:	2004      	movs	r0, #4
 8000e54:	f7ff ffac 	bl	8000db0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(5, 45); //tang : huong xuong
 8000e58:	4910      	ldr	r1, [pc, #64]	@ (8000e9c <init_gait+0x68>)
 8000e5a:	2005      	movs	r0, #5
 8000e5c:	f7ff ffa8 	bl	8000db0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(6, 45); //tang : mo ra
 8000e60:	490e      	ldr	r1, [pc, #56]	@ (8000e9c <init_gait+0x68>)
 8000e62:	2006      	movs	r0, #6
 8000e64:	f7ff ffa4 	bl	8000db0 <PCA9685_SetServoAngle>
	  //3: sau trai
		PCA9685_SetServoAngle(8, 45); // tang : nguoc kim
 8000e68:	490c      	ldr	r1, [pc, #48]	@ (8000e9c <init_gait+0x68>)
 8000e6a:	2008      	movs	r0, #8
 8000e6c:	f7ff ffa0 	bl	8000db0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(9, 45); // tang : huong xuong
 8000e70:	490a      	ldr	r1, [pc, #40]	@ (8000e9c <init_gait+0x68>)
 8000e72:	2009      	movs	r0, #9
 8000e74:	f7ff ff9c 	bl	8000db0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(10, 45); // tang : mo ra
 8000e78:	4908      	ldr	r1, [pc, #32]	@ (8000e9c <init_gait+0x68>)
 8000e7a:	200a      	movs	r0, #10
 8000e7c:	f7ff ff98 	bl	8000db0 <PCA9685_SetServoAngle>
	  //4: sau phai
		PCA9685_SetServoAngle(12, 135); // tang : nguoc kim
 8000e80:	4907      	ldr	r1, [pc, #28]	@ (8000ea0 <init_gait+0x6c>)
 8000e82:	200c      	movs	r0, #12
 8000e84:	f7ff ff94 	bl	8000db0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(13, 125); // tang : huong len
 8000e88:	4907      	ldr	r1, [pc, #28]	@ (8000ea8 <init_gait+0x74>)
 8000e8a:	200d      	movs	r0, #13
 8000e8c:	f7ff ff90 	bl	8000db0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(14, 125); //tang : thu vao
 8000e90:	4905      	ldr	r1, [pc, #20]	@ (8000ea8 <init_gait+0x74>)
 8000e92:	200e      	movs	r0, #14
 8000e94:	f7ff ff8c 	bl	8000db0 <PCA9685_SetServoAngle>

}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	42340000 	.word	0x42340000
 8000ea0:	43070000 	.word	0x43070000
 8000ea4:	430c0000 	.word	0x430c0000
 8000ea8:	42fa0000 	.word	0x42fa0000

08000eac <test>:
void test(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	  // nhin tu phia truoc
	  //1: truoc phai
		PCA9685_SetServoAngle(0, 90); //tang : nguoc kim //goc
 8000eb0:	4918      	ldr	r1, [pc, #96]	@ (8000f14 <test+0x68>)
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f7ff ff7c 	bl	8000db0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(1, 135); // tang : huong len
 8000eb8:	4917      	ldr	r1, [pc, #92]	@ (8000f18 <test+0x6c>)
 8000eba:	2001      	movs	r0, #1
 8000ebc:	f7ff ff78 	bl	8000db0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(2, 135); //tang : thu vao
 8000ec0:	4915      	ldr	r1, [pc, #84]	@ (8000f18 <test+0x6c>)
 8000ec2:	2002      	movs	r0, #2
 8000ec4:	f7ff ff74 	bl	8000db0 <PCA9685_SetServoAngle>
	  //2: truoc trai
		PCA9685_SetServoAngle(4, -45 + 180 + 5); //tang : nguoc kim // goc +180
 8000ec8:	4914      	ldr	r1, [pc, #80]	@ (8000f1c <test+0x70>)
 8000eca:	2004      	movs	r0, #4
 8000ecc:	f7ff ff70 	bl	8000db0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(5, 45); //tang : huong xuong
 8000ed0:	4913      	ldr	r1, [pc, #76]	@ (8000f20 <test+0x74>)
 8000ed2:	2005      	movs	r0, #5
 8000ed4:	f7ff ff6c 	bl	8000db0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(6, 45); //tang : mo ra
 8000ed8:	4911      	ldr	r1, [pc, #68]	@ (8000f20 <test+0x74>)
 8000eda:	2006      	movs	r0, #6
 8000edc:	f7ff ff68 	bl	8000db0 <PCA9685_SetServoAngle>
	  //3: sau trai
		PCA9685_SetServoAngle(8, -135 + 180); // tang : nguoc kim // goc +180
 8000ee0:	490f      	ldr	r1, [pc, #60]	@ (8000f20 <test+0x74>)
 8000ee2:	2008      	movs	r0, #8
 8000ee4:	f7ff ff64 	bl	8000db0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(9, 45); // tang : huong xuong
 8000ee8:	490d      	ldr	r1, [pc, #52]	@ (8000f20 <test+0x74>)
 8000eea:	2009      	movs	r0, #9
 8000eec:	f7ff ff60 	bl	8000db0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(10, 45); // tang : mo ra
 8000ef0:	490b      	ldr	r1, [pc, #44]	@ (8000f20 <test+0x74>)
 8000ef2:	200a      	movs	r0, #10
 8000ef4:	f7ff ff5c 	bl	8000db0 <PCA9685_SetServoAngle>
	  //4: sau phai
		PCA9685_SetServoAngle(12, 90); // tang : nguoc kim// goc
 8000ef8:	4906      	ldr	r1, [pc, #24]	@ (8000f14 <test+0x68>)
 8000efa:	200c      	movs	r0, #12
 8000efc:	f7ff ff58 	bl	8000db0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(13, 135-10); // tang : huong len
 8000f00:	4908      	ldr	r1, [pc, #32]	@ (8000f24 <test+0x78>)
 8000f02:	200d      	movs	r0, #13
 8000f04:	f7ff ff54 	bl	8000db0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(14, 135-10); //tang : thu vao
 8000f08:	4906      	ldr	r1, [pc, #24]	@ (8000f24 <test+0x78>)
 8000f0a:	200e      	movs	r0, #14
 8000f0c:	f7ff ff50 	bl	8000db0 <PCA9685_SetServoAngle>

}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	42b40000 	.word	0x42b40000
 8000f18:	43070000 	.word	0x43070000
 8000f1c:	430c0000 	.word	0x430c0000
 8000f20:	42340000 	.word	0x42340000
 8000f24:	42fa0000 	.word	0x42fa0000

08000f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2c:	f000 fa2e 	bl	800138c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f30:	f000 f811 	bl	8000f56 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f34:	f000 f878 	bl	8001028 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f38:	f000 f848 	bl	8000fcc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  PCA9685_Init(50); // 50Hz for servo
 8000f3c:	2032      	movs	r0, #50	@ 0x32
 8000f3e:	f7ff fef1 	bl	8000d24 <PCA9685_Init>
  init_gait();
 8000f42:	f7ff ff77 	bl	8000e34 <init_gait>

  //loadAllAngles();  // Đọc dữ liệu góc từ file
  HAL_Delay(1000);
 8000f46:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f4a:	f000 fa81 	bl	8001450 <HAL_Delay>
  test();
 8000f4e:	f7ff ffad 	bl	8000eac <test>
  //moveRobotStraight();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f52:	bf00      	nop
 8000f54:	e7fd      	b.n	8000f52 <main+0x2a>

08000f56 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b090      	sub	sp, #64	@ 0x40
 8000f5a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5c:	f107 0318 	add.w	r3, r7, #24
 8000f60:	2228      	movs	r2, #40	@ 0x28
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f003 f8f2 	bl	800414e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f80:	2310      	movs	r3, #16
 8000f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f88:	f107 0318 	add.w	r3, r7, #24
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f001 fd51 	bl	8002a34 <HAL_RCC_OscConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f98:	f000 f868 	bl	800106c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f001 ffbf 	bl	8002f38 <HAL_RCC_ClockConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fc0:	f000 f854 	bl	800106c <Error_Handler>
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	3740      	adds	r7, #64	@ 0x40
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fd0:	4b12      	ldr	r3, [pc, #72]	@ (800101c <MX_I2C1_Init+0x50>)
 8000fd2:	4a13      	ldr	r2, [pc, #76]	@ (8001020 <MX_I2C1_Init+0x54>)
 8000fd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fd6:	4b11      	ldr	r3, [pc, #68]	@ (800101c <MX_I2C1_Init+0x50>)
 8000fd8:	4a12      	ldr	r2, [pc, #72]	@ (8001024 <MX_I2C1_Init+0x58>)
 8000fda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <MX_I2C1_Init+0x50>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <MX_I2C1_Init+0x50>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <MX_I2C1_Init+0x50>)
 8000fea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800101c <MX_I2C1_Init+0x50>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ff6:	4b09      	ldr	r3, [pc, #36]	@ (800101c <MX_I2C1_Init+0x50>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ffc:	4b07      	ldr	r3, [pc, #28]	@ (800101c <MX_I2C1_Init+0x50>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001002:	4b06      	ldr	r3, [pc, #24]	@ (800101c <MX_I2C1_Init+0x50>)
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001008:	4804      	ldr	r0, [pc, #16]	@ (800101c <MX_I2C1_Init+0x50>)
 800100a:	f000 fcad 	bl	8001968 <HAL_I2C_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001014:	f000 f82a 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200001f0 	.word	0x200001f0
 8001020:	40005400 	.word	0x40005400
 8001024:	000186a0 	.word	0x000186a0

08001028 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <MX_GPIO_Init+0x40>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	4a0d      	ldr	r2, [pc, #52]	@ (8001068 <MX_GPIO_Init+0x40>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	6193      	str	r3, [r2, #24]
 800103a:	4b0b      	ldr	r3, [pc, #44]	@ (8001068 <MX_GPIO_Init+0x40>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <MX_GPIO_Init+0x40>)
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	4a07      	ldr	r2, [pc, #28]	@ (8001068 <MX_GPIO_Init+0x40>)
 800104c:	f043 0308 	orr.w	r3, r3, #8
 8001050:	6193      	str	r3, [r2, #24]
 8001052:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <MX_GPIO_Init+0x40>)
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	40021000 	.word	0x40021000

0800106c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001070:	b672      	cpsid	i
}
 8001072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <Error_Handler+0x8>

08001078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800107e:	4b15      	ldr	r3, [pc, #84]	@ (80010d4 <HAL_MspInit+0x5c>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	4a14      	ldr	r2, [pc, #80]	@ (80010d4 <HAL_MspInit+0x5c>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6193      	str	r3, [r2, #24]
 800108a:	4b12      	ldr	r3, [pc, #72]	@ (80010d4 <HAL_MspInit+0x5c>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001096:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <HAL_MspInit+0x5c>)
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	4a0e      	ldr	r2, [pc, #56]	@ (80010d4 <HAL_MspInit+0x5c>)
 800109c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010a0:	61d3      	str	r3, [r2, #28]
 80010a2:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <HAL_MspInit+0x5c>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010ae:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <HAL_MspInit+0x60>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	4a04      	ldr	r2, [pc, #16]	@ (80010d8 <HAL_MspInit+0x60>)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ca:	bf00      	nop
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40010000 	.word	0x40010000

080010dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a15      	ldr	r2, [pc, #84]	@ (800114c <HAL_I2C_MspInit+0x70>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d123      	bne.n	8001144 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fc:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <HAL_I2C_MspInit+0x74>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	4a13      	ldr	r2, [pc, #76]	@ (8001150 <HAL_I2C_MspInit+0x74>)
 8001102:	f043 0308 	orr.w	r3, r3, #8
 8001106:	6193      	str	r3, [r2, #24]
 8001108:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <HAL_I2C_MspInit+0x74>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	f003 0308 	and.w	r3, r3, #8
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001114:	23c0      	movs	r3, #192	@ 0xc0
 8001116:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001118:	2312      	movs	r3, #18
 800111a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800111c:	2303      	movs	r3, #3
 800111e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	4619      	mov	r1, r3
 8001126:	480b      	ldr	r0, [pc, #44]	@ (8001154 <HAL_I2C_MspInit+0x78>)
 8001128:	f000 fa9a 	bl	8001660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800112c:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <HAL_I2C_MspInit+0x74>)
 800112e:	69db      	ldr	r3, [r3, #28]
 8001130:	4a07      	ldr	r2, [pc, #28]	@ (8001150 <HAL_I2C_MspInit+0x74>)
 8001132:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001136:	61d3      	str	r3, [r2, #28]
 8001138:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <HAL_I2C_MspInit+0x74>)
 800113a:	69db      	ldr	r3, [r3, #28]
 800113c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001144:	bf00      	nop
 8001146:	3720      	adds	r7, #32
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40005400 	.word	0x40005400
 8001150:	40021000 	.word	0x40021000
 8001154:	40010c00 	.word	0x40010c00

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <NMI_Handler+0x4>

08001160 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <HardFault_Handler+0x4>

08001168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <MemManage_Handler+0x4>

08001170 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001174:	bf00      	nop
 8001176:	e7fd      	b.n	8001174 <BusFault_Handler+0x4>

08001178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <UsageFault_Handler+0x4>

08001180 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr

080011a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a8:	f000 f936 	bl	8001418 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return 1;
 80011b4:	2301      	movs	r3, #1
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr

080011be <_kill>:

int _kill(int pid, int sig)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011c8:	f003 f814 	bl	80041f4 <__errno>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2216      	movs	r2, #22
 80011d0:	601a      	str	r2, [r3, #0]
  return -1;
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <_exit>:

void _exit (int status)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011e6:	f04f 31ff 	mov.w	r1, #4294967295
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ffe7 	bl	80011be <_kill>
  while (1) {}    /* Make sure we hang here */
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <_exit+0x12>

080011f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	e00a      	b.n	800121c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001206:	f3af 8000 	nop.w
 800120a:	4601      	mov	r1, r0
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	1c5a      	adds	r2, r3, #1
 8001210:	60ba      	str	r2, [r7, #8]
 8001212:	b2ca      	uxtb	r2, r1
 8001214:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	3301      	adds	r3, #1
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	697a      	ldr	r2, [r7, #20]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	429a      	cmp	r2, r3
 8001222:	dbf0      	blt.n	8001206 <_read+0x12>
  }

  return len;
 8001224:	687b      	ldr	r3, [r7, #4]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b086      	sub	sp, #24
 8001232:	af00      	add	r7, sp, #0
 8001234:	60f8      	str	r0, [r7, #12]
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	e009      	b.n	8001254 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	1c5a      	adds	r2, r3, #1
 8001244:	60ba      	str	r2, [r7, #8]
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	3301      	adds	r3, #1
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	429a      	cmp	r2, r3
 800125a:	dbf1      	blt.n	8001240 <_write+0x12>
  }
  return len;
 800125c:	687b      	ldr	r3, [r7, #4]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <_close>:

int _close(int file)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800126e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001272:	4618      	mov	r0, r3
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr

0800127c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800128c:	605a      	str	r2, [r3, #4]
  return 0;
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr

0800129a <_isatty>:

int _isatty(int file)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012a2:	2301      	movs	r3, #1
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr

080012ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b085      	sub	sp, #20
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	60f8      	str	r0, [r7, #12]
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
	...

080012c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d0:	4a14      	ldr	r2, [pc, #80]	@ (8001324 <_sbrk+0x5c>)
 80012d2:	4b15      	ldr	r3, [pc, #84]	@ (8001328 <_sbrk+0x60>)
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012dc:	4b13      	ldr	r3, [pc, #76]	@ (800132c <_sbrk+0x64>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d102      	bne.n	80012ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e4:	4b11      	ldr	r3, [pc, #68]	@ (800132c <_sbrk+0x64>)
 80012e6:	4a12      	ldr	r2, [pc, #72]	@ (8001330 <_sbrk+0x68>)
 80012e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ea:	4b10      	ldr	r3, [pc, #64]	@ (800132c <_sbrk+0x64>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d207      	bcs.n	8001308 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f8:	f002 ff7c 	bl	80041f4 <__errno>
 80012fc:	4603      	mov	r3, r0
 80012fe:	220c      	movs	r2, #12
 8001300:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	e009      	b.n	800131c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001308:	4b08      	ldr	r3, [pc, #32]	@ (800132c <_sbrk+0x64>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800130e:	4b07      	ldr	r3, [pc, #28]	@ (800132c <_sbrk+0x64>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	4a05      	ldr	r2, [pc, #20]	@ (800132c <_sbrk+0x64>)
 8001318:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800131a:	68fb      	ldr	r3, [r7, #12]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20005000 	.word	0x20005000
 8001328:	00000400 	.word	0x00000400
 800132c:	20000244 	.word	0x20000244
 8001330:	20000398 	.word	0x20000398

08001334 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr

08001340 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001340:	f7ff fff8 	bl	8001334 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001344:	480b      	ldr	r0, [pc, #44]	@ (8001374 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001346:	490c      	ldr	r1, [pc, #48]	@ (8001378 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001348:	4a0c      	ldr	r2, [pc, #48]	@ (800137c <LoopFillZerobss+0x16>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800134c:	e002      	b.n	8001354 <LoopCopyDataInit>

0800134e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001352:	3304      	adds	r3, #4

08001354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001358:	d3f9      	bcc.n	800134e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135a:	4a09      	ldr	r2, [pc, #36]	@ (8001380 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800135c:	4c09      	ldr	r4, [pc, #36]	@ (8001384 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001360:	e001      	b.n	8001366 <LoopFillZerobss>

08001362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001364:	3204      	adds	r2, #4

08001366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001368:	d3fb      	bcc.n	8001362 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800136a:	f002 ff49 	bl	8004200 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800136e:	f7ff fddb 	bl	8000f28 <main>
  bx lr
 8001372:	4770      	bx	lr
  ldr r0, =_sdata
 8001374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001378:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800137c:	08007d68 	.word	0x08007d68
  ldr r2, =_sbss
 8001380:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001384:	20000398 	.word	0x20000398

08001388 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001388:	e7fe      	b.n	8001388 <ADC1_2_IRQHandler>
	...

0800138c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001390:	4b08      	ldr	r3, [pc, #32]	@ (80013b4 <HAL_Init+0x28>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a07      	ldr	r2, [pc, #28]	@ (80013b4 <HAL_Init+0x28>)
 8001396:	f043 0310 	orr.w	r3, r3, #16
 800139a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800139c:	2003      	movs	r0, #3
 800139e:	f000 f92b 	bl	80015f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013a2:	200f      	movs	r0, #15
 80013a4:	f000 f808 	bl	80013b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013a8:	f7ff fe66 	bl	8001078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40022000 	.word	0x40022000

080013b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c0:	4b12      	ldr	r3, [pc, #72]	@ (800140c <HAL_InitTick+0x54>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <HAL_InitTick+0x58>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	4619      	mov	r1, r3
 80013ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80013d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 f935 	bl	8001646 <HAL_SYSTICK_Config>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e00e      	b.n	8001404 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b0f      	cmp	r3, #15
 80013ea:	d80a      	bhi.n	8001402 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ec:	2200      	movs	r2, #0
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295
 80013f4:	f000 f90b 	bl	800160e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013f8:	4a06      	ldr	r2, [pc, #24]	@ (8001414 <HAL_InitTick+0x5c>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
 8001400:	e000      	b.n	8001404 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
}
 8001404:	4618      	mov	r0, r3
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000000 	.word	0x20000000
 8001410:	20000008 	.word	0x20000008
 8001414:	20000004 	.word	0x20000004

08001418 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800141c:	4b05      	ldr	r3, [pc, #20]	@ (8001434 <HAL_IncTick+0x1c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <HAL_IncTick+0x20>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4413      	add	r3, r2
 8001428:	4a03      	ldr	r2, [pc, #12]	@ (8001438 <HAL_IncTick+0x20>)
 800142a:	6013      	str	r3, [r2, #0]
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr
 8001434:	20000008 	.word	0x20000008
 8001438:	20000248 	.word	0x20000248

0800143c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return uwTick;
 8001440:	4b02      	ldr	r3, [pc, #8]	@ (800144c <HAL_GetTick+0x10>)
 8001442:	681b      	ldr	r3, [r3, #0]
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	20000248 	.word	0x20000248

08001450 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001458:	f7ff fff0 	bl	800143c <HAL_GetTick>
 800145c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001468:	d005      	beq.n	8001476 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800146a:	4b0a      	ldr	r3, [pc, #40]	@ (8001494 <HAL_Delay+0x44>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4413      	add	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001476:	bf00      	nop
 8001478:	f7ff ffe0 	bl	800143c <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	429a      	cmp	r2, r3
 8001486:	d8f7      	bhi.n	8001478 <HAL_Delay+0x28>
  {
  }
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000008 	.word	0x20000008

08001498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a8:	4b0c      	ldr	r3, [pc, #48]	@ (80014dc <__NVIC_SetPriorityGrouping+0x44>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014b4:	4013      	ands	r3, r2
 80014b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ca:	4a04      	ldr	r2, [pc, #16]	@ (80014dc <__NVIC_SetPriorityGrouping+0x44>)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	60d3      	str	r3, [r2, #12]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e4:	4b04      	ldr	r3, [pc, #16]	@ (80014f8 <__NVIC_GetPriorityGrouping+0x18>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	0a1b      	lsrs	r3, r3, #8
 80014ea:	f003 0307 	and.w	r3, r3, #7
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	2b00      	cmp	r3, #0
 800150e:	db0a      	blt.n	8001526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	b2da      	uxtb	r2, r3
 8001514:	490c      	ldr	r1, [pc, #48]	@ (8001548 <__NVIC_SetPriority+0x4c>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	0112      	lsls	r2, r2, #4
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	440b      	add	r3, r1
 8001520:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001524:	e00a      	b.n	800153c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4908      	ldr	r1, [pc, #32]	@ (800154c <__NVIC_SetPriority+0x50>)
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	3b04      	subs	r3, #4
 8001534:	0112      	lsls	r2, r2, #4
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	440b      	add	r3, r1
 800153a:	761a      	strb	r2, [r3, #24]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000e100 	.word	0xe000e100
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001550:	b480      	push	{r7}
 8001552:	b089      	sub	sp, #36	@ 0x24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f1c3 0307 	rsb	r3, r3, #7
 800156a:	2b04      	cmp	r3, #4
 800156c:	bf28      	it	cs
 800156e:	2304      	movcs	r3, #4
 8001570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3304      	adds	r3, #4
 8001576:	2b06      	cmp	r3, #6
 8001578:	d902      	bls.n	8001580 <NVIC_EncodePriority+0x30>
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3b03      	subs	r3, #3
 800157e:	e000      	b.n	8001582 <NVIC_EncodePriority+0x32>
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	f04f 32ff 	mov.w	r2, #4294967295
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43da      	mvns	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	401a      	ands	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001598:	f04f 31ff 	mov.w	r1, #4294967295
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	43d9      	mvns	r1, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	4313      	orrs	r3, r2
         );
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3724      	adds	r7, #36	@ 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015c4:	d301      	bcc.n	80015ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015c6:	2301      	movs	r3, #1
 80015c8:	e00f      	b.n	80015ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ca:	4a0a      	ldr	r2, [pc, #40]	@ (80015f4 <SysTick_Config+0x40>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015d2:	210f      	movs	r1, #15
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295
 80015d8:	f7ff ff90 	bl	80014fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015dc:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <SysTick_Config+0x40>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e2:	4b04      	ldr	r3, [pc, #16]	@ (80015f4 <SysTick_Config+0x40>)
 80015e4:	2207      	movs	r2, #7
 80015e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	e000e010 	.word	0xe000e010

080015f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ff49 	bl	8001498 <__NVIC_SetPriorityGrouping>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800160e:	b580      	push	{r7, lr}
 8001610:	b086      	sub	sp, #24
 8001612:	af00      	add	r7, sp, #0
 8001614:	4603      	mov	r3, r0
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
 800161a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001620:	f7ff ff5e 	bl	80014e0 <__NVIC_GetPriorityGrouping>
 8001624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	68b9      	ldr	r1, [r7, #8]
 800162a:	6978      	ldr	r0, [r7, #20]
 800162c:	f7ff ff90 	bl	8001550 <NVIC_EncodePriority>
 8001630:	4602      	mov	r2, r0
 8001632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001636:	4611      	mov	r1, r2
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff5f 	bl	80014fc <__NVIC_SetPriority>
}
 800163e:	bf00      	nop
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ffb0 	bl	80015b4 <SysTick_Config>
 8001654:	4603      	mov	r3, r0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001660:	b480      	push	{r7}
 8001662:	b08b      	sub	sp, #44	@ 0x2c
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800166a:	2300      	movs	r3, #0
 800166c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001672:	e169      	b.n	8001948 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001674:	2201      	movs	r2, #1
 8001676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	69fa      	ldr	r2, [r7, #28]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	429a      	cmp	r2, r3
 800168e:	f040 8158 	bne.w	8001942 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	4a9a      	ldr	r2, [pc, #616]	@ (8001900 <HAL_GPIO_Init+0x2a0>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d05e      	beq.n	800175a <HAL_GPIO_Init+0xfa>
 800169c:	4a98      	ldr	r2, [pc, #608]	@ (8001900 <HAL_GPIO_Init+0x2a0>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d875      	bhi.n	800178e <HAL_GPIO_Init+0x12e>
 80016a2:	4a98      	ldr	r2, [pc, #608]	@ (8001904 <HAL_GPIO_Init+0x2a4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d058      	beq.n	800175a <HAL_GPIO_Init+0xfa>
 80016a8:	4a96      	ldr	r2, [pc, #600]	@ (8001904 <HAL_GPIO_Init+0x2a4>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d86f      	bhi.n	800178e <HAL_GPIO_Init+0x12e>
 80016ae:	4a96      	ldr	r2, [pc, #600]	@ (8001908 <HAL_GPIO_Init+0x2a8>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d052      	beq.n	800175a <HAL_GPIO_Init+0xfa>
 80016b4:	4a94      	ldr	r2, [pc, #592]	@ (8001908 <HAL_GPIO_Init+0x2a8>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d869      	bhi.n	800178e <HAL_GPIO_Init+0x12e>
 80016ba:	4a94      	ldr	r2, [pc, #592]	@ (800190c <HAL_GPIO_Init+0x2ac>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d04c      	beq.n	800175a <HAL_GPIO_Init+0xfa>
 80016c0:	4a92      	ldr	r2, [pc, #584]	@ (800190c <HAL_GPIO_Init+0x2ac>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d863      	bhi.n	800178e <HAL_GPIO_Init+0x12e>
 80016c6:	4a92      	ldr	r2, [pc, #584]	@ (8001910 <HAL_GPIO_Init+0x2b0>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d046      	beq.n	800175a <HAL_GPIO_Init+0xfa>
 80016cc:	4a90      	ldr	r2, [pc, #576]	@ (8001910 <HAL_GPIO_Init+0x2b0>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d85d      	bhi.n	800178e <HAL_GPIO_Init+0x12e>
 80016d2:	2b12      	cmp	r3, #18
 80016d4:	d82a      	bhi.n	800172c <HAL_GPIO_Init+0xcc>
 80016d6:	2b12      	cmp	r3, #18
 80016d8:	d859      	bhi.n	800178e <HAL_GPIO_Init+0x12e>
 80016da:	a201      	add	r2, pc, #4	@ (adr r2, 80016e0 <HAL_GPIO_Init+0x80>)
 80016dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e0:	0800175b 	.word	0x0800175b
 80016e4:	08001735 	.word	0x08001735
 80016e8:	08001747 	.word	0x08001747
 80016ec:	08001789 	.word	0x08001789
 80016f0:	0800178f 	.word	0x0800178f
 80016f4:	0800178f 	.word	0x0800178f
 80016f8:	0800178f 	.word	0x0800178f
 80016fc:	0800178f 	.word	0x0800178f
 8001700:	0800178f 	.word	0x0800178f
 8001704:	0800178f 	.word	0x0800178f
 8001708:	0800178f 	.word	0x0800178f
 800170c:	0800178f 	.word	0x0800178f
 8001710:	0800178f 	.word	0x0800178f
 8001714:	0800178f 	.word	0x0800178f
 8001718:	0800178f 	.word	0x0800178f
 800171c:	0800178f 	.word	0x0800178f
 8001720:	0800178f 	.word	0x0800178f
 8001724:	0800173d 	.word	0x0800173d
 8001728:	08001751 	.word	0x08001751
 800172c:	4a79      	ldr	r2, [pc, #484]	@ (8001914 <HAL_GPIO_Init+0x2b4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d013      	beq.n	800175a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001732:	e02c      	b.n	800178e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	623b      	str	r3, [r7, #32]
          break;
 800173a:	e029      	b.n	8001790 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	3304      	adds	r3, #4
 8001742:	623b      	str	r3, [r7, #32]
          break;
 8001744:	e024      	b.n	8001790 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	3308      	adds	r3, #8
 800174c:	623b      	str	r3, [r7, #32]
          break;
 800174e:	e01f      	b.n	8001790 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	330c      	adds	r3, #12
 8001756:	623b      	str	r3, [r7, #32]
          break;
 8001758:	e01a      	b.n	8001790 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001762:	2304      	movs	r3, #4
 8001764:	623b      	str	r3, [r7, #32]
          break;
 8001766:	e013      	b.n	8001790 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d105      	bne.n	800177c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001770:	2308      	movs	r3, #8
 8001772:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69fa      	ldr	r2, [r7, #28]
 8001778:	611a      	str	r2, [r3, #16]
          break;
 800177a:	e009      	b.n	8001790 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800177c:	2308      	movs	r3, #8
 800177e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69fa      	ldr	r2, [r7, #28]
 8001784:	615a      	str	r2, [r3, #20]
          break;
 8001786:	e003      	b.n	8001790 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001788:	2300      	movs	r3, #0
 800178a:	623b      	str	r3, [r7, #32]
          break;
 800178c:	e000      	b.n	8001790 <HAL_GPIO_Init+0x130>
          break;
 800178e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	2bff      	cmp	r3, #255	@ 0xff
 8001794:	d801      	bhi.n	800179a <HAL_GPIO_Init+0x13a>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	e001      	b.n	800179e <HAL_GPIO_Init+0x13e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3304      	adds	r3, #4
 800179e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	2bff      	cmp	r3, #255	@ 0xff
 80017a4:	d802      	bhi.n	80017ac <HAL_GPIO_Init+0x14c>
 80017a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	e002      	b.n	80017b2 <HAL_GPIO_Init+0x152>
 80017ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ae:	3b08      	subs	r3, #8
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	210f      	movs	r1, #15
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	fa01 f303 	lsl.w	r3, r1, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	401a      	ands	r2, r3
 80017c4:	6a39      	ldr	r1, [r7, #32]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	fa01 f303 	lsl.w	r3, r1, r3
 80017cc:	431a      	orrs	r2, r3
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 80b1 	beq.w	8001942 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017e0:	4b4d      	ldr	r3, [pc, #308]	@ (8001918 <HAL_GPIO_Init+0x2b8>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	4a4c      	ldr	r2, [pc, #304]	@ (8001918 <HAL_GPIO_Init+0x2b8>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	6193      	str	r3, [r2, #24]
 80017ec:	4b4a      	ldr	r3, [pc, #296]	@ (8001918 <HAL_GPIO_Init+0x2b8>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017f8:	4a48      	ldr	r2, [pc, #288]	@ (800191c <HAL_GPIO_Init+0x2bc>)
 80017fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fc:	089b      	lsrs	r3, r3, #2
 80017fe:	3302      	adds	r3, #2
 8001800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001804:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	220f      	movs	r2, #15
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	4013      	ands	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a40      	ldr	r2, [pc, #256]	@ (8001920 <HAL_GPIO_Init+0x2c0>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d013      	beq.n	800184c <HAL_GPIO_Init+0x1ec>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a3f      	ldr	r2, [pc, #252]	@ (8001924 <HAL_GPIO_Init+0x2c4>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d00d      	beq.n	8001848 <HAL_GPIO_Init+0x1e8>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a3e      	ldr	r2, [pc, #248]	@ (8001928 <HAL_GPIO_Init+0x2c8>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d007      	beq.n	8001844 <HAL_GPIO_Init+0x1e4>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a3d      	ldr	r2, [pc, #244]	@ (800192c <HAL_GPIO_Init+0x2cc>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d101      	bne.n	8001840 <HAL_GPIO_Init+0x1e0>
 800183c:	2303      	movs	r3, #3
 800183e:	e006      	b.n	800184e <HAL_GPIO_Init+0x1ee>
 8001840:	2304      	movs	r3, #4
 8001842:	e004      	b.n	800184e <HAL_GPIO_Init+0x1ee>
 8001844:	2302      	movs	r3, #2
 8001846:	e002      	b.n	800184e <HAL_GPIO_Init+0x1ee>
 8001848:	2301      	movs	r3, #1
 800184a:	e000      	b.n	800184e <HAL_GPIO_Init+0x1ee>
 800184c:	2300      	movs	r3, #0
 800184e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001850:	f002 0203 	and.w	r2, r2, #3
 8001854:	0092      	lsls	r2, r2, #2
 8001856:	4093      	lsls	r3, r2
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	4313      	orrs	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800185e:	492f      	ldr	r1, [pc, #188]	@ (800191c <HAL_GPIO_Init+0x2bc>)
 8001860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001862:	089b      	lsrs	r3, r3, #2
 8001864:	3302      	adds	r3, #2
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d006      	beq.n	8001886 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001878:	4b2d      	ldr	r3, [pc, #180]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	492c      	ldr	r1, [pc, #176]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	608b      	str	r3, [r1, #8]
 8001884:	e006      	b.n	8001894 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001886:	4b2a      	ldr	r3, [pc, #168]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	43db      	mvns	r3, r3
 800188e:	4928      	ldr	r1, [pc, #160]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 8001890:	4013      	ands	r3, r2
 8001892:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d006      	beq.n	80018ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018a0:	4b23      	ldr	r3, [pc, #140]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	4922      	ldr	r1, [pc, #136]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	60cb      	str	r3, [r1, #12]
 80018ac:	e006      	b.n	80018bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018ae:	4b20      	ldr	r3, [pc, #128]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	491e      	ldr	r1, [pc, #120]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d006      	beq.n	80018d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018c8:	4b19      	ldr	r3, [pc, #100]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	4918      	ldr	r1, [pc, #96]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]
 80018d4:	e006      	b.n	80018e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018d6:	4b16      	ldr	r3, [pc, #88]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	43db      	mvns	r3, r3
 80018de:	4914      	ldr	r1, [pc, #80]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 80018e0:	4013      	ands	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d021      	beq.n	8001934 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	490e      	ldr	r1, [pc, #56]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	600b      	str	r3, [r1, #0]
 80018fc:	e021      	b.n	8001942 <HAL_GPIO_Init+0x2e2>
 80018fe:	bf00      	nop
 8001900:	10320000 	.word	0x10320000
 8001904:	10310000 	.word	0x10310000
 8001908:	10220000 	.word	0x10220000
 800190c:	10210000 	.word	0x10210000
 8001910:	10120000 	.word	0x10120000
 8001914:	10110000 	.word	0x10110000
 8001918:	40021000 	.word	0x40021000
 800191c:	40010000 	.word	0x40010000
 8001920:	40010800 	.word	0x40010800
 8001924:	40010c00 	.word	0x40010c00
 8001928:	40011000 	.word	0x40011000
 800192c:	40011400 	.word	0x40011400
 8001930:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001934:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <HAL_GPIO_Init+0x304>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	43db      	mvns	r3, r3
 800193c:	4909      	ldr	r1, [pc, #36]	@ (8001964 <HAL_GPIO_Init+0x304>)
 800193e:	4013      	ands	r3, r2
 8001940:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001944:	3301      	adds	r3, #1
 8001946:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194e:	fa22 f303 	lsr.w	r3, r2, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	f47f ae8e 	bne.w	8001674 <HAL_GPIO_Init+0x14>
  }
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	372c      	adds	r7, #44	@ 0x2c
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	40010400 	.word	0x40010400

08001968 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e12b      	b.n	8001bd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d106      	bne.n	8001994 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff fba4 	bl	80010dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2224      	movs	r2, #36	@ 0x24
 8001998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0201 	bic.w	r2, r2, #1
 80019aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019cc:	f001 fbfc 	bl	80031c8 <HAL_RCC_GetPCLK1Freq>
 80019d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	4a81      	ldr	r2, [pc, #516]	@ (8001bdc <HAL_I2C_Init+0x274>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d807      	bhi.n	80019ec <HAL_I2C_Init+0x84>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4a80      	ldr	r2, [pc, #512]	@ (8001be0 <HAL_I2C_Init+0x278>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	bf94      	ite	ls
 80019e4:	2301      	movls	r3, #1
 80019e6:	2300      	movhi	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	e006      	b.n	80019fa <HAL_I2C_Init+0x92>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4a7d      	ldr	r2, [pc, #500]	@ (8001be4 <HAL_I2C_Init+0x27c>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	bf94      	ite	ls
 80019f4:	2301      	movls	r3, #1
 80019f6:	2300      	movhi	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e0e7      	b.n	8001bd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4a78      	ldr	r2, [pc, #480]	@ (8001be8 <HAL_I2C_Init+0x280>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	0c9b      	lsrs	r3, r3, #18
 8001a0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68ba      	ldr	r2, [r7, #8]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	4a6a      	ldr	r2, [pc, #424]	@ (8001bdc <HAL_I2C_Init+0x274>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d802      	bhi.n	8001a3c <HAL_I2C_Init+0xd4>
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	e009      	b.n	8001a50 <HAL_I2C_Init+0xe8>
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a42:	fb02 f303 	mul.w	r3, r2, r3
 8001a46:	4a69      	ldr	r2, [pc, #420]	@ (8001bec <HAL_I2C_Init+0x284>)
 8001a48:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4c:	099b      	lsrs	r3, r3, #6
 8001a4e:	3301      	adds	r3, #1
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6812      	ldr	r2, [r2, #0]
 8001a54:	430b      	orrs	r3, r1
 8001a56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001a62:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	495c      	ldr	r1, [pc, #368]	@ (8001bdc <HAL_I2C_Init+0x274>)
 8001a6c:	428b      	cmp	r3, r1
 8001a6e:	d819      	bhi.n	8001aa4 <HAL_I2C_Init+0x13c>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	1e59      	subs	r1, r3, #1
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a7e:	1c59      	adds	r1, r3, #1
 8001a80:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a84:	400b      	ands	r3, r1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00a      	beq.n	8001aa0 <HAL_I2C_Init+0x138>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	1e59      	subs	r1, r3, #1
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a98:	3301      	adds	r3, #1
 8001a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a9e:	e051      	b.n	8001b44 <HAL_I2C_Init+0x1dc>
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	e04f      	b.n	8001b44 <HAL_I2C_Init+0x1dc>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d111      	bne.n	8001ad0 <HAL_I2C_Init+0x168>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1e58      	subs	r0, r3, #1
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6859      	ldr	r1, [r3, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	440b      	add	r3, r1
 8001aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001abe:	3301      	adds	r3, #1
 8001ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	bf0c      	ite	eq
 8001ac8:	2301      	moveq	r3, #1
 8001aca:	2300      	movne	r3, #0
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	e012      	b.n	8001af6 <HAL_I2C_Init+0x18e>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	1e58      	subs	r0, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6859      	ldr	r1, [r3, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	0099      	lsls	r1, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	bf0c      	ite	eq
 8001af0:	2301      	moveq	r3, #1
 8001af2:	2300      	movne	r3, #0
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_I2C_Init+0x196>
 8001afa:	2301      	movs	r3, #1
 8001afc:	e022      	b.n	8001b44 <HAL_I2C_Init+0x1dc>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10e      	bne.n	8001b24 <HAL_I2C_Init+0x1bc>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	1e58      	subs	r0, r3, #1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6859      	ldr	r1, [r3, #4]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	440b      	add	r3, r1
 8001b14:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b18:	3301      	adds	r3, #1
 8001b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b22:	e00f      	b.n	8001b44 <HAL_I2C_Init+0x1dc>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	1e58      	subs	r0, r3, #1
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6859      	ldr	r1, [r3, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	0099      	lsls	r1, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	6809      	ldr	r1, [r1, #0]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69da      	ldr	r2, [r3, #28]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b72:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6911      	ldr	r1, [r2, #16]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68d2      	ldr	r2, [r2, #12]
 8001b7e:	4311      	orrs	r1, r2
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	430b      	orrs	r3, r1
 8001b86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	695a      	ldr	r2, [r3, #20]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0201 	orr.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	000186a0 	.word	0x000186a0
 8001be0:	001e847f 	.word	0x001e847f
 8001be4:	003d08ff 	.word	0x003d08ff
 8001be8:	431bde83 	.word	0x431bde83
 8001bec:	10624dd3 	.word	0x10624dd3

08001bf0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	4608      	mov	r0, r1
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4603      	mov	r3, r0
 8001c00:	817b      	strh	r3, [r7, #10]
 8001c02:	460b      	mov	r3, r1
 8001c04:	813b      	strh	r3, [r7, #8]
 8001c06:	4613      	mov	r3, r2
 8001c08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c0a:	f7ff fc17 	bl	800143c <HAL_GetTick>
 8001c0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b20      	cmp	r3, #32
 8001c1a:	f040 80d9 	bne.w	8001dd0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	2319      	movs	r3, #25
 8001c24:	2201      	movs	r2, #1
 8001c26:	496d      	ldr	r1, [pc, #436]	@ (8001ddc <HAL_I2C_Mem_Write+0x1ec>)
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f000 fccd 	bl	80025c8 <I2C_WaitOnFlagUntilTimeout>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001c34:	2302      	movs	r3, #2
 8001c36:	e0cc      	b.n	8001dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d101      	bne.n	8001c46 <HAL_I2C_Mem_Write+0x56>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e0c5      	b.n	8001dd2 <HAL_I2C_Mem_Write+0x1e2>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d007      	beq.n	8001c6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2221      	movs	r2, #33	@ 0x21
 8001c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2240      	movs	r2, #64	@ 0x40
 8001c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a3a      	ldr	r2, [r7, #32]
 8001c96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001c9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4a4d      	ldr	r2, [pc, #308]	@ (8001de0 <HAL_I2C_Mem_Write+0x1f0>)
 8001cac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cae:	88f8      	ldrh	r0, [r7, #6]
 8001cb0:	893a      	ldrh	r2, [r7, #8]
 8001cb2:	8979      	ldrh	r1, [r7, #10]
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	9301      	str	r3, [sp, #4]
 8001cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f000 fb04 	bl	80022cc <I2C_RequestMemoryWrite>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d052      	beq.n	8001d70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e081      	b.n	8001dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 fd92 	bl	80027fc <I2C_WaitOnTXEFlagUntilTimeout>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00d      	beq.n	8001cfa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d107      	bne.n	8001cf6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cf4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e06b      	b.n	8001dd2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfe:	781a      	ldrb	r2, [r3, #0]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d14:	3b01      	subs	r3, #1
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	3b01      	subs	r3, #1
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d11b      	bne.n	8001d70 <HAL_I2C_Mem_Write+0x180>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d017      	beq.n	8001d70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d44:	781a      	ldrb	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1aa      	bne.n	8001cce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f000 fd85 	bl	800288c <I2C_WaitOnBTFFlagUntilTimeout>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00d      	beq.n	8001da4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d107      	bne.n	8001da0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e016      	b.n	8001dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2220      	movs	r2, #32
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e000      	b.n	8001dd2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001dd0:	2302      	movs	r3, #2
  }
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	00100002 	.word	0x00100002
 8001de0:	ffff0000 	.word	0xffff0000

08001de4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08c      	sub	sp, #48	@ 0x30
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	4608      	mov	r0, r1
 8001dee:	4611      	mov	r1, r2
 8001df0:	461a      	mov	r2, r3
 8001df2:	4603      	mov	r3, r0
 8001df4:	817b      	strh	r3, [r7, #10]
 8001df6:	460b      	mov	r3, r1
 8001df8:	813b      	strh	r3, [r7, #8]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e02:	f7ff fb1b 	bl	800143c <HAL_GetTick>
 8001e06:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b20      	cmp	r3, #32
 8001e12:	f040 8250 	bne.w	80022b6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2319      	movs	r3, #25
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4982      	ldr	r1, [pc, #520]	@ (8002028 <HAL_I2C_Mem_Read+0x244>)
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 fbd1 	bl	80025c8 <I2C_WaitOnFlagUntilTimeout>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	e243      	b.n	80022b8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d101      	bne.n	8001e3e <HAL_I2C_Mem_Read+0x5a>
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e23c      	b.n	80022b8 <HAL_I2C_Mem_Read+0x4d4>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d007      	beq.n	8001e64 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0201 	orr.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2222      	movs	r2, #34	@ 0x22
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2240      	movs	r2, #64	@ 0x40
 8001e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001e94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4a62      	ldr	r2, [pc, #392]	@ (800202c <HAL_I2C_Mem_Read+0x248>)
 8001ea4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ea6:	88f8      	ldrh	r0, [r7, #6]
 8001ea8:	893a      	ldrh	r2, [r7, #8]
 8001eaa:	8979      	ldrh	r1, [r7, #10]
 8001eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eae:	9301      	str	r3, [sp, #4]
 8001eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 fa9e 	bl	80023f8 <I2C_RequestMemoryRead>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e1f8      	b.n	80022b8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d113      	bne.n	8001ef6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	e1cc      	b.n	8002290 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d11e      	bne.n	8001f3c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f0e:	b672      	cpsid	i
}
 8001f10:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f12:	2300      	movs	r3, #0
 8001f14:	61bb      	str	r3, [r7, #24]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	61bb      	str	r3, [r7, #24]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	61bb      	str	r3, [r7, #24]
 8001f26:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f36:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f38:	b662      	cpsie	i
}
 8001f3a:	e035      	b.n	8001fa8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d11e      	bne.n	8001f82 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f54:	b672      	cpsid	i
}
 8001f56:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f7e:	b662      	cpsie	i
}
 8001f80:	e012      	b.n	8001fa8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001f90:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001fa8:	e172      	b.n	8002290 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	f200 811f 	bhi.w	80021f2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d123      	bne.n	8002004 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fbe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 fcab 	bl	800291c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e173      	b.n	80022b8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691a      	ldr	r2, [r3, #16]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002002:	e145      	b.n	8002290 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002008:	2b02      	cmp	r3, #2
 800200a:	d152      	bne.n	80020b2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800200c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002012:	2200      	movs	r2, #0
 8002014:	4906      	ldr	r1, [pc, #24]	@ (8002030 <HAL_I2C_Mem_Read+0x24c>)
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 fad6 	bl	80025c8 <I2C_WaitOnFlagUntilTimeout>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d008      	beq.n	8002034 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e148      	b.n	80022b8 <HAL_I2C_Mem_Read+0x4d4>
 8002026:	bf00      	nop
 8002028:	00100002 	.word	0x00100002
 800202c:	ffff0000 	.word	0xffff0000
 8002030:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002034:	b672      	cpsid	i
}
 8002036:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002046:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691a      	ldr	r2, [r3, #16]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002070:	b29b      	uxth	r3, r3
 8002072:	3b01      	subs	r3, #1
 8002074:	b29a      	uxth	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800207a:	b662      	cpsie	i
}
 800207c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	691a      	ldr	r2, [r3, #16]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800209a:	3b01      	subs	r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	3b01      	subs	r3, #1
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80020b0:	e0ee      	b.n	8002290 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020b8:	2200      	movs	r2, #0
 80020ba:	4981      	ldr	r1, [pc, #516]	@ (80022c0 <HAL_I2C_Mem_Read+0x4dc>)
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 fa83 	bl	80025c8 <I2C_WaitOnFlagUntilTimeout>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0f5      	b.n	80022b8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80020dc:	b672      	cpsid	i
}
 80020de:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691a      	ldr	r2, [r3, #16]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f2:	1c5a      	adds	r2, r3, #1
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002108:	b29b      	uxth	r3, r3
 800210a:	3b01      	subs	r3, #1
 800210c:	b29a      	uxth	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002112:	4b6c      	ldr	r3, [pc, #432]	@ (80022c4 <HAL_I2C_Mem_Read+0x4e0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	08db      	lsrs	r3, r3, #3
 8002118:	4a6b      	ldr	r2, [pc, #428]	@ (80022c8 <HAL_I2C_Mem_Read+0x4e4>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	0a1a      	lsrs	r2, r3, #8
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	00da      	lsls	r2, r3, #3
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800212c:	6a3b      	ldr	r3, [r7, #32]
 800212e:	3b01      	subs	r3, #1
 8002130:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002132:	6a3b      	ldr	r3, [r7, #32]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d118      	bne.n	800216a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2220      	movs	r2, #32
 8002142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002152:	f043 0220 	orr.w	r2, r3, #32
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800215a:	b662      	cpsie	i
}
 800215c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e0a6      	b.n	80022b8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b04      	cmp	r3, #4
 8002176:	d1d9      	bne.n	800212c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002186:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691a      	ldr	r2, [r3, #16]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	3b01      	subs	r3, #1
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80021ba:	b662      	cpsie	i
}
 80021bc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	691a      	ldr	r2, [r3, #16]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d0:	1c5a      	adds	r2, r3, #1
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021da:	3b01      	subs	r3, #1
 80021dc:	b29a      	uxth	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80021f0:	e04e      	b.n	8002290 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 fb90 	bl	800291c <I2C_WaitOnRXNEFlagUntilTimeout>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e058      	b.n	80022b8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	691a      	ldr	r2, [r3, #16]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002218:	1c5a      	adds	r2, r3, #1
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002222:	3b01      	subs	r3, #1
 8002224:	b29a      	uxth	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800222e:	b29b      	uxth	r3, r3
 8002230:	3b01      	subs	r3, #1
 8002232:	b29a      	uxth	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	f003 0304 	and.w	r3, r3, #4
 8002242:	2b04      	cmp	r3, #4
 8002244:	d124      	bne.n	8002290 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800224a:	2b03      	cmp	r3, #3
 800224c:	d107      	bne.n	800225e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800225c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800227a:	3b01      	subs	r3, #1
 800227c:	b29a      	uxth	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002286:	b29b      	uxth	r3, r3
 8002288:	3b01      	subs	r3, #1
 800228a:	b29a      	uxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002294:	2b00      	cmp	r3, #0
 8002296:	f47f ae88 	bne.w	8001faa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2220      	movs	r2, #32
 800229e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	e000      	b.n	80022b8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80022b6:	2302      	movs	r3, #2
  }
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3728      	adds	r7, #40	@ 0x28
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	00010004 	.word	0x00010004
 80022c4:	20000000 	.word	0x20000000
 80022c8:	14f8b589 	.word	0x14f8b589

080022cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af02      	add	r7, sp, #8
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	4608      	mov	r0, r1
 80022d6:	4611      	mov	r1, r2
 80022d8:	461a      	mov	r2, r3
 80022da:	4603      	mov	r3, r0
 80022dc:	817b      	strh	r3, [r7, #10]
 80022de:	460b      	mov	r3, r1
 80022e0:	813b      	strh	r3, [r7, #8]
 80022e2:	4613      	mov	r3, r2
 80022e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 f960 	bl	80025c8 <I2C_WaitOnFlagUntilTimeout>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00d      	beq.n	800232a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002318:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800231c:	d103      	bne.n	8002326 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002324:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e05f      	b.n	80023ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800232a:	897b      	ldrh	r3, [r7, #10]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	461a      	mov	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002338:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800233a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233c:	6a3a      	ldr	r2, [r7, #32]
 800233e:	492d      	ldr	r1, [pc, #180]	@ (80023f4 <I2C_RequestMemoryWrite+0x128>)
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 f9bb 	bl	80026bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e04c      	b.n	80023ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002368:	6a39      	ldr	r1, [r7, #32]
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f000 fa46 	bl	80027fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00d      	beq.n	8002392 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237a:	2b04      	cmp	r3, #4
 800237c:	d107      	bne.n	800238e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800238c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e02b      	b.n	80023ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002392:	88fb      	ldrh	r3, [r7, #6]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d105      	bne.n	80023a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002398:	893b      	ldrh	r3, [r7, #8]
 800239a:	b2da      	uxtb	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	611a      	str	r2, [r3, #16]
 80023a2:	e021      	b.n	80023e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80023a4:	893b      	ldrh	r3, [r7, #8]
 80023a6:	0a1b      	lsrs	r3, r3, #8
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023b4:	6a39      	ldr	r1, [r7, #32]
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 fa20 	bl	80027fc <I2C_WaitOnTXEFlagUntilTimeout>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00d      	beq.n	80023de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d107      	bne.n	80023da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e005      	b.n	80023ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023de:	893b      	ldrh	r3, [r7, #8]
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	00010002 	.word	0x00010002

080023f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af02      	add	r7, sp, #8
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	4608      	mov	r0, r1
 8002402:	4611      	mov	r1, r2
 8002404:	461a      	mov	r2, r3
 8002406:	4603      	mov	r3, r0
 8002408:	817b      	strh	r3, [r7, #10]
 800240a:	460b      	mov	r3, r1
 800240c:	813b      	strh	r3, [r7, #8]
 800240e:	4613      	mov	r3, r2
 8002410:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002420:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002430:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	2200      	movs	r2, #0
 800243a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 f8c2 	bl	80025c8 <I2C_WaitOnFlagUntilTimeout>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00d      	beq.n	8002466 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002454:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002458:	d103      	bne.n	8002462 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002460:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e0aa      	b.n	80025bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002466:	897b      	ldrh	r3, [r7, #10]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	461a      	mov	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002474:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002478:	6a3a      	ldr	r2, [r7, #32]
 800247a:	4952      	ldr	r1, [pc, #328]	@ (80025c4 <I2C_RequestMemoryRead+0x1cc>)
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f91d 	bl	80026bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e097      	b.n	80025bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024a4:	6a39      	ldr	r1, [r7, #32]
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 f9a8 	bl	80027fc <I2C_WaitOnTXEFlagUntilTimeout>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00d      	beq.n	80024ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d107      	bne.n	80024ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e076      	b.n	80025bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d105      	bne.n	80024e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024d4:	893b      	ldrh	r3, [r7, #8]
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	611a      	str	r2, [r3, #16]
 80024de:	e021      	b.n	8002524 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80024e0:	893b      	ldrh	r3, [r7, #8]
 80024e2:	0a1b      	lsrs	r3, r3, #8
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f0:	6a39      	ldr	r1, [r7, #32]
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 f982 	bl	80027fc <I2C_WaitOnTXEFlagUntilTimeout>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00d      	beq.n	800251a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002502:	2b04      	cmp	r3, #4
 8002504:	d107      	bne.n	8002516 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002514:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e050      	b.n	80025bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800251a:	893b      	ldrh	r3, [r7, #8]
 800251c:	b2da      	uxtb	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002524:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002526:	6a39      	ldr	r1, [r7, #32]
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 f967 	bl	80027fc <I2C_WaitOnTXEFlagUntilTimeout>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00d      	beq.n	8002550 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002538:	2b04      	cmp	r3, #4
 800253a:	d107      	bne.n	800254c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800254a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e035      	b.n	80025bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800255e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	2200      	movs	r2, #0
 8002568:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 f82b 	bl	80025c8 <I2C_WaitOnFlagUntilTimeout>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00d      	beq.n	8002594 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002586:	d103      	bne.n	8002590 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800258e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e013      	b.n	80025bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002594:	897b      	ldrh	r3, [r7, #10]
 8002596:	b2db      	uxtb	r3, r3
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	b2da      	uxtb	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a6:	6a3a      	ldr	r2, [r7, #32]
 80025a8:	4906      	ldr	r1, [pc, #24]	@ (80025c4 <I2C_RequestMemoryRead+0x1cc>)
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 f886 	bl	80026bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	00010002 	.word	0x00010002

080025c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	4613      	mov	r3, r2
 80025d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025d8:	e048      	b.n	800266c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e0:	d044      	beq.n	800266c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e2:	f7fe ff2b 	bl	800143c <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d302      	bcc.n	80025f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d139      	bne.n	800266c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	0c1b      	lsrs	r3, r3, #16
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d10d      	bne.n	800261e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	43da      	mvns	r2, r3
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	4013      	ands	r3, r2
 800260e:	b29b      	uxth	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	bf0c      	ite	eq
 8002614:	2301      	moveq	r3, #1
 8002616:	2300      	movne	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	461a      	mov	r2, r3
 800261c:	e00c      	b.n	8002638 <I2C_WaitOnFlagUntilTimeout+0x70>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	43da      	mvns	r2, r3
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	4013      	ands	r3, r2
 800262a:	b29b      	uxth	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	bf0c      	ite	eq
 8002630:	2301      	moveq	r3, #1
 8002632:	2300      	movne	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	461a      	mov	r2, r3
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	429a      	cmp	r2, r3
 800263c:	d116      	bne.n	800266c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002658:	f043 0220 	orr.w	r2, r3, #32
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e023      	b.n	80026b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	0c1b      	lsrs	r3, r3, #16
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b01      	cmp	r3, #1
 8002674:	d10d      	bne.n	8002692 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	43da      	mvns	r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	4013      	ands	r3, r2
 8002682:	b29b      	uxth	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	bf0c      	ite	eq
 8002688:	2301      	moveq	r3, #1
 800268a:	2300      	movne	r3, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	461a      	mov	r2, r3
 8002690:	e00c      	b.n	80026ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	43da      	mvns	r2, r3
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	4013      	ands	r3, r2
 800269e:	b29b      	uxth	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	bf0c      	ite	eq
 80026a4:	2301      	moveq	r3, #1
 80026a6:	2300      	movne	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	461a      	mov	r2, r3
 80026ac:	79fb      	ldrb	r3, [r7, #7]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d093      	beq.n	80025da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
 80026c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026ca:	e071      	b.n	80027b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026da:	d123      	bne.n	8002724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80026f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2220      	movs	r2, #32
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002710:	f043 0204 	orr.w	r2, r3, #4
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e067      	b.n	80027f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272a:	d041      	beq.n	80027b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800272c:	f7fe fe86 	bl	800143c <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	429a      	cmp	r2, r3
 800273a:	d302      	bcc.n	8002742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d136      	bne.n	80027b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	0c1b      	lsrs	r3, r3, #16
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b01      	cmp	r3, #1
 800274a:	d10c      	bne.n	8002766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	43da      	mvns	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	4013      	ands	r3, r2
 8002758:	b29b      	uxth	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	bf14      	ite	ne
 800275e:	2301      	movne	r3, #1
 8002760:	2300      	moveq	r3, #0
 8002762:	b2db      	uxtb	r3, r3
 8002764:	e00b      	b.n	800277e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	43da      	mvns	r2, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	4013      	ands	r3, r2
 8002772:	b29b      	uxth	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	bf14      	ite	ne
 8002778:	2301      	movne	r3, #1
 800277a:	2300      	moveq	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d016      	beq.n	80027b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2220      	movs	r2, #32
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279c:	f043 0220 	orr.w	r2, r3, #32
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e021      	b.n	80027f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	0c1b      	lsrs	r3, r3, #16
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d10c      	bne.n	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	43da      	mvns	r2, r3
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	4013      	ands	r3, r2
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	bf14      	ite	ne
 80027cc:	2301      	movne	r3, #1
 80027ce:	2300      	moveq	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	e00b      	b.n	80027ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	43da      	mvns	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	4013      	ands	r3, r2
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	bf14      	ite	ne
 80027e6:	2301      	movne	r3, #1
 80027e8:	2300      	moveq	r3, #0
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f47f af6d 	bne.w	80026cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002808:	e034      	b.n	8002874 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 f8e3 	bl	80029d6 <I2C_IsAcknowledgeFailed>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e034      	b.n	8002884 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002820:	d028      	beq.n	8002874 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002822:	f7fe fe0b 	bl	800143c <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	429a      	cmp	r2, r3
 8002830:	d302      	bcc.n	8002838 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d11d      	bne.n	8002874 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002842:	2b80      	cmp	r3, #128	@ 0x80
 8002844:	d016      	beq.n	8002874 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2220      	movs	r2, #32
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002860:	f043 0220 	orr.w	r2, r3, #32
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e007      	b.n	8002884 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800287e:	2b80      	cmp	r3, #128	@ 0x80
 8002880:	d1c3      	bne.n	800280a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002898:	e034      	b.n	8002904 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 f89b 	bl	80029d6 <I2C_IsAcknowledgeFailed>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e034      	b.n	8002914 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b0:	d028      	beq.n	8002904 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028b2:	f7fe fdc3 	bl	800143c <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d302      	bcc.n	80028c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d11d      	bne.n	8002904 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d016      	beq.n	8002904 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f0:	f043 0220 	orr.w	r2, r3, #32
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e007      	b.n	8002914 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b04      	cmp	r3, #4
 8002910:	d1c3      	bne.n	800289a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002928:	e049      	b.n	80029be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	f003 0310 	and.w	r3, r3, #16
 8002934:	2b10      	cmp	r3, #16
 8002936:	d119      	bne.n	800296c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0210 	mvn.w	r2, #16
 8002940:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e030      	b.n	80029ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800296c:	f7fe fd66 	bl	800143c <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	429a      	cmp	r2, r3
 800297a:	d302      	bcc.n	8002982 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d11d      	bne.n	80029be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800298c:	2b40      	cmp	r3, #64	@ 0x40
 800298e:	d016      	beq.n	80029be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2220      	movs	r2, #32
 800299a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	f043 0220 	orr.w	r2, r3, #32
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e007      	b.n	80029ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c8:	2b40      	cmp	r3, #64	@ 0x40
 80029ca:	d1ae      	bne.n	800292a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029ec:	d11b      	bne.n	8002a26 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80029f6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2220      	movs	r2, #32
 8002a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a12:	f043 0204 	orr.w	r2, r3, #4
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr
	...

08002a34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e272      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 8087 	beq.w	8002b62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a54:	4b92      	ldr	r3, [pc, #584]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 030c 	and.w	r3, r3, #12
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d00c      	beq.n	8002a7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a60:	4b8f      	ldr	r3, [pc, #572]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 030c 	and.w	r3, r3, #12
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d112      	bne.n	8002a92 <HAL_RCC_OscConfig+0x5e>
 8002a6c:	4b8c      	ldr	r3, [pc, #560]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a78:	d10b      	bne.n	8002a92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7a:	4b89      	ldr	r3, [pc, #548]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d06c      	beq.n	8002b60 <HAL_RCC_OscConfig+0x12c>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d168      	bne.n	8002b60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e24c      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a9a:	d106      	bne.n	8002aaa <HAL_RCC_OscConfig+0x76>
 8002a9c:	4b80      	ldr	r3, [pc, #512]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a7f      	ldr	r2, [pc, #508]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002aa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	e02e      	b.n	8002b08 <HAL_RCC_OscConfig+0xd4>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCC_OscConfig+0x98>
 8002ab2:	4b7b      	ldr	r3, [pc, #492]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a7a      	ldr	r2, [pc, #488]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	4b78      	ldr	r3, [pc, #480]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a77      	ldr	r2, [pc, #476]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	e01d      	b.n	8002b08 <HAL_RCC_OscConfig+0xd4>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ad4:	d10c      	bne.n	8002af0 <HAL_RCC_OscConfig+0xbc>
 8002ad6:	4b72      	ldr	r3, [pc, #456]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a71      	ldr	r2, [pc, #452]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	4b6f      	ldr	r3, [pc, #444]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a6e      	ldr	r2, [pc, #440]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	e00b      	b.n	8002b08 <HAL_RCC_OscConfig+0xd4>
 8002af0:	4b6b      	ldr	r3, [pc, #428]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a6a      	ldr	r2, [pc, #424]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002af6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	4b68      	ldr	r3, [pc, #416]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a67      	ldr	r2, [pc, #412]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002b02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d013      	beq.n	8002b38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b10:	f7fe fc94 	bl	800143c <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b18:	f7fe fc90 	bl	800143c <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b64      	cmp	r3, #100	@ 0x64
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e200      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCC_OscConfig+0xe4>
 8002b36:	e014      	b.n	8002b62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b38:	f7fe fc80 	bl	800143c <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b40:	f7fe fc7c 	bl	800143c <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b64      	cmp	r3, #100	@ 0x64
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e1ec      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b52:	4b53      	ldr	r3, [pc, #332]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f0      	bne.n	8002b40 <HAL_RCC_OscConfig+0x10c>
 8002b5e:	e000      	b.n	8002b62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d063      	beq.n	8002c36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b6e:	4b4c      	ldr	r3, [pc, #304]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00b      	beq.n	8002b92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b7a:	4b49      	ldr	r3, [pc, #292]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d11c      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x18c>
 8002b86:	4b46      	ldr	r3, [pc, #280]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d116      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b92:	4b43      	ldr	r3, [pc, #268]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d005      	beq.n	8002baa <HAL_RCC_OscConfig+0x176>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d001      	beq.n	8002baa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e1c0      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002baa:	4b3d      	ldr	r3, [pc, #244]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	4939      	ldr	r1, [pc, #228]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bbe:	e03a      	b.n	8002c36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d020      	beq.n	8002c0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc8:	4b36      	ldr	r3, [pc, #216]	@ (8002ca4 <HAL_RCC_OscConfig+0x270>)
 8002bca:	2201      	movs	r2, #1
 8002bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bce:	f7fe fc35 	bl	800143c <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bd6:	f7fe fc31 	bl	800143c <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e1a1      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be8:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0f0      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf4:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	4927      	ldr	r1, [pc, #156]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	600b      	str	r3, [r1, #0]
 8002c08:	e015      	b.n	8002c36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c0a:	4b26      	ldr	r3, [pc, #152]	@ (8002ca4 <HAL_RCC_OscConfig+0x270>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c10:	f7fe fc14 	bl	800143c <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c18:	f7fe fc10 	bl	800143c <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e180      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f0      	bne.n	8002c18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d03a      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d019      	beq.n	8002c7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c4a:	4b17      	ldr	r3, [pc, #92]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c50:	f7fe fbf4 	bl	800143c <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c58:	f7fe fbf0 	bl	800143c <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e160      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c76:	2001      	movs	r0, #1
 8002c78:	f000 faba 	bl	80031f0 <RCC_Delay>
 8002c7c:	e01c      	b.n	8002cb8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c84:	f7fe fbda 	bl	800143c <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c8a:	e00f      	b.n	8002cac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c8c:	f7fe fbd6 	bl	800143c <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d908      	bls.n	8002cac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e146      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
 8002c9e:	bf00      	nop
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	42420000 	.word	0x42420000
 8002ca8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cac:	4b92      	ldr	r3, [pc, #584]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1e9      	bne.n	8002c8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 80a6 	beq.w	8002e12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cca:	4b8b      	ldr	r3, [pc, #556]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10d      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd6:	4b88      	ldr	r3, [pc, #544]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	4a87      	ldr	r2, [pc, #540]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ce0:	61d3      	str	r3, [r2, #28]
 8002ce2:	4b85      	ldr	r3, [pc, #532]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf2:	4b82      	ldr	r3, [pc, #520]	@ (8002efc <HAL_RCC_OscConfig+0x4c8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d118      	bne.n	8002d30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cfe:	4b7f      	ldr	r3, [pc, #508]	@ (8002efc <HAL_RCC_OscConfig+0x4c8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a7e      	ldr	r2, [pc, #504]	@ (8002efc <HAL_RCC_OscConfig+0x4c8>)
 8002d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d0a:	f7fe fb97 	bl	800143c <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d12:	f7fe fb93 	bl	800143c <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b64      	cmp	r3, #100	@ 0x64
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e103      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d24:	4b75      	ldr	r3, [pc, #468]	@ (8002efc <HAL_RCC_OscConfig+0x4c8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0f0      	beq.n	8002d12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d106      	bne.n	8002d46 <HAL_RCC_OscConfig+0x312>
 8002d38:	4b6f      	ldr	r3, [pc, #444]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	4a6e      	ldr	r2, [pc, #440]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	6213      	str	r3, [r2, #32]
 8002d44:	e02d      	b.n	8002da2 <HAL_RCC_OscConfig+0x36e>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10c      	bne.n	8002d68 <HAL_RCC_OscConfig+0x334>
 8002d4e:	4b6a      	ldr	r3, [pc, #424]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	4a69      	ldr	r2, [pc, #420]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002d54:	f023 0301 	bic.w	r3, r3, #1
 8002d58:	6213      	str	r3, [r2, #32]
 8002d5a:	4b67      	ldr	r3, [pc, #412]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	4a66      	ldr	r2, [pc, #408]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002d60:	f023 0304 	bic.w	r3, r3, #4
 8002d64:	6213      	str	r3, [r2, #32]
 8002d66:	e01c      	b.n	8002da2 <HAL_RCC_OscConfig+0x36e>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	2b05      	cmp	r3, #5
 8002d6e:	d10c      	bne.n	8002d8a <HAL_RCC_OscConfig+0x356>
 8002d70:	4b61      	ldr	r3, [pc, #388]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	4a60      	ldr	r2, [pc, #384]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002d76:	f043 0304 	orr.w	r3, r3, #4
 8002d7a:	6213      	str	r3, [r2, #32]
 8002d7c:	4b5e      	ldr	r3, [pc, #376]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	4a5d      	ldr	r2, [pc, #372]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	6213      	str	r3, [r2, #32]
 8002d88:	e00b      	b.n	8002da2 <HAL_RCC_OscConfig+0x36e>
 8002d8a:	4b5b      	ldr	r3, [pc, #364]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	4a5a      	ldr	r2, [pc, #360]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002d90:	f023 0301 	bic.w	r3, r3, #1
 8002d94:	6213      	str	r3, [r2, #32]
 8002d96:	4b58      	ldr	r3, [pc, #352]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	4a57      	ldr	r2, [pc, #348]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	f023 0304 	bic.w	r3, r3, #4
 8002da0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d015      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002daa:	f7fe fb47 	bl	800143c <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db0:	e00a      	b.n	8002dc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db2:	f7fe fb43 	bl	800143c <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e0b1      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc8:	4b4b      	ldr	r3, [pc, #300]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0ee      	beq.n	8002db2 <HAL_RCC_OscConfig+0x37e>
 8002dd4:	e014      	b.n	8002e00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd6:	f7fe fb31 	bl	800143c <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ddc:	e00a      	b.n	8002df4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dde:	f7fe fb2d 	bl	800143c <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e09b      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df4:	4b40      	ldr	r3, [pc, #256]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1ee      	bne.n	8002dde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e00:	7dfb      	ldrb	r3, [r7, #23]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d105      	bne.n	8002e12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e06:	4b3c      	ldr	r3, [pc, #240]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	4a3b      	ldr	r2, [pc, #236]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002e0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 8087 	beq.w	8002f2a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e1c:	4b36      	ldr	r3, [pc, #216]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 030c 	and.w	r3, r3, #12
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d061      	beq.n	8002eec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d146      	bne.n	8002ebe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e30:	4b33      	ldr	r3, [pc, #204]	@ (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e36:	f7fe fb01 	bl	800143c <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3e:	f7fe fafd 	bl	800143c <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e06d      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e50:	4b29      	ldr	r3, [pc, #164]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1f0      	bne.n	8002e3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e64:	d108      	bne.n	8002e78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e66:	4b24      	ldr	r3, [pc, #144]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	4921      	ldr	r1, [pc, #132]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e78:	4b1f      	ldr	r3, [pc, #124]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a19      	ldr	r1, [r3, #32]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e88:	430b      	orrs	r3, r1
 8002e8a:	491b      	ldr	r1, [pc, #108]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e90:	4b1b      	ldr	r3, [pc, #108]	@ (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e96:	f7fe fad1 	bl	800143c <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e9e:	f7fe facd 	bl	800143c <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e03d      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eb0:	4b11      	ldr	r3, [pc, #68]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x46a>
 8002ebc:	e035      	b.n	8002f2a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ebe:	4b10      	ldr	r3, [pc, #64]	@ (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7fe faba 	bl	800143c <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ecc:	f7fe fab6 	bl	800143c <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e026      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ede:	4b06      	ldr	r3, [pc, #24]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0x498>
 8002eea:	e01e      	b.n	8002f2a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	69db      	ldr	r3, [r3, #28]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d107      	bne.n	8002f04 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e019      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40007000 	.word	0x40007000
 8002f00:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f04:	4b0b      	ldr	r3, [pc, #44]	@ (8002f34 <HAL_RCC_OscConfig+0x500>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d106      	bne.n	8002f26 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d001      	beq.n	8002f2a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40021000 	.word	0x40021000

08002f38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0d0      	b.n	80030ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f4c:	4b6a      	ldr	r3, [pc, #424]	@ (80030f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d910      	bls.n	8002f7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5a:	4b67      	ldr	r3, [pc, #412]	@ (80030f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 0207 	bic.w	r2, r3, #7
 8002f62:	4965      	ldr	r1, [pc, #404]	@ (80030f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6a:	4b63      	ldr	r3, [pc, #396]	@ (80030f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0b8      	b.n	80030ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d020      	beq.n	8002fca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f94:	4b59      	ldr	r3, [pc, #356]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	4a58      	ldr	r2, [pc, #352]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fac:	4b53      	ldr	r3, [pc, #332]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	4a52      	ldr	r2, [pc, #328]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8002fb2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002fb6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb8:	4b50      	ldr	r3, [pc, #320]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	494d      	ldr	r1, [pc, #308]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d040      	beq.n	8003058 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d107      	bne.n	8002fee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fde:	4b47      	ldr	r3, [pc, #284]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d115      	bne.n	8003016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e07f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d107      	bne.n	8003006 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff6:	4b41      	ldr	r3, [pc, #260]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d109      	bne.n	8003016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e073      	b.n	80030ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003006:	4b3d      	ldr	r3, [pc, #244]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e06b      	b.n	80030ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003016:	4b39      	ldr	r3, [pc, #228]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f023 0203 	bic.w	r2, r3, #3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	4936      	ldr	r1, [pc, #216]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8003024:	4313      	orrs	r3, r2
 8003026:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003028:	f7fe fa08 	bl	800143c <HAL_GetTick>
 800302c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302e:	e00a      	b.n	8003046 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003030:	f7fe fa04 	bl	800143c <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800303e:	4293      	cmp	r3, r2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e053      	b.n	80030ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003046:	4b2d      	ldr	r3, [pc, #180]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 020c 	and.w	r2, r3, #12
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	429a      	cmp	r2, r3
 8003056:	d1eb      	bne.n	8003030 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003058:	4b27      	ldr	r3, [pc, #156]	@ (80030f8 <HAL_RCC_ClockConfig+0x1c0>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d210      	bcs.n	8003088 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003066:	4b24      	ldr	r3, [pc, #144]	@ (80030f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 0207 	bic.w	r2, r3, #7
 800306e:	4922      	ldr	r1, [pc, #136]	@ (80030f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	4313      	orrs	r3, r2
 8003074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003076:	4b20      	ldr	r3, [pc, #128]	@ (80030f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e032      	b.n	80030ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003094:	4b19      	ldr	r3, [pc, #100]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	4916      	ldr	r1, [pc, #88]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d009      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030b2:	4b12      	ldr	r3, [pc, #72]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	490e      	ldr	r1, [pc, #56]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030c6:	f000 f821 	bl	800310c <HAL_RCC_GetSysClockFreq>
 80030ca:	4602      	mov	r2, r0
 80030cc:	4b0b      	ldr	r3, [pc, #44]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	091b      	lsrs	r3, r3, #4
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	490a      	ldr	r1, [pc, #40]	@ (8003100 <HAL_RCC_ClockConfig+0x1c8>)
 80030d8:	5ccb      	ldrb	r3, [r1, r3]
 80030da:	fa22 f303 	lsr.w	r3, r2, r3
 80030de:	4a09      	ldr	r2, [pc, #36]	@ (8003104 <HAL_RCC_ClockConfig+0x1cc>)
 80030e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030e2:	4b09      	ldr	r3, [pc, #36]	@ (8003108 <HAL_RCC_ClockConfig+0x1d0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fe f966 	bl	80013b8 <HAL_InitTick>

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40022000 	.word	0x40022000
 80030fc:	40021000 	.word	0x40021000
 8003100:	08007900 	.word	0x08007900
 8003104:	20000000 	.word	0x20000000
 8003108:	20000004 	.word	0x20000004

0800310c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800310c:	b480      	push	{r7}
 800310e:	b087      	sub	sp, #28
 8003110:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	2300      	movs	r3, #0
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	2300      	movs	r3, #0
 8003120:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003122:	2300      	movs	r3, #0
 8003124:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003126:	4b1e      	ldr	r3, [pc, #120]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 030c 	and.w	r3, r3, #12
 8003132:	2b04      	cmp	r3, #4
 8003134:	d002      	beq.n	800313c <HAL_RCC_GetSysClockFreq+0x30>
 8003136:	2b08      	cmp	r3, #8
 8003138:	d003      	beq.n	8003142 <HAL_RCC_GetSysClockFreq+0x36>
 800313a:	e027      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800313c:	4b19      	ldr	r3, [pc, #100]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800313e:	613b      	str	r3, [r7, #16]
      break;
 8003140:	e027      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	0c9b      	lsrs	r3, r3, #18
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	4a17      	ldr	r2, [pc, #92]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800314c:	5cd3      	ldrb	r3, [r2, r3]
 800314e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d010      	beq.n	800317c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800315a:	4b11      	ldr	r3, [pc, #68]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	0c5b      	lsrs	r3, r3, #17
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	4a11      	ldr	r2, [pc, #68]	@ (80031ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8003166:	5cd3      	ldrb	r3, [r2, r3]
 8003168:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a0d      	ldr	r2, [pc, #52]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800316e:	fb03 f202 	mul.w	r2, r3, r2
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	fbb2 f3f3 	udiv	r3, r2, r3
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	e004      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a0c      	ldr	r2, [pc, #48]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003180:	fb02 f303 	mul.w	r3, r2, r3
 8003184:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	613b      	str	r3, [r7, #16]
      break;
 800318a:	e002      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800318c:	4b05      	ldr	r3, [pc, #20]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800318e:	613b      	str	r3, [r7, #16]
      break;
 8003190:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003192:	693b      	ldr	r3, [r7, #16]
}
 8003194:	4618      	mov	r0, r3
 8003196:	371c      	adds	r7, #28
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40021000 	.word	0x40021000
 80031a4:	007a1200 	.word	0x007a1200
 80031a8:	08007918 	.word	0x08007918
 80031ac:	08007928 	.word	0x08007928
 80031b0:	003d0900 	.word	0x003d0900

080031b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031b8:	4b02      	ldr	r3, [pc, #8]	@ (80031c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80031ba:	681b      	ldr	r3, [r3, #0]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr
 80031c4:	20000000 	.word	0x20000000

080031c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031cc:	f7ff fff2 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 80031d0:	4602      	mov	r2, r0
 80031d2:	4b05      	ldr	r3, [pc, #20]	@ (80031e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	0a1b      	lsrs	r3, r3, #8
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	4903      	ldr	r1, [pc, #12]	@ (80031ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80031de:	5ccb      	ldrb	r3, [r1, r3]
 80031e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40021000 	.word	0x40021000
 80031ec:	08007910 	.word	0x08007910

080031f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003224 <RCC_Delay+0x34>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003228 <RCC_Delay+0x38>)
 80031fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003202:	0a5b      	lsrs	r3, r3, #9
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	fb02 f303 	mul.w	r3, r2, r3
 800320a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800320c:	bf00      	nop
  }
  while (Delay --);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	1e5a      	subs	r2, r3, #1
 8003212:	60fa      	str	r2, [r7, #12]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1f9      	bne.n	800320c <RCC_Delay+0x1c>
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr
 8003224:	20000000 	.word	0x20000000
 8003228:	10624dd3 	.word	0x10624dd3

0800322c <__cvt>:
 800322c:	2b00      	cmp	r3, #0
 800322e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003232:	461d      	mov	r5, r3
 8003234:	bfbb      	ittet	lt
 8003236:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800323a:	461d      	movlt	r5, r3
 800323c:	2300      	movge	r3, #0
 800323e:	232d      	movlt	r3, #45	@ 0x2d
 8003240:	b088      	sub	sp, #32
 8003242:	4614      	mov	r4, r2
 8003244:	bfb8      	it	lt
 8003246:	4614      	movlt	r4, r2
 8003248:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800324a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800324c:	7013      	strb	r3, [r2, #0]
 800324e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003250:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003254:	f023 0820 	bic.w	r8, r3, #32
 8003258:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800325c:	d005      	beq.n	800326a <__cvt+0x3e>
 800325e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003262:	d100      	bne.n	8003266 <__cvt+0x3a>
 8003264:	3601      	adds	r6, #1
 8003266:	2302      	movs	r3, #2
 8003268:	e000      	b.n	800326c <__cvt+0x40>
 800326a:	2303      	movs	r3, #3
 800326c:	aa07      	add	r2, sp, #28
 800326e:	9204      	str	r2, [sp, #16]
 8003270:	aa06      	add	r2, sp, #24
 8003272:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003276:	e9cd 3600 	strd	r3, r6, [sp]
 800327a:	4622      	mov	r2, r4
 800327c:	462b      	mov	r3, r5
 800327e:	f001 f883 	bl	8004388 <_dtoa_r>
 8003282:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003286:	4607      	mov	r7, r0
 8003288:	d119      	bne.n	80032be <__cvt+0x92>
 800328a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800328c:	07db      	lsls	r3, r3, #31
 800328e:	d50e      	bpl.n	80032ae <__cvt+0x82>
 8003290:	eb00 0906 	add.w	r9, r0, r6
 8003294:	2200      	movs	r2, #0
 8003296:	2300      	movs	r3, #0
 8003298:	4620      	mov	r0, r4
 800329a:	4629      	mov	r1, r5
 800329c:	f7fd fb84 	bl	80009a8 <__aeabi_dcmpeq>
 80032a0:	b108      	cbz	r0, 80032a6 <__cvt+0x7a>
 80032a2:	f8cd 901c 	str.w	r9, [sp, #28]
 80032a6:	2230      	movs	r2, #48	@ 0x30
 80032a8:	9b07      	ldr	r3, [sp, #28]
 80032aa:	454b      	cmp	r3, r9
 80032ac:	d31e      	bcc.n	80032ec <__cvt+0xc0>
 80032ae:	4638      	mov	r0, r7
 80032b0:	9b07      	ldr	r3, [sp, #28]
 80032b2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80032b4:	1bdb      	subs	r3, r3, r7
 80032b6:	6013      	str	r3, [r2, #0]
 80032b8:	b008      	add	sp, #32
 80032ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032be:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80032c2:	eb00 0906 	add.w	r9, r0, r6
 80032c6:	d1e5      	bne.n	8003294 <__cvt+0x68>
 80032c8:	7803      	ldrb	r3, [r0, #0]
 80032ca:	2b30      	cmp	r3, #48	@ 0x30
 80032cc:	d10a      	bne.n	80032e4 <__cvt+0xb8>
 80032ce:	2200      	movs	r2, #0
 80032d0:	2300      	movs	r3, #0
 80032d2:	4620      	mov	r0, r4
 80032d4:	4629      	mov	r1, r5
 80032d6:	f7fd fb67 	bl	80009a8 <__aeabi_dcmpeq>
 80032da:	b918      	cbnz	r0, 80032e4 <__cvt+0xb8>
 80032dc:	f1c6 0601 	rsb	r6, r6, #1
 80032e0:	f8ca 6000 	str.w	r6, [sl]
 80032e4:	f8da 3000 	ldr.w	r3, [sl]
 80032e8:	4499      	add	r9, r3
 80032ea:	e7d3      	b.n	8003294 <__cvt+0x68>
 80032ec:	1c59      	adds	r1, r3, #1
 80032ee:	9107      	str	r1, [sp, #28]
 80032f0:	701a      	strb	r2, [r3, #0]
 80032f2:	e7d9      	b.n	80032a8 <__cvt+0x7c>

080032f4 <__exponent>:
 80032f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032f6:	2900      	cmp	r1, #0
 80032f8:	bfb6      	itet	lt
 80032fa:	232d      	movlt	r3, #45	@ 0x2d
 80032fc:	232b      	movge	r3, #43	@ 0x2b
 80032fe:	4249      	neglt	r1, r1
 8003300:	2909      	cmp	r1, #9
 8003302:	7002      	strb	r2, [r0, #0]
 8003304:	7043      	strb	r3, [r0, #1]
 8003306:	dd29      	ble.n	800335c <__exponent+0x68>
 8003308:	f10d 0307 	add.w	r3, sp, #7
 800330c:	461d      	mov	r5, r3
 800330e:	270a      	movs	r7, #10
 8003310:	fbb1 f6f7 	udiv	r6, r1, r7
 8003314:	461a      	mov	r2, r3
 8003316:	fb07 1416 	mls	r4, r7, r6, r1
 800331a:	3430      	adds	r4, #48	@ 0x30
 800331c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003320:	460c      	mov	r4, r1
 8003322:	2c63      	cmp	r4, #99	@ 0x63
 8003324:	4631      	mov	r1, r6
 8003326:	f103 33ff 	add.w	r3, r3, #4294967295
 800332a:	dcf1      	bgt.n	8003310 <__exponent+0x1c>
 800332c:	3130      	adds	r1, #48	@ 0x30
 800332e:	1e94      	subs	r4, r2, #2
 8003330:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003334:	4623      	mov	r3, r4
 8003336:	1c41      	adds	r1, r0, #1
 8003338:	42ab      	cmp	r3, r5
 800333a:	d30a      	bcc.n	8003352 <__exponent+0x5e>
 800333c:	f10d 0309 	add.w	r3, sp, #9
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	42ac      	cmp	r4, r5
 8003344:	bf88      	it	hi
 8003346:	2300      	movhi	r3, #0
 8003348:	3302      	adds	r3, #2
 800334a:	4403      	add	r3, r0
 800334c:	1a18      	subs	r0, r3, r0
 800334e:	b003      	add	sp, #12
 8003350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003352:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003356:	f801 6f01 	strb.w	r6, [r1, #1]!
 800335a:	e7ed      	b.n	8003338 <__exponent+0x44>
 800335c:	2330      	movs	r3, #48	@ 0x30
 800335e:	3130      	adds	r1, #48	@ 0x30
 8003360:	7083      	strb	r3, [r0, #2]
 8003362:	70c1      	strb	r1, [r0, #3]
 8003364:	1d03      	adds	r3, r0, #4
 8003366:	e7f1      	b.n	800334c <__exponent+0x58>

08003368 <_printf_float>:
 8003368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800336c:	b091      	sub	sp, #68	@ 0x44
 800336e:	460c      	mov	r4, r1
 8003370:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003374:	4616      	mov	r6, r2
 8003376:	461f      	mov	r7, r3
 8003378:	4605      	mov	r5, r0
 800337a:	f000 fef1 	bl	8004160 <_localeconv_r>
 800337e:	6803      	ldr	r3, [r0, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	9308      	str	r3, [sp, #32]
 8003384:	f7fc fee4 	bl	8000150 <strlen>
 8003388:	2300      	movs	r3, #0
 800338a:	930e      	str	r3, [sp, #56]	@ 0x38
 800338c:	f8d8 3000 	ldr.w	r3, [r8]
 8003390:	9009      	str	r0, [sp, #36]	@ 0x24
 8003392:	3307      	adds	r3, #7
 8003394:	f023 0307 	bic.w	r3, r3, #7
 8003398:	f103 0208 	add.w	r2, r3, #8
 800339c:	f894 a018 	ldrb.w	sl, [r4, #24]
 80033a0:	f8d4 b000 	ldr.w	fp, [r4]
 80033a4:	f8c8 2000 	str.w	r2, [r8]
 80033a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80033ac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80033b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80033b2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80033b6:	f04f 32ff 	mov.w	r2, #4294967295
 80033ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80033be:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80033c2:	4b9c      	ldr	r3, [pc, #624]	@ (8003634 <_printf_float+0x2cc>)
 80033c4:	f7fd fb22 	bl	8000a0c <__aeabi_dcmpun>
 80033c8:	bb70      	cbnz	r0, 8003428 <_printf_float+0xc0>
 80033ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80033ce:	f04f 32ff 	mov.w	r2, #4294967295
 80033d2:	4b98      	ldr	r3, [pc, #608]	@ (8003634 <_printf_float+0x2cc>)
 80033d4:	f7fd fafc 	bl	80009d0 <__aeabi_dcmple>
 80033d8:	bb30      	cbnz	r0, 8003428 <_printf_float+0xc0>
 80033da:	2200      	movs	r2, #0
 80033dc:	2300      	movs	r3, #0
 80033de:	4640      	mov	r0, r8
 80033e0:	4649      	mov	r1, r9
 80033e2:	f7fd faeb 	bl	80009bc <__aeabi_dcmplt>
 80033e6:	b110      	cbz	r0, 80033ee <_printf_float+0x86>
 80033e8:	232d      	movs	r3, #45	@ 0x2d
 80033ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80033ee:	4a92      	ldr	r2, [pc, #584]	@ (8003638 <_printf_float+0x2d0>)
 80033f0:	4b92      	ldr	r3, [pc, #584]	@ (800363c <_printf_float+0x2d4>)
 80033f2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80033f6:	bf94      	ite	ls
 80033f8:	4690      	movls	r8, r2
 80033fa:	4698      	movhi	r8, r3
 80033fc:	2303      	movs	r3, #3
 80033fe:	f04f 0900 	mov.w	r9, #0
 8003402:	6123      	str	r3, [r4, #16]
 8003404:	f02b 0304 	bic.w	r3, fp, #4
 8003408:	6023      	str	r3, [r4, #0]
 800340a:	4633      	mov	r3, r6
 800340c:	4621      	mov	r1, r4
 800340e:	4628      	mov	r0, r5
 8003410:	9700      	str	r7, [sp, #0]
 8003412:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003414:	f000 f9d4 	bl	80037c0 <_printf_common>
 8003418:	3001      	adds	r0, #1
 800341a:	f040 8090 	bne.w	800353e <_printf_float+0x1d6>
 800341e:	f04f 30ff 	mov.w	r0, #4294967295
 8003422:	b011      	add	sp, #68	@ 0x44
 8003424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003428:	4642      	mov	r2, r8
 800342a:	464b      	mov	r3, r9
 800342c:	4640      	mov	r0, r8
 800342e:	4649      	mov	r1, r9
 8003430:	f7fd faec 	bl	8000a0c <__aeabi_dcmpun>
 8003434:	b148      	cbz	r0, 800344a <_printf_float+0xe2>
 8003436:	464b      	mov	r3, r9
 8003438:	2b00      	cmp	r3, #0
 800343a:	bfb8      	it	lt
 800343c:	232d      	movlt	r3, #45	@ 0x2d
 800343e:	4a80      	ldr	r2, [pc, #512]	@ (8003640 <_printf_float+0x2d8>)
 8003440:	bfb8      	it	lt
 8003442:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003446:	4b7f      	ldr	r3, [pc, #508]	@ (8003644 <_printf_float+0x2dc>)
 8003448:	e7d3      	b.n	80033f2 <_printf_float+0x8a>
 800344a:	6863      	ldr	r3, [r4, #4]
 800344c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	d13f      	bne.n	80034d4 <_printf_float+0x16c>
 8003454:	2306      	movs	r3, #6
 8003456:	6063      	str	r3, [r4, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800345e:	6023      	str	r3, [r4, #0]
 8003460:	9206      	str	r2, [sp, #24]
 8003462:	aa0e      	add	r2, sp, #56	@ 0x38
 8003464:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003468:	aa0d      	add	r2, sp, #52	@ 0x34
 800346a:	9203      	str	r2, [sp, #12]
 800346c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003470:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003474:	6863      	ldr	r3, [r4, #4]
 8003476:	4642      	mov	r2, r8
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	4628      	mov	r0, r5
 800347c:	464b      	mov	r3, r9
 800347e:	910a      	str	r1, [sp, #40]	@ 0x28
 8003480:	f7ff fed4 	bl	800322c <__cvt>
 8003484:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003486:	4680      	mov	r8, r0
 8003488:	2947      	cmp	r1, #71	@ 0x47
 800348a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800348c:	d128      	bne.n	80034e0 <_printf_float+0x178>
 800348e:	1cc8      	adds	r0, r1, #3
 8003490:	db02      	blt.n	8003498 <_printf_float+0x130>
 8003492:	6863      	ldr	r3, [r4, #4]
 8003494:	4299      	cmp	r1, r3
 8003496:	dd40      	ble.n	800351a <_printf_float+0x1b2>
 8003498:	f1aa 0a02 	sub.w	sl, sl, #2
 800349c:	fa5f fa8a 	uxtb.w	sl, sl
 80034a0:	4652      	mov	r2, sl
 80034a2:	3901      	subs	r1, #1
 80034a4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80034a8:	910d      	str	r1, [sp, #52]	@ 0x34
 80034aa:	f7ff ff23 	bl	80032f4 <__exponent>
 80034ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80034b0:	4681      	mov	r9, r0
 80034b2:	1813      	adds	r3, r2, r0
 80034b4:	2a01      	cmp	r2, #1
 80034b6:	6123      	str	r3, [r4, #16]
 80034b8:	dc02      	bgt.n	80034c0 <_printf_float+0x158>
 80034ba:	6822      	ldr	r2, [r4, #0]
 80034bc:	07d2      	lsls	r2, r2, #31
 80034be:	d501      	bpl.n	80034c4 <_printf_float+0x15c>
 80034c0:	3301      	adds	r3, #1
 80034c2:	6123      	str	r3, [r4, #16]
 80034c4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d09e      	beq.n	800340a <_printf_float+0xa2>
 80034cc:	232d      	movs	r3, #45	@ 0x2d
 80034ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034d2:	e79a      	b.n	800340a <_printf_float+0xa2>
 80034d4:	2947      	cmp	r1, #71	@ 0x47
 80034d6:	d1bf      	bne.n	8003458 <_printf_float+0xf0>
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1bd      	bne.n	8003458 <_printf_float+0xf0>
 80034dc:	2301      	movs	r3, #1
 80034de:	e7ba      	b.n	8003456 <_printf_float+0xee>
 80034e0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80034e4:	d9dc      	bls.n	80034a0 <_printf_float+0x138>
 80034e6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80034ea:	d118      	bne.n	800351e <_printf_float+0x1b6>
 80034ec:	2900      	cmp	r1, #0
 80034ee:	6863      	ldr	r3, [r4, #4]
 80034f0:	dd0b      	ble.n	800350a <_printf_float+0x1a2>
 80034f2:	6121      	str	r1, [r4, #16]
 80034f4:	b913      	cbnz	r3, 80034fc <_printf_float+0x194>
 80034f6:	6822      	ldr	r2, [r4, #0]
 80034f8:	07d0      	lsls	r0, r2, #31
 80034fa:	d502      	bpl.n	8003502 <_printf_float+0x19a>
 80034fc:	3301      	adds	r3, #1
 80034fe:	440b      	add	r3, r1
 8003500:	6123      	str	r3, [r4, #16]
 8003502:	f04f 0900 	mov.w	r9, #0
 8003506:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003508:	e7dc      	b.n	80034c4 <_printf_float+0x15c>
 800350a:	b913      	cbnz	r3, 8003512 <_printf_float+0x1aa>
 800350c:	6822      	ldr	r2, [r4, #0]
 800350e:	07d2      	lsls	r2, r2, #31
 8003510:	d501      	bpl.n	8003516 <_printf_float+0x1ae>
 8003512:	3302      	adds	r3, #2
 8003514:	e7f4      	b.n	8003500 <_printf_float+0x198>
 8003516:	2301      	movs	r3, #1
 8003518:	e7f2      	b.n	8003500 <_printf_float+0x198>
 800351a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800351e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003520:	4299      	cmp	r1, r3
 8003522:	db05      	blt.n	8003530 <_printf_float+0x1c8>
 8003524:	6823      	ldr	r3, [r4, #0]
 8003526:	6121      	str	r1, [r4, #16]
 8003528:	07d8      	lsls	r0, r3, #31
 800352a:	d5ea      	bpl.n	8003502 <_printf_float+0x19a>
 800352c:	1c4b      	adds	r3, r1, #1
 800352e:	e7e7      	b.n	8003500 <_printf_float+0x198>
 8003530:	2900      	cmp	r1, #0
 8003532:	bfcc      	ite	gt
 8003534:	2201      	movgt	r2, #1
 8003536:	f1c1 0202 	rsble	r2, r1, #2
 800353a:	4413      	add	r3, r2
 800353c:	e7e0      	b.n	8003500 <_printf_float+0x198>
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	055a      	lsls	r2, r3, #21
 8003542:	d407      	bmi.n	8003554 <_printf_float+0x1ec>
 8003544:	6923      	ldr	r3, [r4, #16]
 8003546:	4642      	mov	r2, r8
 8003548:	4631      	mov	r1, r6
 800354a:	4628      	mov	r0, r5
 800354c:	47b8      	blx	r7
 800354e:	3001      	adds	r0, #1
 8003550:	d12b      	bne.n	80035aa <_printf_float+0x242>
 8003552:	e764      	b.n	800341e <_printf_float+0xb6>
 8003554:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003558:	f240 80dc 	bls.w	8003714 <_printf_float+0x3ac>
 800355c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003560:	2200      	movs	r2, #0
 8003562:	2300      	movs	r3, #0
 8003564:	f7fd fa20 	bl	80009a8 <__aeabi_dcmpeq>
 8003568:	2800      	cmp	r0, #0
 800356a:	d033      	beq.n	80035d4 <_printf_float+0x26c>
 800356c:	2301      	movs	r3, #1
 800356e:	4631      	mov	r1, r6
 8003570:	4628      	mov	r0, r5
 8003572:	4a35      	ldr	r2, [pc, #212]	@ (8003648 <_printf_float+0x2e0>)
 8003574:	47b8      	blx	r7
 8003576:	3001      	adds	r0, #1
 8003578:	f43f af51 	beq.w	800341e <_printf_float+0xb6>
 800357c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003580:	4543      	cmp	r3, r8
 8003582:	db02      	blt.n	800358a <_printf_float+0x222>
 8003584:	6823      	ldr	r3, [r4, #0]
 8003586:	07d8      	lsls	r0, r3, #31
 8003588:	d50f      	bpl.n	80035aa <_printf_float+0x242>
 800358a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800358e:	4631      	mov	r1, r6
 8003590:	4628      	mov	r0, r5
 8003592:	47b8      	blx	r7
 8003594:	3001      	adds	r0, #1
 8003596:	f43f af42 	beq.w	800341e <_printf_float+0xb6>
 800359a:	f04f 0900 	mov.w	r9, #0
 800359e:	f108 38ff 	add.w	r8, r8, #4294967295
 80035a2:	f104 0a1a 	add.w	sl, r4, #26
 80035a6:	45c8      	cmp	r8, r9
 80035a8:	dc09      	bgt.n	80035be <_printf_float+0x256>
 80035aa:	6823      	ldr	r3, [r4, #0]
 80035ac:	079b      	lsls	r3, r3, #30
 80035ae:	f100 8102 	bmi.w	80037b6 <_printf_float+0x44e>
 80035b2:	68e0      	ldr	r0, [r4, #12]
 80035b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80035b6:	4298      	cmp	r0, r3
 80035b8:	bfb8      	it	lt
 80035ba:	4618      	movlt	r0, r3
 80035bc:	e731      	b.n	8003422 <_printf_float+0xba>
 80035be:	2301      	movs	r3, #1
 80035c0:	4652      	mov	r2, sl
 80035c2:	4631      	mov	r1, r6
 80035c4:	4628      	mov	r0, r5
 80035c6:	47b8      	blx	r7
 80035c8:	3001      	adds	r0, #1
 80035ca:	f43f af28 	beq.w	800341e <_printf_float+0xb6>
 80035ce:	f109 0901 	add.w	r9, r9, #1
 80035d2:	e7e8      	b.n	80035a6 <_printf_float+0x23e>
 80035d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	dc38      	bgt.n	800364c <_printf_float+0x2e4>
 80035da:	2301      	movs	r3, #1
 80035dc:	4631      	mov	r1, r6
 80035de:	4628      	mov	r0, r5
 80035e0:	4a19      	ldr	r2, [pc, #100]	@ (8003648 <_printf_float+0x2e0>)
 80035e2:	47b8      	blx	r7
 80035e4:	3001      	adds	r0, #1
 80035e6:	f43f af1a 	beq.w	800341e <_printf_float+0xb6>
 80035ea:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80035ee:	ea59 0303 	orrs.w	r3, r9, r3
 80035f2:	d102      	bne.n	80035fa <_printf_float+0x292>
 80035f4:	6823      	ldr	r3, [r4, #0]
 80035f6:	07d9      	lsls	r1, r3, #31
 80035f8:	d5d7      	bpl.n	80035aa <_printf_float+0x242>
 80035fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80035fe:	4631      	mov	r1, r6
 8003600:	4628      	mov	r0, r5
 8003602:	47b8      	blx	r7
 8003604:	3001      	adds	r0, #1
 8003606:	f43f af0a 	beq.w	800341e <_printf_float+0xb6>
 800360a:	f04f 0a00 	mov.w	sl, #0
 800360e:	f104 0b1a 	add.w	fp, r4, #26
 8003612:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003614:	425b      	negs	r3, r3
 8003616:	4553      	cmp	r3, sl
 8003618:	dc01      	bgt.n	800361e <_printf_float+0x2b6>
 800361a:	464b      	mov	r3, r9
 800361c:	e793      	b.n	8003546 <_printf_float+0x1de>
 800361e:	2301      	movs	r3, #1
 8003620:	465a      	mov	r2, fp
 8003622:	4631      	mov	r1, r6
 8003624:	4628      	mov	r0, r5
 8003626:	47b8      	blx	r7
 8003628:	3001      	adds	r0, #1
 800362a:	f43f aef8 	beq.w	800341e <_printf_float+0xb6>
 800362e:	f10a 0a01 	add.w	sl, sl, #1
 8003632:	e7ee      	b.n	8003612 <_printf_float+0x2aa>
 8003634:	7fefffff 	.word	0x7fefffff
 8003638:	0800792a 	.word	0x0800792a
 800363c:	0800792e 	.word	0x0800792e
 8003640:	08007932 	.word	0x08007932
 8003644:	08007936 	.word	0x08007936
 8003648:	0800793a 	.word	0x0800793a
 800364c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800364e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003652:	4553      	cmp	r3, sl
 8003654:	bfa8      	it	ge
 8003656:	4653      	movge	r3, sl
 8003658:	2b00      	cmp	r3, #0
 800365a:	4699      	mov	r9, r3
 800365c:	dc36      	bgt.n	80036cc <_printf_float+0x364>
 800365e:	f04f 0b00 	mov.w	fp, #0
 8003662:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003666:	f104 021a 	add.w	r2, r4, #26
 800366a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800366c:	930a      	str	r3, [sp, #40]	@ 0x28
 800366e:	eba3 0309 	sub.w	r3, r3, r9
 8003672:	455b      	cmp	r3, fp
 8003674:	dc31      	bgt.n	80036da <_printf_float+0x372>
 8003676:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003678:	459a      	cmp	sl, r3
 800367a:	dc3a      	bgt.n	80036f2 <_printf_float+0x38a>
 800367c:	6823      	ldr	r3, [r4, #0]
 800367e:	07da      	lsls	r2, r3, #31
 8003680:	d437      	bmi.n	80036f2 <_printf_float+0x38a>
 8003682:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003684:	ebaa 0903 	sub.w	r9, sl, r3
 8003688:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800368a:	ebaa 0303 	sub.w	r3, sl, r3
 800368e:	4599      	cmp	r9, r3
 8003690:	bfa8      	it	ge
 8003692:	4699      	movge	r9, r3
 8003694:	f1b9 0f00 	cmp.w	r9, #0
 8003698:	dc33      	bgt.n	8003702 <_printf_float+0x39a>
 800369a:	f04f 0800 	mov.w	r8, #0
 800369e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036a2:	f104 0b1a 	add.w	fp, r4, #26
 80036a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80036a8:	ebaa 0303 	sub.w	r3, sl, r3
 80036ac:	eba3 0309 	sub.w	r3, r3, r9
 80036b0:	4543      	cmp	r3, r8
 80036b2:	f77f af7a 	ble.w	80035aa <_printf_float+0x242>
 80036b6:	2301      	movs	r3, #1
 80036b8:	465a      	mov	r2, fp
 80036ba:	4631      	mov	r1, r6
 80036bc:	4628      	mov	r0, r5
 80036be:	47b8      	blx	r7
 80036c0:	3001      	adds	r0, #1
 80036c2:	f43f aeac 	beq.w	800341e <_printf_float+0xb6>
 80036c6:	f108 0801 	add.w	r8, r8, #1
 80036ca:	e7ec      	b.n	80036a6 <_printf_float+0x33e>
 80036cc:	4642      	mov	r2, r8
 80036ce:	4631      	mov	r1, r6
 80036d0:	4628      	mov	r0, r5
 80036d2:	47b8      	blx	r7
 80036d4:	3001      	adds	r0, #1
 80036d6:	d1c2      	bne.n	800365e <_printf_float+0x2f6>
 80036d8:	e6a1      	b.n	800341e <_printf_float+0xb6>
 80036da:	2301      	movs	r3, #1
 80036dc:	4631      	mov	r1, r6
 80036de:	4628      	mov	r0, r5
 80036e0:	920a      	str	r2, [sp, #40]	@ 0x28
 80036e2:	47b8      	blx	r7
 80036e4:	3001      	adds	r0, #1
 80036e6:	f43f ae9a 	beq.w	800341e <_printf_float+0xb6>
 80036ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80036ec:	f10b 0b01 	add.w	fp, fp, #1
 80036f0:	e7bb      	b.n	800366a <_printf_float+0x302>
 80036f2:	4631      	mov	r1, r6
 80036f4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80036f8:	4628      	mov	r0, r5
 80036fa:	47b8      	blx	r7
 80036fc:	3001      	adds	r0, #1
 80036fe:	d1c0      	bne.n	8003682 <_printf_float+0x31a>
 8003700:	e68d      	b.n	800341e <_printf_float+0xb6>
 8003702:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003704:	464b      	mov	r3, r9
 8003706:	4631      	mov	r1, r6
 8003708:	4628      	mov	r0, r5
 800370a:	4442      	add	r2, r8
 800370c:	47b8      	blx	r7
 800370e:	3001      	adds	r0, #1
 8003710:	d1c3      	bne.n	800369a <_printf_float+0x332>
 8003712:	e684      	b.n	800341e <_printf_float+0xb6>
 8003714:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003718:	f1ba 0f01 	cmp.w	sl, #1
 800371c:	dc01      	bgt.n	8003722 <_printf_float+0x3ba>
 800371e:	07db      	lsls	r3, r3, #31
 8003720:	d536      	bpl.n	8003790 <_printf_float+0x428>
 8003722:	2301      	movs	r3, #1
 8003724:	4642      	mov	r2, r8
 8003726:	4631      	mov	r1, r6
 8003728:	4628      	mov	r0, r5
 800372a:	47b8      	blx	r7
 800372c:	3001      	adds	r0, #1
 800372e:	f43f ae76 	beq.w	800341e <_printf_float+0xb6>
 8003732:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003736:	4631      	mov	r1, r6
 8003738:	4628      	mov	r0, r5
 800373a:	47b8      	blx	r7
 800373c:	3001      	adds	r0, #1
 800373e:	f43f ae6e 	beq.w	800341e <_printf_float+0xb6>
 8003742:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003746:	2200      	movs	r2, #0
 8003748:	2300      	movs	r3, #0
 800374a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800374e:	f7fd f92b 	bl	80009a8 <__aeabi_dcmpeq>
 8003752:	b9c0      	cbnz	r0, 8003786 <_printf_float+0x41e>
 8003754:	4653      	mov	r3, sl
 8003756:	f108 0201 	add.w	r2, r8, #1
 800375a:	4631      	mov	r1, r6
 800375c:	4628      	mov	r0, r5
 800375e:	47b8      	blx	r7
 8003760:	3001      	adds	r0, #1
 8003762:	d10c      	bne.n	800377e <_printf_float+0x416>
 8003764:	e65b      	b.n	800341e <_printf_float+0xb6>
 8003766:	2301      	movs	r3, #1
 8003768:	465a      	mov	r2, fp
 800376a:	4631      	mov	r1, r6
 800376c:	4628      	mov	r0, r5
 800376e:	47b8      	blx	r7
 8003770:	3001      	adds	r0, #1
 8003772:	f43f ae54 	beq.w	800341e <_printf_float+0xb6>
 8003776:	f108 0801 	add.w	r8, r8, #1
 800377a:	45d0      	cmp	r8, sl
 800377c:	dbf3      	blt.n	8003766 <_printf_float+0x3fe>
 800377e:	464b      	mov	r3, r9
 8003780:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003784:	e6e0      	b.n	8003548 <_printf_float+0x1e0>
 8003786:	f04f 0800 	mov.w	r8, #0
 800378a:	f104 0b1a 	add.w	fp, r4, #26
 800378e:	e7f4      	b.n	800377a <_printf_float+0x412>
 8003790:	2301      	movs	r3, #1
 8003792:	4642      	mov	r2, r8
 8003794:	e7e1      	b.n	800375a <_printf_float+0x3f2>
 8003796:	2301      	movs	r3, #1
 8003798:	464a      	mov	r2, r9
 800379a:	4631      	mov	r1, r6
 800379c:	4628      	mov	r0, r5
 800379e:	47b8      	blx	r7
 80037a0:	3001      	adds	r0, #1
 80037a2:	f43f ae3c 	beq.w	800341e <_printf_float+0xb6>
 80037a6:	f108 0801 	add.w	r8, r8, #1
 80037aa:	68e3      	ldr	r3, [r4, #12]
 80037ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80037ae:	1a5b      	subs	r3, r3, r1
 80037b0:	4543      	cmp	r3, r8
 80037b2:	dcf0      	bgt.n	8003796 <_printf_float+0x42e>
 80037b4:	e6fd      	b.n	80035b2 <_printf_float+0x24a>
 80037b6:	f04f 0800 	mov.w	r8, #0
 80037ba:	f104 0919 	add.w	r9, r4, #25
 80037be:	e7f4      	b.n	80037aa <_printf_float+0x442>

080037c0 <_printf_common>:
 80037c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037c4:	4616      	mov	r6, r2
 80037c6:	4698      	mov	r8, r3
 80037c8:	688a      	ldr	r2, [r1, #8]
 80037ca:	690b      	ldr	r3, [r1, #16]
 80037cc:	4607      	mov	r7, r0
 80037ce:	4293      	cmp	r3, r2
 80037d0:	bfb8      	it	lt
 80037d2:	4613      	movlt	r3, r2
 80037d4:	6033      	str	r3, [r6, #0]
 80037d6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80037da:	460c      	mov	r4, r1
 80037dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80037e0:	b10a      	cbz	r2, 80037e6 <_printf_common+0x26>
 80037e2:	3301      	adds	r3, #1
 80037e4:	6033      	str	r3, [r6, #0]
 80037e6:	6823      	ldr	r3, [r4, #0]
 80037e8:	0699      	lsls	r1, r3, #26
 80037ea:	bf42      	ittt	mi
 80037ec:	6833      	ldrmi	r3, [r6, #0]
 80037ee:	3302      	addmi	r3, #2
 80037f0:	6033      	strmi	r3, [r6, #0]
 80037f2:	6825      	ldr	r5, [r4, #0]
 80037f4:	f015 0506 	ands.w	r5, r5, #6
 80037f8:	d106      	bne.n	8003808 <_printf_common+0x48>
 80037fa:	f104 0a19 	add.w	sl, r4, #25
 80037fe:	68e3      	ldr	r3, [r4, #12]
 8003800:	6832      	ldr	r2, [r6, #0]
 8003802:	1a9b      	subs	r3, r3, r2
 8003804:	42ab      	cmp	r3, r5
 8003806:	dc2b      	bgt.n	8003860 <_printf_common+0xa0>
 8003808:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800380c:	6822      	ldr	r2, [r4, #0]
 800380e:	3b00      	subs	r3, #0
 8003810:	bf18      	it	ne
 8003812:	2301      	movne	r3, #1
 8003814:	0692      	lsls	r2, r2, #26
 8003816:	d430      	bmi.n	800387a <_printf_common+0xba>
 8003818:	4641      	mov	r1, r8
 800381a:	4638      	mov	r0, r7
 800381c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003820:	47c8      	blx	r9
 8003822:	3001      	adds	r0, #1
 8003824:	d023      	beq.n	800386e <_printf_common+0xae>
 8003826:	6823      	ldr	r3, [r4, #0]
 8003828:	6922      	ldr	r2, [r4, #16]
 800382a:	f003 0306 	and.w	r3, r3, #6
 800382e:	2b04      	cmp	r3, #4
 8003830:	bf14      	ite	ne
 8003832:	2500      	movne	r5, #0
 8003834:	6833      	ldreq	r3, [r6, #0]
 8003836:	f04f 0600 	mov.w	r6, #0
 800383a:	bf08      	it	eq
 800383c:	68e5      	ldreq	r5, [r4, #12]
 800383e:	f104 041a 	add.w	r4, r4, #26
 8003842:	bf08      	it	eq
 8003844:	1aed      	subeq	r5, r5, r3
 8003846:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800384a:	bf08      	it	eq
 800384c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003850:	4293      	cmp	r3, r2
 8003852:	bfc4      	itt	gt
 8003854:	1a9b      	subgt	r3, r3, r2
 8003856:	18ed      	addgt	r5, r5, r3
 8003858:	42b5      	cmp	r5, r6
 800385a:	d11a      	bne.n	8003892 <_printf_common+0xd2>
 800385c:	2000      	movs	r0, #0
 800385e:	e008      	b.n	8003872 <_printf_common+0xb2>
 8003860:	2301      	movs	r3, #1
 8003862:	4652      	mov	r2, sl
 8003864:	4641      	mov	r1, r8
 8003866:	4638      	mov	r0, r7
 8003868:	47c8      	blx	r9
 800386a:	3001      	adds	r0, #1
 800386c:	d103      	bne.n	8003876 <_printf_common+0xb6>
 800386e:	f04f 30ff 	mov.w	r0, #4294967295
 8003872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003876:	3501      	adds	r5, #1
 8003878:	e7c1      	b.n	80037fe <_printf_common+0x3e>
 800387a:	2030      	movs	r0, #48	@ 0x30
 800387c:	18e1      	adds	r1, r4, r3
 800387e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003888:	4422      	add	r2, r4
 800388a:	3302      	adds	r3, #2
 800388c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003890:	e7c2      	b.n	8003818 <_printf_common+0x58>
 8003892:	2301      	movs	r3, #1
 8003894:	4622      	mov	r2, r4
 8003896:	4641      	mov	r1, r8
 8003898:	4638      	mov	r0, r7
 800389a:	47c8      	blx	r9
 800389c:	3001      	adds	r0, #1
 800389e:	d0e6      	beq.n	800386e <_printf_common+0xae>
 80038a0:	3601      	adds	r6, #1
 80038a2:	e7d9      	b.n	8003858 <_printf_common+0x98>

080038a4 <_printf_i>:
 80038a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038a8:	7e0f      	ldrb	r7, [r1, #24]
 80038aa:	4691      	mov	r9, r2
 80038ac:	2f78      	cmp	r7, #120	@ 0x78
 80038ae:	4680      	mov	r8, r0
 80038b0:	460c      	mov	r4, r1
 80038b2:	469a      	mov	sl, r3
 80038b4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80038b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80038ba:	d807      	bhi.n	80038cc <_printf_i+0x28>
 80038bc:	2f62      	cmp	r7, #98	@ 0x62
 80038be:	d80a      	bhi.n	80038d6 <_printf_i+0x32>
 80038c0:	2f00      	cmp	r7, #0
 80038c2:	f000 80d3 	beq.w	8003a6c <_printf_i+0x1c8>
 80038c6:	2f58      	cmp	r7, #88	@ 0x58
 80038c8:	f000 80ba 	beq.w	8003a40 <_printf_i+0x19c>
 80038cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80038d4:	e03a      	b.n	800394c <_printf_i+0xa8>
 80038d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80038da:	2b15      	cmp	r3, #21
 80038dc:	d8f6      	bhi.n	80038cc <_printf_i+0x28>
 80038de:	a101      	add	r1, pc, #4	@ (adr r1, 80038e4 <_printf_i+0x40>)
 80038e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038e4:	0800393d 	.word	0x0800393d
 80038e8:	08003951 	.word	0x08003951
 80038ec:	080038cd 	.word	0x080038cd
 80038f0:	080038cd 	.word	0x080038cd
 80038f4:	080038cd 	.word	0x080038cd
 80038f8:	080038cd 	.word	0x080038cd
 80038fc:	08003951 	.word	0x08003951
 8003900:	080038cd 	.word	0x080038cd
 8003904:	080038cd 	.word	0x080038cd
 8003908:	080038cd 	.word	0x080038cd
 800390c:	080038cd 	.word	0x080038cd
 8003910:	08003a53 	.word	0x08003a53
 8003914:	0800397b 	.word	0x0800397b
 8003918:	08003a0d 	.word	0x08003a0d
 800391c:	080038cd 	.word	0x080038cd
 8003920:	080038cd 	.word	0x080038cd
 8003924:	08003a75 	.word	0x08003a75
 8003928:	080038cd 	.word	0x080038cd
 800392c:	0800397b 	.word	0x0800397b
 8003930:	080038cd 	.word	0x080038cd
 8003934:	080038cd 	.word	0x080038cd
 8003938:	08003a15 	.word	0x08003a15
 800393c:	6833      	ldr	r3, [r6, #0]
 800393e:	1d1a      	adds	r2, r3, #4
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6032      	str	r2, [r6, #0]
 8003944:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003948:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800394c:	2301      	movs	r3, #1
 800394e:	e09e      	b.n	8003a8e <_printf_i+0x1ea>
 8003950:	6833      	ldr	r3, [r6, #0]
 8003952:	6820      	ldr	r0, [r4, #0]
 8003954:	1d19      	adds	r1, r3, #4
 8003956:	6031      	str	r1, [r6, #0]
 8003958:	0606      	lsls	r6, r0, #24
 800395a:	d501      	bpl.n	8003960 <_printf_i+0xbc>
 800395c:	681d      	ldr	r5, [r3, #0]
 800395e:	e003      	b.n	8003968 <_printf_i+0xc4>
 8003960:	0645      	lsls	r5, r0, #25
 8003962:	d5fb      	bpl.n	800395c <_printf_i+0xb8>
 8003964:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003968:	2d00      	cmp	r5, #0
 800396a:	da03      	bge.n	8003974 <_printf_i+0xd0>
 800396c:	232d      	movs	r3, #45	@ 0x2d
 800396e:	426d      	negs	r5, r5
 8003970:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003974:	230a      	movs	r3, #10
 8003976:	4859      	ldr	r0, [pc, #356]	@ (8003adc <_printf_i+0x238>)
 8003978:	e011      	b.n	800399e <_printf_i+0xfa>
 800397a:	6821      	ldr	r1, [r4, #0]
 800397c:	6833      	ldr	r3, [r6, #0]
 800397e:	0608      	lsls	r0, r1, #24
 8003980:	f853 5b04 	ldr.w	r5, [r3], #4
 8003984:	d402      	bmi.n	800398c <_printf_i+0xe8>
 8003986:	0649      	lsls	r1, r1, #25
 8003988:	bf48      	it	mi
 800398a:	b2ad      	uxthmi	r5, r5
 800398c:	2f6f      	cmp	r7, #111	@ 0x6f
 800398e:	6033      	str	r3, [r6, #0]
 8003990:	bf14      	ite	ne
 8003992:	230a      	movne	r3, #10
 8003994:	2308      	moveq	r3, #8
 8003996:	4851      	ldr	r0, [pc, #324]	@ (8003adc <_printf_i+0x238>)
 8003998:	2100      	movs	r1, #0
 800399a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800399e:	6866      	ldr	r6, [r4, #4]
 80039a0:	2e00      	cmp	r6, #0
 80039a2:	bfa8      	it	ge
 80039a4:	6821      	ldrge	r1, [r4, #0]
 80039a6:	60a6      	str	r6, [r4, #8]
 80039a8:	bfa4      	itt	ge
 80039aa:	f021 0104 	bicge.w	r1, r1, #4
 80039ae:	6021      	strge	r1, [r4, #0]
 80039b0:	b90d      	cbnz	r5, 80039b6 <_printf_i+0x112>
 80039b2:	2e00      	cmp	r6, #0
 80039b4:	d04b      	beq.n	8003a4e <_printf_i+0x1aa>
 80039b6:	4616      	mov	r6, r2
 80039b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80039bc:	fb03 5711 	mls	r7, r3, r1, r5
 80039c0:	5dc7      	ldrb	r7, [r0, r7]
 80039c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80039c6:	462f      	mov	r7, r5
 80039c8:	42bb      	cmp	r3, r7
 80039ca:	460d      	mov	r5, r1
 80039cc:	d9f4      	bls.n	80039b8 <_printf_i+0x114>
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d10b      	bne.n	80039ea <_printf_i+0x146>
 80039d2:	6823      	ldr	r3, [r4, #0]
 80039d4:	07df      	lsls	r7, r3, #31
 80039d6:	d508      	bpl.n	80039ea <_printf_i+0x146>
 80039d8:	6923      	ldr	r3, [r4, #16]
 80039da:	6861      	ldr	r1, [r4, #4]
 80039dc:	4299      	cmp	r1, r3
 80039de:	bfde      	ittt	le
 80039e0:	2330      	movle	r3, #48	@ 0x30
 80039e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80039e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80039ea:	1b92      	subs	r2, r2, r6
 80039ec:	6122      	str	r2, [r4, #16]
 80039ee:	464b      	mov	r3, r9
 80039f0:	4621      	mov	r1, r4
 80039f2:	4640      	mov	r0, r8
 80039f4:	f8cd a000 	str.w	sl, [sp]
 80039f8:	aa03      	add	r2, sp, #12
 80039fa:	f7ff fee1 	bl	80037c0 <_printf_common>
 80039fe:	3001      	adds	r0, #1
 8003a00:	d14a      	bne.n	8003a98 <_printf_i+0x1f4>
 8003a02:	f04f 30ff 	mov.w	r0, #4294967295
 8003a06:	b004      	add	sp, #16
 8003a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a0c:	6823      	ldr	r3, [r4, #0]
 8003a0e:	f043 0320 	orr.w	r3, r3, #32
 8003a12:	6023      	str	r3, [r4, #0]
 8003a14:	2778      	movs	r7, #120	@ 0x78
 8003a16:	4832      	ldr	r0, [pc, #200]	@ (8003ae0 <_printf_i+0x23c>)
 8003a18:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a1c:	6823      	ldr	r3, [r4, #0]
 8003a1e:	6831      	ldr	r1, [r6, #0]
 8003a20:	061f      	lsls	r7, r3, #24
 8003a22:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a26:	d402      	bmi.n	8003a2e <_printf_i+0x18a>
 8003a28:	065f      	lsls	r7, r3, #25
 8003a2a:	bf48      	it	mi
 8003a2c:	b2ad      	uxthmi	r5, r5
 8003a2e:	6031      	str	r1, [r6, #0]
 8003a30:	07d9      	lsls	r1, r3, #31
 8003a32:	bf44      	itt	mi
 8003a34:	f043 0320 	orrmi.w	r3, r3, #32
 8003a38:	6023      	strmi	r3, [r4, #0]
 8003a3a:	b11d      	cbz	r5, 8003a44 <_printf_i+0x1a0>
 8003a3c:	2310      	movs	r3, #16
 8003a3e:	e7ab      	b.n	8003998 <_printf_i+0xf4>
 8003a40:	4826      	ldr	r0, [pc, #152]	@ (8003adc <_printf_i+0x238>)
 8003a42:	e7e9      	b.n	8003a18 <_printf_i+0x174>
 8003a44:	6823      	ldr	r3, [r4, #0]
 8003a46:	f023 0320 	bic.w	r3, r3, #32
 8003a4a:	6023      	str	r3, [r4, #0]
 8003a4c:	e7f6      	b.n	8003a3c <_printf_i+0x198>
 8003a4e:	4616      	mov	r6, r2
 8003a50:	e7bd      	b.n	80039ce <_printf_i+0x12a>
 8003a52:	6833      	ldr	r3, [r6, #0]
 8003a54:	6825      	ldr	r5, [r4, #0]
 8003a56:	1d18      	adds	r0, r3, #4
 8003a58:	6961      	ldr	r1, [r4, #20]
 8003a5a:	6030      	str	r0, [r6, #0]
 8003a5c:	062e      	lsls	r6, r5, #24
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	d501      	bpl.n	8003a66 <_printf_i+0x1c2>
 8003a62:	6019      	str	r1, [r3, #0]
 8003a64:	e002      	b.n	8003a6c <_printf_i+0x1c8>
 8003a66:	0668      	lsls	r0, r5, #25
 8003a68:	d5fb      	bpl.n	8003a62 <_printf_i+0x1be>
 8003a6a:	8019      	strh	r1, [r3, #0]
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	4616      	mov	r6, r2
 8003a70:	6123      	str	r3, [r4, #16]
 8003a72:	e7bc      	b.n	80039ee <_printf_i+0x14a>
 8003a74:	6833      	ldr	r3, [r6, #0]
 8003a76:	2100      	movs	r1, #0
 8003a78:	1d1a      	adds	r2, r3, #4
 8003a7a:	6032      	str	r2, [r6, #0]
 8003a7c:	681e      	ldr	r6, [r3, #0]
 8003a7e:	6862      	ldr	r2, [r4, #4]
 8003a80:	4630      	mov	r0, r6
 8003a82:	f000 fbe4 	bl	800424e <memchr>
 8003a86:	b108      	cbz	r0, 8003a8c <_printf_i+0x1e8>
 8003a88:	1b80      	subs	r0, r0, r6
 8003a8a:	6060      	str	r0, [r4, #4]
 8003a8c:	6863      	ldr	r3, [r4, #4]
 8003a8e:	6123      	str	r3, [r4, #16]
 8003a90:	2300      	movs	r3, #0
 8003a92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a96:	e7aa      	b.n	80039ee <_printf_i+0x14a>
 8003a98:	4632      	mov	r2, r6
 8003a9a:	4649      	mov	r1, r9
 8003a9c:	4640      	mov	r0, r8
 8003a9e:	6923      	ldr	r3, [r4, #16]
 8003aa0:	47d0      	blx	sl
 8003aa2:	3001      	adds	r0, #1
 8003aa4:	d0ad      	beq.n	8003a02 <_printf_i+0x15e>
 8003aa6:	6823      	ldr	r3, [r4, #0]
 8003aa8:	079b      	lsls	r3, r3, #30
 8003aaa:	d413      	bmi.n	8003ad4 <_printf_i+0x230>
 8003aac:	68e0      	ldr	r0, [r4, #12]
 8003aae:	9b03      	ldr	r3, [sp, #12]
 8003ab0:	4298      	cmp	r0, r3
 8003ab2:	bfb8      	it	lt
 8003ab4:	4618      	movlt	r0, r3
 8003ab6:	e7a6      	b.n	8003a06 <_printf_i+0x162>
 8003ab8:	2301      	movs	r3, #1
 8003aba:	4632      	mov	r2, r6
 8003abc:	4649      	mov	r1, r9
 8003abe:	4640      	mov	r0, r8
 8003ac0:	47d0      	blx	sl
 8003ac2:	3001      	adds	r0, #1
 8003ac4:	d09d      	beq.n	8003a02 <_printf_i+0x15e>
 8003ac6:	3501      	adds	r5, #1
 8003ac8:	68e3      	ldr	r3, [r4, #12]
 8003aca:	9903      	ldr	r1, [sp, #12]
 8003acc:	1a5b      	subs	r3, r3, r1
 8003ace:	42ab      	cmp	r3, r5
 8003ad0:	dcf2      	bgt.n	8003ab8 <_printf_i+0x214>
 8003ad2:	e7eb      	b.n	8003aac <_printf_i+0x208>
 8003ad4:	2500      	movs	r5, #0
 8003ad6:	f104 0619 	add.w	r6, r4, #25
 8003ada:	e7f5      	b.n	8003ac8 <_printf_i+0x224>
 8003adc:	0800793c 	.word	0x0800793c
 8003ae0:	0800794d 	.word	0x0800794d

08003ae4 <_scanf_float>:
 8003ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ae8:	b087      	sub	sp, #28
 8003aea:	9303      	str	r3, [sp, #12]
 8003aec:	688b      	ldr	r3, [r1, #8]
 8003aee:	4617      	mov	r7, r2
 8003af0:	1e5a      	subs	r2, r3, #1
 8003af2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003af6:	bf82      	ittt	hi
 8003af8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003afc:	eb03 0b05 	addhi.w	fp, r3, r5
 8003b00:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003b04:	460a      	mov	r2, r1
 8003b06:	f04f 0500 	mov.w	r5, #0
 8003b0a:	bf88      	it	hi
 8003b0c:	608b      	strhi	r3, [r1, #8]
 8003b0e:	680b      	ldr	r3, [r1, #0]
 8003b10:	4680      	mov	r8, r0
 8003b12:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8003b16:	f842 3b1c 	str.w	r3, [r2], #28
 8003b1a:	460c      	mov	r4, r1
 8003b1c:	bf98      	it	ls
 8003b1e:	f04f 0b00 	movls.w	fp, #0
 8003b22:	4616      	mov	r6, r2
 8003b24:	46aa      	mov	sl, r5
 8003b26:	46a9      	mov	r9, r5
 8003b28:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003b2c:	9201      	str	r2, [sp, #4]
 8003b2e:	9502      	str	r5, [sp, #8]
 8003b30:	68a2      	ldr	r2, [r4, #8]
 8003b32:	b152      	cbz	r2, 8003b4a <_scanf_float+0x66>
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b4e      	cmp	r3, #78	@ 0x4e
 8003b3a:	d865      	bhi.n	8003c08 <_scanf_float+0x124>
 8003b3c:	2b40      	cmp	r3, #64	@ 0x40
 8003b3e:	d83d      	bhi.n	8003bbc <_scanf_float+0xd8>
 8003b40:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8003b44:	b2c8      	uxtb	r0, r1
 8003b46:	280e      	cmp	r0, #14
 8003b48:	d93b      	bls.n	8003bc2 <_scanf_float+0xde>
 8003b4a:	f1b9 0f00 	cmp.w	r9, #0
 8003b4e:	d003      	beq.n	8003b58 <_scanf_float+0x74>
 8003b50:	6823      	ldr	r3, [r4, #0]
 8003b52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b56:	6023      	str	r3, [r4, #0]
 8003b58:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003b5c:	f1ba 0f01 	cmp.w	sl, #1
 8003b60:	f200 8118 	bhi.w	8003d94 <_scanf_float+0x2b0>
 8003b64:	9b01      	ldr	r3, [sp, #4]
 8003b66:	429e      	cmp	r6, r3
 8003b68:	f200 8109 	bhi.w	8003d7e <_scanf_float+0x29a>
 8003b6c:	2001      	movs	r0, #1
 8003b6e:	b007      	add	sp, #28
 8003b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b74:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8003b78:	2a0d      	cmp	r2, #13
 8003b7a:	d8e6      	bhi.n	8003b4a <_scanf_float+0x66>
 8003b7c:	a101      	add	r1, pc, #4	@ (adr r1, 8003b84 <_scanf_float+0xa0>)
 8003b7e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003b82:	bf00      	nop
 8003b84:	08003ccb 	.word	0x08003ccb
 8003b88:	08003b4b 	.word	0x08003b4b
 8003b8c:	08003b4b 	.word	0x08003b4b
 8003b90:	08003b4b 	.word	0x08003b4b
 8003b94:	08003d2b 	.word	0x08003d2b
 8003b98:	08003d03 	.word	0x08003d03
 8003b9c:	08003b4b 	.word	0x08003b4b
 8003ba0:	08003b4b 	.word	0x08003b4b
 8003ba4:	08003cd9 	.word	0x08003cd9
 8003ba8:	08003b4b 	.word	0x08003b4b
 8003bac:	08003b4b 	.word	0x08003b4b
 8003bb0:	08003b4b 	.word	0x08003b4b
 8003bb4:	08003b4b 	.word	0x08003b4b
 8003bb8:	08003c91 	.word	0x08003c91
 8003bbc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8003bc0:	e7da      	b.n	8003b78 <_scanf_float+0x94>
 8003bc2:	290e      	cmp	r1, #14
 8003bc4:	d8c1      	bhi.n	8003b4a <_scanf_float+0x66>
 8003bc6:	a001      	add	r0, pc, #4	@ (adr r0, 8003bcc <_scanf_float+0xe8>)
 8003bc8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003bcc:	08003c81 	.word	0x08003c81
 8003bd0:	08003b4b 	.word	0x08003b4b
 8003bd4:	08003c81 	.word	0x08003c81
 8003bd8:	08003d17 	.word	0x08003d17
 8003bdc:	08003b4b 	.word	0x08003b4b
 8003be0:	08003c29 	.word	0x08003c29
 8003be4:	08003c67 	.word	0x08003c67
 8003be8:	08003c67 	.word	0x08003c67
 8003bec:	08003c67 	.word	0x08003c67
 8003bf0:	08003c67 	.word	0x08003c67
 8003bf4:	08003c67 	.word	0x08003c67
 8003bf8:	08003c67 	.word	0x08003c67
 8003bfc:	08003c67 	.word	0x08003c67
 8003c00:	08003c67 	.word	0x08003c67
 8003c04:	08003c67 	.word	0x08003c67
 8003c08:	2b6e      	cmp	r3, #110	@ 0x6e
 8003c0a:	d809      	bhi.n	8003c20 <_scanf_float+0x13c>
 8003c0c:	2b60      	cmp	r3, #96	@ 0x60
 8003c0e:	d8b1      	bhi.n	8003b74 <_scanf_float+0x90>
 8003c10:	2b54      	cmp	r3, #84	@ 0x54
 8003c12:	d07b      	beq.n	8003d0c <_scanf_float+0x228>
 8003c14:	2b59      	cmp	r3, #89	@ 0x59
 8003c16:	d198      	bne.n	8003b4a <_scanf_float+0x66>
 8003c18:	2d07      	cmp	r5, #7
 8003c1a:	d196      	bne.n	8003b4a <_scanf_float+0x66>
 8003c1c:	2508      	movs	r5, #8
 8003c1e:	e02c      	b.n	8003c7a <_scanf_float+0x196>
 8003c20:	2b74      	cmp	r3, #116	@ 0x74
 8003c22:	d073      	beq.n	8003d0c <_scanf_float+0x228>
 8003c24:	2b79      	cmp	r3, #121	@ 0x79
 8003c26:	e7f6      	b.n	8003c16 <_scanf_float+0x132>
 8003c28:	6821      	ldr	r1, [r4, #0]
 8003c2a:	05c8      	lsls	r0, r1, #23
 8003c2c:	d51b      	bpl.n	8003c66 <_scanf_float+0x182>
 8003c2e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8003c32:	6021      	str	r1, [r4, #0]
 8003c34:	f109 0901 	add.w	r9, r9, #1
 8003c38:	f1bb 0f00 	cmp.w	fp, #0
 8003c3c:	d003      	beq.n	8003c46 <_scanf_float+0x162>
 8003c3e:	3201      	adds	r2, #1
 8003c40:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003c44:	60a2      	str	r2, [r4, #8]
 8003c46:	68a3      	ldr	r3, [r4, #8]
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	60a3      	str	r3, [r4, #8]
 8003c4c:	6923      	ldr	r3, [r4, #16]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	6123      	str	r3, [r4, #16]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3b01      	subs	r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	607b      	str	r3, [r7, #4]
 8003c5a:	f340 8087 	ble.w	8003d6c <_scanf_float+0x288>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	3301      	adds	r3, #1
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	e764      	b.n	8003b30 <_scanf_float+0x4c>
 8003c66:	eb1a 0105 	adds.w	r1, sl, r5
 8003c6a:	f47f af6e 	bne.w	8003b4a <_scanf_float+0x66>
 8003c6e:	460d      	mov	r5, r1
 8003c70:	468a      	mov	sl, r1
 8003c72:	6822      	ldr	r2, [r4, #0]
 8003c74:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8003c78:	6022      	str	r2, [r4, #0]
 8003c7a:	f806 3b01 	strb.w	r3, [r6], #1
 8003c7e:	e7e2      	b.n	8003c46 <_scanf_float+0x162>
 8003c80:	6822      	ldr	r2, [r4, #0]
 8003c82:	0610      	lsls	r0, r2, #24
 8003c84:	f57f af61 	bpl.w	8003b4a <_scanf_float+0x66>
 8003c88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c8c:	6022      	str	r2, [r4, #0]
 8003c8e:	e7f4      	b.n	8003c7a <_scanf_float+0x196>
 8003c90:	f1ba 0f00 	cmp.w	sl, #0
 8003c94:	d10e      	bne.n	8003cb4 <_scanf_float+0x1d0>
 8003c96:	f1b9 0f00 	cmp.w	r9, #0
 8003c9a:	d10e      	bne.n	8003cba <_scanf_float+0x1d6>
 8003c9c:	6822      	ldr	r2, [r4, #0]
 8003c9e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003ca2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003ca6:	d108      	bne.n	8003cba <_scanf_float+0x1d6>
 8003ca8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003cac:	f04f 0a01 	mov.w	sl, #1
 8003cb0:	6022      	str	r2, [r4, #0]
 8003cb2:	e7e2      	b.n	8003c7a <_scanf_float+0x196>
 8003cb4:	f1ba 0f02 	cmp.w	sl, #2
 8003cb8:	d055      	beq.n	8003d66 <_scanf_float+0x282>
 8003cba:	2d01      	cmp	r5, #1
 8003cbc:	d002      	beq.n	8003cc4 <_scanf_float+0x1e0>
 8003cbe:	2d04      	cmp	r5, #4
 8003cc0:	f47f af43 	bne.w	8003b4a <_scanf_float+0x66>
 8003cc4:	3501      	adds	r5, #1
 8003cc6:	b2ed      	uxtb	r5, r5
 8003cc8:	e7d7      	b.n	8003c7a <_scanf_float+0x196>
 8003cca:	f1ba 0f01 	cmp.w	sl, #1
 8003cce:	f47f af3c 	bne.w	8003b4a <_scanf_float+0x66>
 8003cd2:	f04f 0a02 	mov.w	sl, #2
 8003cd6:	e7d0      	b.n	8003c7a <_scanf_float+0x196>
 8003cd8:	b97d      	cbnz	r5, 8003cfa <_scanf_float+0x216>
 8003cda:	f1b9 0f00 	cmp.w	r9, #0
 8003cde:	f47f af37 	bne.w	8003b50 <_scanf_float+0x6c>
 8003ce2:	6822      	ldr	r2, [r4, #0]
 8003ce4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003ce8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003cec:	f040 8103 	bne.w	8003ef6 <_scanf_float+0x412>
 8003cf0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003cf4:	2501      	movs	r5, #1
 8003cf6:	6022      	str	r2, [r4, #0]
 8003cf8:	e7bf      	b.n	8003c7a <_scanf_float+0x196>
 8003cfa:	2d03      	cmp	r5, #3
 8003cfc:	d0e2      	beq.n	8003cc4 <_scanf_float+0x1e0>
 8003cfe:	2d05      	cmp	r5, #5
 8003d00:	e7de      	b.n	8003cc0 <_scanf_float+0x1dc>
 8003d02:	2d02      	cmp	r5, #2
 8003d04:	f47f af21 	bne.w	8003b4a <_scanf_float+0x66>
 8003d08:	2503      	movs	r5, #3
 8003d0a:	e7b6      	b.n	8003c7a <_scanf_float+0x196>
 8003d0c:	2d06      	cmp	r5, #6
 8003d0e:	f47f af1c 	bne.w	8003b4a <_scanf_float+0x66>
 8003d12:	2507      	movs	r5, #7
 8003d14:	e7b1      	b.n	8003c7a <_scanf_float+0x196>
 8003d16:	6822      	ldr	r2, [r4, #0]
 8003d18:	0591      	lsls	r1, r2, #22
 8003d1a:	f57f af16 	bpl.w	8003b4a <_scanf_float+0x66>
 8003d1e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8003d22:	6022      	str	r2, [r4, #0]
 8003d24:	f8cd 9008 	str.w	r9, [sp, #8]
 8003d28:	e7a7      	b.n	8003c7a <_scanf_float+0x196>
 8003d2a:	6822      	ldr	r2, [r4, #0]
 8003d2c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8003d30:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003d34:	d006      	beq.n	8003d44 <_scanf_float+0x260>
 8003d36:	0550      	lsls	r0, r2, #21
 8003d38:	f57f af07 	bpl.w	8003b4a <_scanf_float+0x66>
 8003d3c:	f1b9 0f00 	cmp.w	r9, #0
 8003d40:	f000 80d9 	beq.w	8003ef6 <_scanf_float+0x412>
 8003d44:	0591      	lsls	r1, r2, #22
 8003d46:	bf58      	it	pl
 8003d48:	9902      	ldrpl	r1, [sp, #8]
 8003d4a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003d4e:	bf58      	it	pl
 8003d50:	eba9 0101 	subpl.w	r1, r9, r1
 8003d54:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8003d58:	f04f 0900 	mov.w	r9, #0
 8003d5c:	bf58      	it	pl
 8003d5e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003d62:	6022      	str	r2, [r4, #0]
 8003d64:	e789      	b.n	8003c7a <_scanf_float+0x196>
 8003d66:	f04f 0a03 	mov.w	sl, #3
 8003d6a:	e786      	b.n	8003c7a <_scanf_float+0x196>
 8003d6c:	4639      	mov	r1, r7
 8003d6e:	4640      	mov	r0, r8
 8003d70:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003d74:	4798      	blx	r3
 8003d76:	2800      	cmp	r0, #0
 8003d78:	f43f aeda 	beq.w	8003b30 <_scanf_float+0x4c>
 8003d7c:	e6e5      	b.n	8003b4a <_scanf_float+0x66>
 8003d7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003d82:	463a      	mov	r2, r7
 8003d84:	4640      	mov	r0, r8
 8003d86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003d8a:	4798      	blx	r3
 8003d8c:	6923      	ldr	r3, [r4, #16]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	6123      	str	r3, [r4, #16]
 8003d92:	e6e7      	b.n	8003b64 <_scanf_float+0x80>
 8003d94:	1e6b      	subs	r3, r5, #1
 8003d96:	2b06      	cmp	r3, #6
 8003d98:	d824      	bhi.n	8003de4 <_scanf_float+0x300>
 8003d9a:	2d02      	cmp	r5, #2
 8003d9c:	d836      	bhi.n	8003e0c <_scanf_float+0x328>
 8003d9e:	9b01      	ldr	r3, [sp, #4]
 8003da0:	429e      	cmp	r6, r3
 8003da2:	f67f aee3 	bls.w	8003b6c <_scanf_float+0x88>
 8003da6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003daa:	463a      	mov	r2, r7
 8003dac:	4640      	mov	r0, r8
 8003dae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003db2:	4798      	blx	r3
 8003db4:	6923      	ldr	r3, [r4, #16]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	6123      	str	r3, [r4, #16]
 8003dba:	e7f0      	b.n	8003d9e <_scanf_float+0x2ba>
 8003dbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003dc0:	463a      	mov	r2, r7
 8003dc2:	4640      	mov	r0, r8
 8003dc4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8003dc8:	4798      	blx	r3
 8003dca:	6923      	ldr	r3, [r4, #16]
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	6123      	str	r3, [r4, #16]
 8003dd0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003dd4:	fa5f fa8a 	uxtb.w	sl, sl
 8003dd8:	f1ba 0f02 	cmp.w	sl, #2
 8003ddc:	d1ee      	bne.n	8003dbc <_scanf_float+0x2d8>
 8003dde:	3d03      	subs	r5, #3
 8003de0:	b2ed      	uxtb	r5, r5
 8003de2:	1b76      	subs	r6, r6, r5
 8003de4:	6823      	ldr	r3, [r4, #0]
 8003de6:	05da      	lsls	r2, r3, #23
 8003de8:	d530      	bpl.n	8003e4c <_scanf_float+0x368>
 8003dea:	055b      	lsls	r3, r3, #21
 8003dec:	d511      	bpl.n	8003e12 <_scanf_float+0x32e>
 8003dee:	9b01      	ldr	r3, [sp, #4]
 8003df0:	429e      	cmp	r6, r3
 8003df2:	f67f aebb 	bls.w	8003b6c <_scanf_float+0x88>
 8003df6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003dfa:	463a      	mov	r2, r7
 8003dfc:	4640      	mov	r0, r8
 8003dfe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003e02:	4798      	blx	r3
 8003e04:	6923      	ldr	r3, [r4, #16]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	6123      	str	r3, [r4, #16]
 8003e0a:	e7f0      	b.n	8003dee <_scanf_float+0x30a>
 8003e0c:	46aa      	mov	sl, r5
 8003e0e:	46b3      	mov	fp, r6
 8003e10:	e7de      	b.n	8003dd0 <_scanf_float+0x2ec>
 8003e12:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003e16:	6923      	ldr	r3, [r4, #16]
 8003e18:	2965      	cmp	r1, #101	@ 0x65
 8003e1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8003e1e:	f106 35ff 	add.w	r5, r6, #4294967295
 8003e22:	6123      	str	r3, [r4, #16]
 8003e24:	d00c      	beq.n	8003e40 <_scanf_float+0x35c>
 8003e26:	2945      	cmp	r1, #69	@ 0x45
 8003e28:	d00a      	beq.n	8003e40 <_scanf_float+0x35c>
 8003e2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003e2e:	463a      	mov	r2, r7
 8003e30:	4640      	mov	r0, r8
 8003e32:	4798      	blx	r3
 8003e34:	6923      	ldr	r3, [r4, #16]
 8003e36:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	1eb5      	subs	r5, r6, #2
 8003e3e:	6123      	str	r3, [r4, #16]
 8003e40:	463a      	mov	r2, r7
 8003e42:	4640      	mov	r0, r8
 8003e44:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003e48:	4798      	blx	r3
 8003e4a:	462e      	mov	r6, r5
 8003e4c:	6822      	ldr	r2, [r4, #0]
 8003e4e:	f012 0210 	ands.w	r2, r2, #16
 8003e52:	d001      	beq.n	8003e58 <_scanf_float+0x374>
 8003e54:	2000      	movs	r0, #0
 8003e56:	e68a      	b.n	8003b6e <_scanf_float+0x8a>
 8003e58:	7032      	strb	r2, [r6, #0]
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e64:	d11c      	bne.n	8003ea0 <_scanf_float+0x3bc>
 8003e66:	9b02      	ldr	r3, [sp, #8]
 8003e68:	454b      	cmp	r3, r9
 8003e6a:	eba3 0209 	sub.w	r2, r3, r9
 8003e6e:	d123      	bne.n	8003eb8 <_scanf_float+0x3d4>
 8003e70:	2200      	movs	r2, #0
 8003e72:	4640      	mov	r0, r8
 8003e74:	9901      	ldr	r1, [sp, #4]
 8003e76:	f002 fbef 	bl	8006658 <_strtod_r>
 8003e7a:	9b03      	ldr	r3, [sp, #12]
 8003e7c:	6825      	ldr	r5, [r4, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f015 0f02 	tst.w	r5, #2
 8003e84:	4606      	mov	r6, r0
 8003e86:	460f      	mov	r7, r1
 8003e88:	f103 0204 	add.w	r2, r3, #4
 8003e8c:	d01f      	beq.n	8003ece <_scanf_float+0x3ea>
 8003e8e:	9903      	ldr	r1, [sp, #12]
 8003e90:	600a      	str	r2, [r1, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	e9c3 6700 	strd	r6, r7, [r3]
 8003e98:	68e3      	ldr	r3, [r4, #12]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	60e3      	str	r3, [r4, #12]
 8003e9e:	e7d9      	b.n	8003e54 <_scanf_float+0x370>
 8003ea0:	9b04      	ldr	r3, [sp, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0e4      	beq.n	8003e70 <_scanf_float+0x38c>
 8003ea6:	9905      	ldr	r1, [sp, #20]
 8003ea8:	230a      	movs	r3, #10
 8003eaa:	4640      	mov	r0, r8
 8003eac:	3101      	adds	r1, #1
 8003eae:	f002 fc53 	bl	8006758 <_strtol_r>
 8003eb2:	9b04      	ldr	r3, [sp, #16]
 8003eb4:	9e05      	ldr	r6, [sp, #20]
 8003eb6:	1ac2      	subs	r2, r0, r3
 8003eb8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8003ebc:	429e      	cmp	r6, r3
 8003ebe:	bf28      	it	cs
 8003ec0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8003ec4:	4630      	mov	r0, r6
 8003ec6:	490d      	ldr	r1, [pc, #52]	@ (8003efc <_scanf_float+0x418>)
 8003ec8:	f000 f8de 	bl	8004088 <siprintf>
 8003ecc:	e7d0      	b.n	8003e70 <_scanf_float+0x38c>
 8003ece:	076d      	lsls	r5, r5, #29
 8003ed0:	d4dd      	bmi.n	8003e8e <_scanf_float+0x3aa>
 8003ed2:	9d03      	ldr	r5, [sp, #12]
 8003ed4:	602a      	str	r2, [r5, #0]
 8003ed6:	681d      	ldr	r5, [r3, #0]
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	f7fc fd96 	bl	8000a0c <__aeabi_dcmpun>
 8003ee0:	b120      	cbz	r0, 8003eec <_scanf_float+0x408>
 8003ee2:	4807      	ldr	r0, [pc, #28]	@ (8003f00 <_scanf_float+0x41c>)
 8003ee4:	f000 f9c2 	bl	800426c <nanf>
 8003ee8:	6028      	str	r0, [r5, #0]
 8003eea:	e7d5      	b.n	8003e98 <_scanf_float+0x3b4>
 8003eec:	4630      	mov	r0, r6
 8003eee:	4639      	mov	r1, r7
 8003ef0:	f7fc fdea 	bl	8000ac8 <__aeabi_d2f>
 8003ef4:	e7f8      	b.n	8003ee8 <_scanf_float+0x404>
 8003ef6:	f04f 0900 	mov.w	r9, #0
 8003efa:	e62d      	b.n	8003b58 <_scanf_float+0x74>
 8003efc:	0800795e 	.word	0x0800795e
 8003f00:	08007cf5 	.word	0x08007cf5

08003f04 <std>:
 8003f04:	2300      	movs	r3, #0
 8003f06:	b510      	push	{r4, lr}
 8003f08:	4604      	mov	r4, r0
 8003f0a:	e9c0 3300 	strd	r3, r3, [r0]
 8003f0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f12:	6083      	str	r3, [r0, #8]
 8003f14:	8181      	strh	r1, [r0, #12]
 8003f16:	6643      	str	r3, [r0, #100]	@ 0x64
 8003f18:	81c2      	strh	r2, [r0, #14]
 8003f1a:	6183      	str	r3, [r0, #24]
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	2208      	movs	r2, #8
 8003f20:	305c      	adds	r0, #92	@ 0x5c
 8003f22:	f000 f914 	bl	800414e <memset>
 8003f26:	4b0d      	ldr	r3, [pc, #52]	@ (8003f5c <std+0x58>)
 8003f28:	6224      	str	r4, [r4, #32]
 8003f2a:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f60 <std+0x5c>)
 8003f2e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f30:	4b0c      	ldr	r3, [pc, #48]	@ (8003f64 <std+0x60>)
 8003f32:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f34:	4b0c      	ldr	r3, [pc, #48]	@ (8003f68 <std+0x64>)
 8003f36:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f38:	4b0c      	ldr	r3, [pc, #48]	@ (8003f6c <std+0x68>)
 8003f3a:	429c      	cmp	r4, r3
 8003f3c:	d006      	beq.n	8003f4c <std+0x48>
 8003f3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f42:	4294      	cmp	r4, r2
 8003f44:	d002      	beq.n	8003f4c <std+0x48>
 8003f46:	33d0      	adds	r3, #208	@ 0xd0
 8003f48:	429c      	cmp	r4, r3
 8003f4a:	d105      	bne.n	8003f58 <std+0x54>
 8003f4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f54:	f000 b978 	b.w	8004248 <__retarget_lock_init_recursive>
 8003f58:	bd10      	pop	{r4, pc}
 8003f5a:	bf00      	nop
 8003f5c:	080040c9 	.word	0x080040c9
 8003f60:	080040eb 	.word	0x080040eb
 8003f64:	08004123 	.word	0x08004123
 8003f68:	08004147 	.word	0x08004147
 8003f6c:	2000024c 	.word	0x2000024c

08003f70 <stdio_exit_handler>:
 8003f70:	4a02      	ldr	r2, [pc, #8]	@ (8003f7c <stdio_exit_handler+0xc>)
 8003f72:	4903      	ldr	r1, [pc, #12]	@ (8003f80 <stdio_exit_handler+0x10>)
 8003f74:	4803      	ldr	r0, [pc, #12]	@ (8003f84 <stdio_exit_handler+0x14>)
 8003f76:	f000 b869 	b.w	800404c <_fwalk_sglue>
 8003f7a:	bf00      	nop
 8003f7c:	2000000c 	.word	0x2000000c
 8003f80:	08006b0d 	.word	0x08006b0d
 8003f84:	2000001c 	.word	0x2000001c

08003f88 <cleanup_stdio>:
 8003f88:	6841      	ldr	r1, [r0, #4]
 8003f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8003fbc <cleanup_stdio+0x34>)
 8003f8c:	b510      	push	{r4, lr}
 8003f8e:	4299      	cmp	r1, r3
 8003f90:	4604      	mov	r4, r0
 8003f92:	d001      	beq.n	8003f98 <cleanup_stdio+0x10>
 8003f94:	f002 fdba 	bl	8006b0c <_fflush_r>
 8003f98:	68a1      	ldr	r1, [r4, #8]
 8003f9a:	4b09      	ldr	r3, [pc, #36]	@ (8003fc0 <cleanup_stdio+0x38>)
 8003f9c:	4299      	cmp	r1, r3
 8003f9e:	d002      	beq.n	8003fa6 <cleanup_stdio+0x1e>
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	f002 fdb3 	bl	8006b0c <_fflush_r>
 8003fa6:	68e1      	ldr	r1, [r4, #12]
 8003fa8:	4b06      	ldr	r3, [pc, #24]	@ (8003fc4 <cleanup_stdio+0x3c>)
 8003faa:	4299      	cmp	r1, r3
 8003fac:	d004      	beq.n	8003fb8 <cleanup_stdio+0x30>
 8003fae:	4620      	mov	r0, r4
 8003fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fb4:	f002 bdaa 	b.w	8006b0c <_fflush_r>
 8003fb8:	bd10      	pop	{r4, pc}
 8003fba:	bf00      	nop
 8003fbc:	2000024c 	.word	0x2000024c
 8003fc0:	200002b4 	.word	0x200002b4
 8003fc4:	2000031c 	.word	0x2000031c

08003fc8 <global_stdio_init.part.0>:
 8003fc8:	b510      	push	{r4, lr}
 8003fca:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff8 <global_stdio_init.part.0+0x30>)
 8003fcc:	4c0b      	ldr	r4, [pc, #44]	@ (8003ffc <global_stdio_init.part.0+0x34>)
 8003fce:	4a0c      	ldr	r2, [pc, #48]	@ (8004000 <global_stdio_init.part.0+0x38>)
 8003fd0:	4620      	mov	r0, r4
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	2104      	movs	r1, #4
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f7ff ff94 	bl	8003f04 <std>
 8003fdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	2109      	movs	r1, #9
 8003fe4:	f7ff ff8e 	bl	8003f04 <std>
 8003fe8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003fec:	2202      	movs	r2, #2
 8003fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ff2:	2112      	movs	r1, #18
 8003ff4:	f7ff bf86 	b.w	8003f04 <std>
 8003ff8:	20000384 	.word	0x20000384
 8003ffc:	2000024c 	.word	0x2000024c
 8004000:	08003f71 	.word	0x08003f71

08004004 <__sfp_lock_acquire>:
 8004004:	4801      	ldr	r0, [pc, #4]	@ (800400c <__sfp_lock_acquire+0x8>)
 8004006:	f000 b920 	b.w	800424a <__retarget_lock_acquire_recursive>
 800400a:	bf00      	nop
 800400c:	2000038d 	.word	0x2000038d

08004010 <__sfp_lock_release>:
 8004010:	4801      	ldr	r0, [pc, #4]	@ (8004018 <__sfp_lock_release+0x8>)
 8004012:	f000 b91b 	b.w	800424c <__retarget_lock_release_recursive>
 8004016:	bf00      	nop
 8004018:	2000038d 	.word	0x2000038d

0800401c <__sinit>:
 800401c:	b510      	push	{r4, lr}
 800401e:	4604      	mov	r4, r0
 8004020:	f7ff fff0 	bl	8004004 <__sfp_lock_acquire>
 8004024:	6a23      	ldr	r3, [r4, #32]
 8004026:	b11b      	cbz	r3, 8004030 <__sinit+0x14>
 8004028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800402c:	f7ff bff0 	b.w	8004010 <__sfp_lock_release>
 8004030:	4b04      	ldr	r3, [pc, #16]	@ (8004044 <__sinit+0x28>)
 8004032:	6223      	str	r3, [r4, #32]
 8004034:	4b04      	ldr	r3, [pc, #16]	@ (8004048 <__sinit+0x2c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1f5      	bne.n	8004028 <__sinit+0xc>
 800403c:	f7ff ffc4 	bl	8003fc8 <global_stdio_init.part.0>
 8004040:	e7f2      	b.n	8004028 <__sinit+0xc>
 8004042:	bf00      	nop
 8004044:	08003f89 	.word	0x08003f89
 8004048:	20000384 	.word	0x20000384

0800404c <_fwalk_sglue>:
 800404c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004050:	4607      	mov	r7, r0
 8004052:	4688      	mov	r8, r1
 8004054:	4614      	mov	r4, r2
 8004056:	2600      	movs	r6, #0
 8004058:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800405c:	f1b9 0901 	subs.w	r9, r9, #1
 8004060:	d505      	bpl.n	800406e <_fwalk_sglue+0x22>
 8004062:	6824      	ldr	r4, [r4, #0]
 8004064:	2c00      	cmp	r4, #0
 8004066:	d1f7      	bne.n	8004058 <_fwalk_sglue+0xc>
 8004068:	4630      	mov	r0, r6
 800406a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800406e:	89ab      	ldrh	r3, [r5, #12]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d907      	bls.n	8004084 <_fwalk_sglue+0x38>
 8004074:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004078:	3301      	adds	r3, #1
 800407a:	d003      	beq.n	8004084 <_fwalk_sglue+0x38>
 800407c:	4629      	mov	r1, r5
 800407e:	4638      	mov	r0, r7
 8004080:	47c0      	blx	r8
 8004082:	4306      	orrs	r6, r0
 8004084:	3568      	adds	r5, #104	@ 0x68
 8004086:	e7e9      	b.n	800405c <_fwalk_sglue+0x10>

08004088 <siprintf>:
 8004088:	b40e      	push	{r1, r2, r3}
 800408a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800408e:	b500      	push	{lr}
 8004090:	b09c      	sub	sp, #112	@ 0x70
 8004092:	ab1d      	add	r3, sp, #116	@ 0x74
 8004094:	9002      	str	r0, [sp, #8]
 8004096:	9006      	str	r0, [sp, #24]
 8004098:	9107      	str	r1, [sp, #28]
 800409a:	9104      	str	r1, [sp, #16]
 800409c:	4808      	ldr	r0, [pc, #32]	@ (80040c0 <siprintf+0x38>)
 800409e:	4909      	ldr	r1, [pc, #36]	@ (80040c4 <siprintf+0x3c>)
 80040a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80040a4:	9105      	str	r1, [sp, #20]
 80040a6:	6800      	ldr	r0, [r0, #0]
 80040a8:	a902      	add	r1, sp, #8
 80040aa:	9301      	str	r3, [sp, #4]
 80040ac:	f002 fbb2 	bl	8006814 <_svfiprintf_r>
 80040b0:	2200      	movs	r2, #0
 80040b2:	9b02      	ldr	r3, [sp, #8]
 80040b4:	701a      	strb	r2, [r3, #0]
 80040b6:	b01c      	add	sp, #112	@ 0x70
 80040b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80040bc:	b003      	add	sp, #12
 80040be:	4770      	bx	lr
 80040c0:	20000018 	.word	0x20000018
 80040c4:	ffff0208 	.word	0xffff0208

080040c8 <__sread>:
 80040c8:	b510      	push	{r4, lr}
 80040ca:	460c      	mov	r4, r1
 80040cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040d0:	f000 f86c 	bl	80041ac <_read_r>
 80040d4:	2800      	cmp	r0, #0
 80040d6:	bfab      	itete	ge
 80040d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80040da:	89a3      	ldrhlt	r3, [r4, #12]
 80040dc:	181b      	addge	r3, r3, r0
 80040de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80040e2:	bfac      	ite	ge
 80040e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80040e6:	81a3      	strhlt	r3, [r4, #12]
 80040e8:	bd10      	pop	{r4, pc}

080040ea <__swrite>:
 80040ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040ee:	461f      	mov	r7, r3
 80040f0:	898b      	ldrh	r3, [r1, #12]
 80040f2:	4605      	mov	r5, r0
 80040f4:	05db      	lsls	r3, r3, #23
 80040f6:	460c      	mov	r4, r1
 80040f8:	4616      	mov	r6, r2
 80040fa:	d505      	bpl.n	8004108 <__swrite+0x1e>
 80040fc:	2302      	movs	r3, #2
 80040fe:	2200      	movs	r2, #0
 8004100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004104:	f000 f840 	bl	8004188 <_lseek_r>
 8004108:	89a3      	ldrh	r3, [r4, #12]
 800410a:	4632      	mov	r2, r6
 800410c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004110:	81a3      	strh	r3, [r4, #12]
 8004112:	4628      	mov	r0, r5
 8004114:	463b      	mov	r3, r7
 8004116:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800411a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800411e:	f000 b857 	b.w	80041d0 <_write_r>

08004122 <__sseek>:
 8004122:	b510      	push	{r4, lr}
 8004124:	460c      	mov	r4, r1
 8004126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800412a:	f000 f82d 	bl	8004188 <_lseek_r>
 800412e:	1c43      	adds	r3, r0, #1
 8004130:	89a3      	ldrh	r3, [r4, #12]
 8004132:	bf15      	itete	ne
 8004134:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004136:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800413a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800413e:	81a3      	strheq	r3, [r4, #12]
 8004140:	bf18      	it	ne
 8004142:	81a3      	strhne	r3, [r4, #12]
 8004144:	bd10      	pop	{r4, pc}

08004146 <__sclose>:
 8004146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800414a:	f000 b80d 	b.w	8004168 <_close_r>

0800414e <memset>:
 800414e:	4603      	mov	r3, r0
 8004150:	4402      	add	r2, r0
 8004152:	4293      	cmp	r3, r2
 8004154:	d100      	bne.n	8004158 <memset+0xa>
 8004156:	4770      	bx	lr
 8004158:	f803 1b01 	strb.w	r1, [r3], #1
 800415c:	e7f9      	b.n	8004152 <memset+0x4>
	...

08004160 <_localeconv_r>:
 8004160:	4800      	ldr	r0, [pc, #0]	@ (8004164 <_localeconv_r+0x4>)
 8004162:	4770      	bx	lr
 8004164:	20000158 	.word	0x20000158

08004168 <_close_r>:
 8004168:	b538      	push	{r3, r4, r5, lr}
 800416a:	2300      	movs	r3, #0
 800416c:	4d05      	ldr	r5, [pc, #20]	@ (8004184 <_close_r+0x1c>)
 800416e:	4604      	mov	r4, r0
 8004170:	4608      	mov	r0, r1
 8004172:	602b      	str	r3, [r5, #0]
 8004174:	f7fd f877 	bl	8001266 <_close>
 8004178:	1c43      	adds	r3, r0, #1
 800417a:	d102      	bne.n	8004182 <_close_r+0x1a>
 800417c:	682b      	ldr	r3, [r5, #0]
 800417e:	b103      	cbz	r3, 8004182 <_close_r+0x1a>
 8004180:	6023      	str	r3, [r4, #0]
 8004182:	bd38      	pop	{r3, r4, r5, pc}
 8004184:	20000388 	.word	0x20000388

08004188 <_lseek_r>:
 8004188:	b538      	push	{r3, r4, r5, lr}
 800418a:	4604      	mov	r4, r0
 800418c:	4608      	mov	r0, r1
 800418e:	4611      	mov	r1, r2
 8004190:	2200      	movs	r2, #0
 8004192:	4d05      	ldr	r5, [pc, #20]	@ (80041a8 <_lseek_r+0x20>)
 8004194:	602a      	str	r2, [r5, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	f7fd f889 	bl	80012ae <_lseek>
 800419c:	1c43      	adds	r3, r0, #1
 800419e:	d102      	bne.n	80041a6 <_lseek_r+0x1e>
 80041a0:	682b      	ldr	r3, [r5, #0]
 80041a2:	b103      	cbz	r3, 80041a6 <_lseek_r+0x1e>
 80041a4:	6023      	str	r3, [r4, #0]
 80041a6:	bd38      	pop	{r3, r4, r5, pc}
 80041a8:	20000388 	.word	0x20000388

080041ac <_read_r>:
 80041ac:	b538      	push	{r3, r4, r5, lr}
 80041ae:	4604      	mov	r4, r0
 80041b0:	4608      	mov	r0, r1
 80041b2:	4611      	mov	r1, r2
 80041b4:	2200      	movs	r2, #0
 80041b6:	4d05      	ldr	r5, [pc, #20]	@ (80041cc <_read_r+0x20>)
 80041b8:	602a      	str	r2, [r5, #0]
 80041ba:	461a      	mov	r2, r3
 80041bc:	f7fd f81a 	bl	80011f4 <_read>
 80041c0:	1c43      	adds	r3, r0, #1
 80041c2:	d102      	bne.n	80041ca <_read_r+0x1e>
 80041c4:	682b      	ldr	r3, [r5, #0]
 80041c6:	b103      	cbz	r3, 80041ca <_read_r+0x1e>
 80041c8:	6023      	str	r3, [r4, #0]
 80041ca:	bd38      	pop	{r3, r4, r5, pc}
 80041cc:	20000388 	.word	0x20000388

080041d0 <_write_r>:
 80041d0:	b538      	push	{r3, r4, r5, lr}
 80041d2:	4604      	mov	r4, r0
 80041d4:	4608      	mov	r0, r1
 80041d6:	4611      	mov	r1, r2
 80041d8:	2200      	movs	r2, #0
 80041da:	4d05      	ldr	r5, [pc, #20]	@ (80041f0 <_write_r+0x20>)
 80041dc:	602a      	str	r2, [r5, #0]
 80041de:	461a      	mov	r2, r3
 80041e0:	f7fd f825 	bl	800122e <_write>
 80041e4:	1c43      	adds	r3, r0, #1
 80041e6:	d102      	bne.n	80041ee <_write_r+0x1e>
 80041e8:	682b      	ldr	r3, [r5, #0]
 80041ea:	b103      	cbz	r3, 80041ee <_write_r+0x1e>
 80041ec:	6023      	str	r3, [r4, #0]
 80041ee:	bd38      	pop	{r3, r4, r5, pc}
 80041f0:	20000388 	.word	0x20000388

080041f4 <__errno>:
 80041f4:	4b01      	ldr	r3, [pc, #4]	@ (80041fc <__errno+0x8>)
 80041f6:	6818      	ldr	r0, [r3, #0]
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	20000018 	.word	0x20000018

08004200 <__libc_init_array>:
 8004200:	b570      	push	{r4, r5, r6, lr}
 8004202:	2600      	movs	r6, #0
 8004204:	4d0c      	ldr	r5, [pc, #48]	@ (8004238 <__libc_init_array+0x38>)
 8004206:	4c0d      	ldr	r4, [pc, #52]	@ (800423c <__libc_init_array+0x3c>)
 8004208:	1b64      	subs	r4, r4, r5
 800420a:	10a4      	asrs	r4, r4, #2
 800420c:	42a6      	cmp	r6, r4
 800420e:	d109      	bne.n	8004224 <__libc_init_array+0x24>
 8004210:	f003 fb68 	bl	80078e4 <_init>
 8004214:	2600      	movs	r6, #0
 8004216:	4d0a      	ldr	r5, [pc, #40]	@ (8004240 <__libc_init_array+0x40>)
 8004218:	4c0a      	ldr	r4, [pc, #40]	@ (8004244 <__libc_init_array+0x44>)
 800421a:	1b64      	subs	r4, r4, r5
 800421c:	10a4      	asrs	r4, r4, #2
 800421e:	42a6      	cmp	r6, r4
 8004220:	d105      	bne.n	800422e <__libc_init_array+0x2e>
 8004222:	bd70      	pop	{r4, r5, r6, pc}
 8004224:	f855 3b04 	ldr.w	r3, [r5], #4
 8004228:	4798      	blx	r3
 800422a:	3601      	adds	r6, #1
 800422c:	e7ee      	b.n	800420c <__libc_init_array+0xc>
 800422e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004232:	4798      	blx	r3
 8004234:	3601      	adds	r6, #1
 8004236:	e7f2      	b.n	800421e <__libc_init_array+0x1e>
 8004238:	08007d60 	.word	0x08007d60
 800423c:	08007d60 	.word	0x08007d60
 8004240:	08007d60 	.word	0x08007d60
 8004244:	08007d64 	.word	0x08007d64

08004248 <__retarget_lock_init_recursive>:
 8004248:	4770      	bx	lr

0800424a <__retarget_lock_acquire_recursive>:
 800424a:	4770      	bx	lr

0800424c <__retarget_lock_release_recursive>:
 800424c:	4770      	bx	lr

0800424e <memchr>:
 800424e:	4603      	mov	r3, r0
 8004250:	b510      	push	{r4, lr}
 8004252:	b2c9      	uxtb	r1, r1
 8004254:	4402      	add	r2, r0
 8004256:	4293      	cmp	r3, r2
 8004258:	4618      	mov	r0, r3
 800425a:	d101      	bne.n	8004260 <memchr+0x12>
 800425c:	2000      	movs	r0, #0
 800425e:	e003      	b.n	8004268 <memchr+0x1a>
 8004260:	7804      	ldrb	r4, [r0, #0]
 8004262:	3301      	adds	r3, #1
 8004264:	428c      	cmp	r4, r1
 8004266:	d1f6      	bne.n	8004256 <memchr+0x8>
 8004268:	bd10      	pop	{r4, pc}
	...

0800426c <nanf>:
 800426c:	4800      	ldr	r0, [pc, #0]	@ (8004270 <nanf+0x4>)
 800426e:	4770      	bx	lr
 8004270:	7fc00000 	.word	0x7fc00000

08004274 <quorem>:
 8004274:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004278:	6903      	ldr	r3, [r0, #16]
 800427a:	690c      	ldr	r4, [r1, #16]
 800427c:	4607      	mov	r7, r0
 800427e:	42a3      	cmp	r3, r4
 8004280:	db7e      	blt.n	8004380 <quorem+0x10c>
 8004282:	3c01      	subs	r4, #1
 8004284:	00a3      	lsls	r3, r4, #2
 8004286:	f100 0514 	add.w	r5, r0, #20
 800428a:	f101 0814 	add.w	r8, r1, #20
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004294:	9301      	str	r3, [sp, #4]
 8004296:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800429a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800429e:	3301      	adds	r3, #1
 80042a0:	429a      	cmp	r2, r3
 80042a2:	fbb2 f6f3 	udiv	r6, r2, r3
 80042a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80042aa:	d32e      	bcc.n	800430a <quorem+0x96>
 80042ac:	f04f 0a00 	mov.w	sl, #0
 80042b0:	46c4      	mov	ip, r8
 80042b2:	46ae      	mov	lr, r5
 80042b4:	46d3      	mov	fp, sl
 80042b6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80042ba:	b298      	uxth	r0, r3
 80042bc:	fb06 a000 	mla	r0, r6, r0, sl
 80042c0:	0c1b      	lsrs	r3, r3, #16
 80042c2:	0c02      	lsrs	r2, r0, #16
 80042c4:	fb06 2303 	mla	r3, r6, r3, r2
 80042c8:	f8de 2000 	ldr.w	r2, [lr]
 80042cc:	b280      	uxth	r0, r0
 80042ce:	b292      	uxth	r2, r2
 80042d0:	1a12      	subs	r2, r2, r0
 80042d2:	445a      	add	r2, fp
 80042d4:	f8de 0000 	ldr.w	r0, [lr]
 80042d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80042dc:	b29b      	uxth	r3, r3
 80042de:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80042e2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80042e6:	b292      	uxth	r2, r2
 80042e8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80042ec:	45e1      	cmp	r9, ip
 80042ee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80042f2:	f84e 2b04 	str.w	r2, [lr], #4
 80042f6:	d2de      	bcs.n	80042b6 <quorem+0x42>
 80042f8:	9b00      	ldr	r3, [sp, #0]
 80042fa:	58eb      	ldr	r3, [r5, r3]
 80042fc:	b92b      	cbnz	r3, 800430a <quorem+0x96>
 80042fe:	9b01      	ldr	r3, [sp, #4]
 8004300:	3b04      	subs	r3, #4
 8004302:	429d      	cmp	r5, r3
 8004304:	461a      	mov	r2, r3
 8004306:	d32f      	bcc.n	8004368 <quorem+0xf4>
 8004308:	613c      	str	r4, [r7, #16]
 800430a:	4638      	mov	r0, r7
 800430c:	f001 f9c4 	bl	8005698 <__mcmp>
 8004310:	2800      	cmp	r0, #0
 8004312:	db25      	blt.n	8004360 <quorem+0xec>
 8004314:	4629      	mov	r1, r5
 8004316:	2000      	movs	r0, #0
 8004318:	f858 2b04 	ldr.w	r2, [r8], #4
 800431c:	f8d1 c000 	ldr.w	ip, [r1]
 8004320:	fa1f fe82 	uxth.w	lr, r2
 8004324:	fa1f f38c 	uxth.w	r3, ip
 8004328:	eba3 030e 	sub.w	r3, r3, lr
 800432c:	4403      	add	r3, r0
 800432e:	0c12      	lsrs	r2, r2, #16
 8004330:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004334:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004338:	b29b      	uxth	r3, r3
 800433a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800433e:	45c1      	cmp	r9, r8
 8004340:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004344:	f841 3b04 	str.w	r3, [r1], #4
 8004348:	d2e6      	bcs.n	8004318 <quorem+0xa4>
 800434a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800434e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004352:	b922      	cbnz	r2, 800435e <quorem+0xea>
 8004354:	3b04      	subs	r3, #4
 8004356:	429d      	cmp	r5, r3
 8004358:	461a      	mov	r2, r3
 800435a:	d30b      	bcc.n	8004374 <quorem+0x100>
 800435c:	613c      	str	r4, [r7, #16]
 800435e:	3601      	adds	r6, #1
 8004360:	4630      	mov	r0, r6
 8004362:	b003      	add	sp, #12
 8004364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004368:	6812      	ldr	r2, [r2, #0]
 800436a:	3b04      	subs	r3, #4
 800436c:	2a00      	cmp	r2, #0
 800436e:	d1cb      	bne.n	8004308 <quorem+0x94>
 8004370:	3c01      	subs	r4, #1
 8004372:	e7c6      	b.n	8004302 <quorem+0x8e>
 8004374:	6812      	ldr	r2, [r2, #0]
 8004376:	3b04      	subs	r3, #4
 8004378:	2a00      	cmp	r2, #0
 800437a:	d1ef      	bne.n	800435c <quorem+0xe8>
 800437c:	3c01      	subs	r4, #1
 800437e:	e7ea      	b.n	8004356 <quorem+0xe2>
 8004380:	2000      	movs	r0, #0
 8004382:	e7ee      	b.n	8004362 <quorem+0xee>
 8004384:	0000      	movs	r0, r0
	...

08004388 <_dtoa_r>:
 8004388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800438c:	4614      	mov	r4, r2
 800438e:	461d      	mov	r5, r3
 8004390:	69c7      	ldr	r7, [r0, #28]
 8004392:	b097      	sub	sp, #92	@ 0x5c
 8004394:	4683      	mov	fp, r0
 8004396:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800439a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800439c:	b97f      	cbnz	r7, 80043be <_dtoa_r+0x36>
 800439e:	2010      	movs	r0, #16
 80043a0:	f000 fe02 	bl	8004fa8 <malloc>
 80043a4:	4602      	mov	r2, r0
 80043a6:	f8cb 001c 	str.w	r0, [fp, #28]
 80043aa:	b920      	cbnz	r0, 80043b6 <_dtoa_r+0x2e>
 80043ac:	21ef      	movs	r1, #239	@ 0xef
 80043ae:	4ba8      	ldr	r3, [pc, #672]	@ (8004650 <_dtoa_r+0x2c8>)
 80043b0:	48a8      	ldr	r0, [pc, #672]	@ (8004654 <_dtoa_r+0x2cc>)
 80043b2:	f002 fc23 	bl	8006bfc <__assert_func>
 80043b6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80043ba:	6007      	str	r7, [r0, #0]
 80043bc:	60c7      	str	r7, [r0, #12]
 80043be:	f8db 301c 	ldr.w	r3, [fp, #28]
 80043c2:	6819      	ldr	r1, [r3, #0]
 80043c4:	b159      	cbz	r1, 80043de <_dtoa_r+0x56>
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	2301      	movs	r3, #1
 80043ca:	4093      	lsls	r3, r2
 80043cc:	604a      	str	r2, [r1, #4]
 80043ce:	608b      	str	r3, [r1, #8]
 80043d0:	4658      	mov	r0, fp
 80043d2:	f000 fedf 	bl	8005194 <_Bfree>
 80043d6:	2200      	movs	r2, #0
 80043d8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	1e2b      	subs	r3, r5, #0
 80043e0:	bfaf      	iteee	ge
 80043e2:	2300      	movge	r3, #0
 80043e4:	2201      	movlt	r2, #1
 80043e6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80043ea:	9303      	strlt	r3, [sp, #12]
 80043ec:	bfa8      	it	ge
 80043ee:	6033      	strge	r3, [r6, #0]
 80043f0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80043f4:	4b98      	ldr	r3, [pc, #608]	@ (8004658 <_dtoa_r+0x2d0>)
 80043f6:	bfb8      	it	lt
 80043f8:	6032      	strlt	r2, [r6, #0]
 80043fa:	ea33 0308 	bics.w	r3, r3, r8
 80043fe:	d112      	bne.n	8004426 <_dtoa_r+0x9e>
 8004400:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004404:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004406:	6013      	str	r3, [r2, #0]
 8004408:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800440c:	4323      	orrs	r3, r4
 800440e:	f000 8550 	beq.w	8004eb2 <_dtoa_r+0xb2a>
 8004412:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004414:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800465c <_dtoa_r+0x2d4>
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 8552 	beq.w	8004ec2 <_dtoa_r+0xb3a>
 800441e:	f10a 0303 	add.w	r3, sl, #3
 8004422:	f000 bd4c 	b.w	8004ebe <_dtoa_r+0xb36>
 8004426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800442a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800442e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004432:	2200      	movs	r2, #0
 8004434:	2300      	movs	r3, #0
 8004436:	f7fc fab7 	bl	80009a8 <__aeabi_dcmpeq>
 800443a:	4607      	mov	r7, r0
 800443c:	b158      	cbz	r0, 8004456 <_dtoa_r+0xce>
 800443e:	2301      	movs	r3, #1
 8004440:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004446:	b113      	cbz	r3, 800444e <_dtoa_r+0xc6>
 8004448:	4b85      	ldr	r3, [pc, #532]	@ (8004660 <_dtoa_r+0x2d8>)
 800444a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004664 <_dtoa_r+0x2dc>
 8004452:	f000 bd36 	b.w	8004ec2 <_dtoa_r+0xb3a>
 8004456:	ab14      	add	r3, sp, #80	@ 0x50
 8004458:	9301      	str	r3, [sp, #4]
 800445a:	ab15      	add	r3, sp, #84	@ 0x54
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	4658      	mov	r0, fp
 8004460:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004464:	f001 fa30 	bl	80058c8 <__d2b>
 8004468:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800446c:	4681      	mov	r9, r0
 800446e:	2e00      	cmp	r6, #0
 8004470:	d077      	beq.n	8004562 <_dtoa_r+0x1da>
 8004472:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004476:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004478:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800447c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004480:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004484:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004488:	9712      	str	r7, [sp, #72]	@ 0x48
 800448a:	4619      	mov	r1, r3
 800448c:	2200      	movs	r2, #0
 800448e:	4b76      	ldr	r3, [pc, #472]	@ (8004668 <_dtoa_r+0x2e0>)
 8004490:	f7fb fe6a 	bl	8000168 <__aeabi_dsub>
 8004494:	a368      	add	r3, pc, #416	@ (adr r3, 8004638 <_dtoa_r+0x2b0>)
 8004496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449a:	f7fc f81d 	bl	80004d8 <__aeabi_dmul>
 800449e:	a368      	add	r3, pc, #416	@ (adr r3, 8004640 <_dtoa_r+0x2b8>)
 80044a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a4:	f7fb fe62 	bl	800016c <__adddf3>
 80044a8:	4604      	mov	r4, r0
 80044aa:	4630      	mov	r0, r6
 80044ac:	460d      	mov	r5, r1
 80044ae:	f7fb ffa9 	bl	8000404 <__aeabi_i2d>
 80044b2:	a365      	add	r3, pc, #404	@ (adr r3, 8004648 <_dtoa_r+0x2c0>)
 80044b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b8:	f7fc f80e 	bl	80004d8 <__aeabi_dmul>
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	4620      	mov	r0, r4
 80044c2:	4629      	mov	r1, r5
 80044c4:	f7fb fe52 	bl	800016c <__adddf3>
 80044c8:	4604      	mov	r4, r0
 80044ca:	460d      	mov	r5, r1
 80044cc:	f7fc fab4 	bl	8000a38 <__aeabi_d2iz>
 80044d0:	2200      	movs	r2, #0
 80044d2:	4607      	mov	r7, r0
 80044d4:	2300      	movs	r3, #0
 80044d6:	4620      	mov	r0, r4
 80044d8:	4629      	mov	r1, r5
 80044da:	f7fc fa6f 	bl	80009bc <__aeabi_dcmplt>
 80044de:	b140      	cbz	r0, 80044f2 <_dtoa_r+0x16a>
 80044e0:	4638      	mov	r0, r7
 80044e2:	f7fb ff8f 	bl	8000404 <__aeabi_i2d>
 80044e6:	4622      	mov	r2, r4
 80044e8:	462b      	mov	r3, r5
 80044ea:	f7fc fa5d 	bl	80009a8 <__aeabi_dcmpeq>
 80044ee:	b900      	cbnz	r0, 80044f2 <_dtoa_r+0x16a>
 80044f0:	3f01      	subs	r7, #1
 80044f2:	2f16      	cmp	r7, #22
 80044f4:	d853      	bhi.n	800459e <_dtoa_r+0x216>
 80044f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80044fa:	4b5c      	ldr	r3, [pc, #368]	@ (800466c <_dtoa_r+0x2e4>)
 80044fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004504:	f7fc fa5a 	bl	80009bc <__aeabi_dcmplt>
 8004508:	2800      	cmp	r0, #0
 800450a:	d04a      	beq.n	80045a2 <_dtoa_r+0x21a>
 800450c:	2300      	movs	r3, #0
 800450e:	3f01      	subs	r7, #1
 8004510:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004512:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004514:	1b9b      	subs	r3, r3, r6
 8004516:	1e5a      	subs	r2, r3, #1
 8004518:	bf46      	itte	mi
 800451a:	f1c3 0801 	rsbmi	r8, r3, #1
 800451e:	2300      	movmi	r3, #0
 8004520:	f04f 0800 	movpl.w	r8, #0
 8004524:	9209      	str	r2, [sp, #36]	@ 0x24
 8004526:	bf48      	it	mi
 8004528:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800452a:	2f00      	cmp	r7, #0
 800452c:	db3b      	blt.n	80045a6 <_dtoa_r+0x21e>
 800452e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004530:	970e      	str	r7, [sp, #56]	@ 0x38
 8004532:	443b      	add	r3, r7
 8004534:	9309      	str	r3, [sp, #36]	@ 0x24
 8004536:	2300      	movs	r3, #0
 8004538:	930a      	str	r3, [sp, #40]	@ 0x28
 800453a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800453c:	2b09      	cmp	r3, #9
 800453e:	d866      	bhi.n	800460e <_dtoa_r+0x286>
 8004540:	2b05      	cmp	r3, #5
 8004542:	bfc4      	itt	gt
 8004544:	3b04      	subgt	r3, #4
 8004546:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004548:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800454a:	bfc8      	it	gt
 800454c:	2400      	movgt	r4, #0
 800454e:	f1a3 0302 	sub.w	r3, r3, #2
 8004552:	bfd8      	it	le
 8004554:	2401      	movle	r4, #1
 8004556:	2b03      	cmp	r3, #3
 8004558:	d864      	bhi.n	8004624 <_dtoa_r+0x29c>
 800455a:	e8df f003 	tbb	[pc, r3]
 800455e:	382b      	.short	0x382b
 8004560:	5636      	.short	0x5636
 8004562:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004566:	441e      	add	r6, r3
 8004568:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800456c:	2b20      	cmp	r3, #32
 800456e:	bfc1      	itttt	gt
 8004570:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004574:	fa08 f803 	lslgt.w	r8, r8, r3
 8004578:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800457c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004580:	bfd6      	itet	le
 8004582:	f1c3 0320 	rsble	r3, r3, #32
 8004586:	ea48 0003 	orrgt.w	r0, r8, r3
 800458a:	fa04 f003 	lslle.w	r0, r4, r3
 800458e:	f7fb ff29 	bl	80003e4 <__aeabi_ui2d>
 8004592:	2201      	movs	r2, #1
 8004594:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004598:	3e01      	subs	r6, #1
 800459a:	9212      	str	r2, [sp, #72]	@ 0x48
 800459c:	e775      	b.n	800448a <_dtoa_r+0x102>
 800459e:	2301      	movs	r3, #1
 80045a0:	e7b6      	b.n	8004510 <_dtoa_r+0x188>
 80045a2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80045a4:	e7b5      	b.n	8004512 <_dtoa_r+0x18a>
 80045a6:	427b      	negs	r3, r7
 80045a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80045aa:	2300      	movs	r3, #0
 80045ac:	eba8 0807 	sub.w	r8, r8, r7
 80045b0:	930e      	str	r3, [sp, #56]	@ 0x38
 80045b2:	e7c2      	b.n	800453a <_dtoa_r+0x1b2>
 80045b4:	2300      	movs	r3, #0
 80045b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80045b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	dc35      	bgt.n	800462a <_dtoa_r+0x2a2>
 80045be:	2301      	movs	r3, #1
 80045c0:	461a      	mov	r2, r3
 80045c2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80045c6:	9221      	str	r2, [sp, #132]	@ 0x84
 80045c8:	e00b      	b.n	80045e2 <_dtoa_r+0x25a>
 80045ca:	2301      	movs	r3, #1
 80045cc:	e7f3      	b.n	80045b6 <_dtoa_r+0x22e>
 80045ce:	2300      	movs	r3, #0
 80045d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80045d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80045d4:	18fb      	adds	r3, r7, r3
 80045d6:	9308      	str	r3, [sp, #32]
 80045d8:	3301      	adds	r3, #1
 80045da:	2b01      	cmp	r3, #1
 80045dc:	9307      	str	r3, [sp, #28]
 80045de:	bfb8      	it	lt
 80045e0:	2301      	movlt	r3, #1
 80045e2:	2100      	movs	r1, #0
 80045e4:	2204      	movs	r2, #4
 80045e6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80045ea:	f102 0514 	add.w	r5, r2, #20
 80045ee:	429d      	cmp	r5, r3
 80045f0:	d91f      	bls.n	8004632 <_dtoa_r+0x2aa>
 80045f2:	6041      	str	r1, [r0, #4]
 80045f4:	4658      	mov	r0, fp
 80045f6:	f000 fd8d 	bl	8005114 <_Balloc>
 80045fa:	4682      	mov	sl, r0
 80045fc:	2800      	cmp	r0, #0
 80045fe:	d139      	bne.n	8004674 <_dtoa_r+0x2ec>
 8004600:	4602      	mov	r2, r0
 8004602:	f240 11af 	movw	r1, #431	@ 0x1af
 8004606:	4b1a      	ldr	r3, [pc, #104]	@ (8004670 <_dtoa_r+0x2e8>)
 8004608:	e6d2      	b.n	80043b0 <_dtoa_r+0x28>
 800460a:	2301      	movs	r3, #1
 800460c:	e7e0      	b.n	80045d0 <_dtoa_r+0x248>
 800460e:	2401      	movs	r4, #1
 8004610:	2300      	movs	r3, #0
 8004612:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004614:	9320      	str	r3, [sp, #128]	@ 0x80
 8004616:	f04f 33ff 	mov.w	r3, #4294967295
 800461a:	2200      	movs	r2, #0
 800461c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004620:	2312      	movs	r3, #18
 8004622:	e7d0      	b.n	80045c6 <_dtoa_r+0x23e>
 8004624:	2301      	movs	r3, #1
 8004626:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004628:	e7f5      	b.n	8004616 <_dtoa_r+0x28e>
 800462a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800462c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004630:	e7d7      	b.n	80045e2 <_dtoa_r+0x25a>
 8004632:	3101      	adds	r1, #1
 8004634:	0052      	lsls	r2, r2, #1
 8004636:	e7d8      	b.n	80045ea <_dtoa_r+0x262>
 8004638:	636f4361 	.word	0x636f4361
 800463c:	3fd287a7 	.word	0x3fd287a7
 8004640:	8b60c8b3 	.word	0x8b60c8b3
 8004644:	3fc68a28 	.word	0x3fc68a28
 8004648:	509f79fb 	.word	0x509f79fb
 800464c:	3fd34413 	.word	0x3fd34413
 8004650:	08007970 	.word	0x08007970
 8004654:	08007987 	.word	0x08007987
 8004658:	7ff00000 	.word	0x7ff00000
 800465c:	0800796c 	.word	0x0800796c
 8004660:	0800793b 	.word	0x0800793b
 8004664:	0800793a 	.word	0x0800793a
 8004668:	3ff80000 	.word	0x3ff80000
 800466c:	08007a80 	.word	0x08007a80
 8004670:	080079df 	.word	0x080079df
 8004674:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004678:	6018      	str	r0, [r3, #0]
 800467a:	9b07      	ldr	r3, [sp, #28]
 800467c:	2b0e      	cmp	r3, #14
 800467e:	f200 80a4 	bhi.w	80047ca <_dtoa_r+0x442>
 8004682:	2c00      	cmp	r4, #0
 8004684:	f000 80a1 	beq.w	80047ca <_dtoa_r+0x442>
 8004688:	2f00      	cmp	r7, #0
 800468a:	dd33      	ble.n	80046f4 <_dtoa_r+0x36c>
 800468c:	4b86      	ldr	r3, [pc, #536]	@ (80048a8 <_dtoa_r+0x520>)
 800468e:	f007 020f 	and.w	r2, r7, #15
 8004692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004696:	05f8      	lsls	r0, r7, #23
 8004698:	e9d3 3400 	ldrd	r3, r4, [r3]
 800469c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80046a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80046a4:	d516      	bpl.n	80046d4 <_dtoa_r+0x34c>
 80046a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80046aa:	4b80      	ldr	r3, [pc, #512]	@ (80048ac <_dtoa_r+0x524>)
 80046ac:	2603      	movs	r6, #3
 80046ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80046b2:	f7fc f83b 	bl	800072c <__aeabi_ddiv>
 80046b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046ba:	f004 040f 	and.w	r4, r4, #15
 80046be:	4d7b      	ldr	r5, [pc, #492]	@ (80048ac <_dtoa_r+0x524>)
 80046c0:	b954      	cbnz	r4, 80046d8 <_dtoa_r+0x350>
 80046c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046ca:	f7fc f82f 	bl	800072c <__aeabi_ddiv>
 80046ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046d2:	e028      	b.n	8004726 <_dtoa_r+0x39e>
 80046d4:	2602      	movs	r6, #2
 80046d6:	e7f2      	b.n	80046be <_dtoa_r+0x336>
 80046d8:	07e1      	lsls	r1, r4, #31
 80046da:	d508      	bpl.n	80046ee <_dtoa_r+0x366>
 80046dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80046e4:	f7fb fef8 	bl	80004d8 <__aeabi_dmul>
 80046e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046ec:	3601      	adds	r6, #1
 80046ee:	1064      	asrs	r4, r4, #1
 80046f0:	3508      	adds	r5, #8
 80046f2:	e7e5      	b.n	80046c0 <_dtoa_r+0x338>
 80046f4:	f000 80d2 	beq.w	800489c <_dtoa_r+0x514>
 80046f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80046fc:	427c      	negs	r4, r7
 80046fe:	4b6a      	ldr	r3, [pc, #424]	@ (80048a8 <_dtoa_r+0x520>)
 8004700:	f004 020f 	and.w	r2, r4, #15
 8004704:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470c:	f7fb fee4 	bl	80004d8 <__aeabi_dmul>
 8004710:	2602      	movs	r6, #2
 8004712:	2300      	movs	r3, #0
 8004714:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004718:	4d64      	ldr	r5, [pc, #400]	@ (80048ac <_dtoa_r+0x524>)
 800471a:	1124      	asrs	r4, r4, #4
 800471c:	2c00      	cmp	r4, #0
 800471e:	f040 80b2 	bne.w	8004886 <_dtoa_r+0x4fe>
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1d3      	bne.n	80046ce <_dtoa_r+0x346>
 8004726:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800472a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 80b7 	beq.w	80048a0 <_dtoa_r+0x518>
 8004732:	2200      	movs	r2, #0
 8004734:	4620      	mov	r0, r4
 8004736:	4629      	mov	r1, r5
 8004738:	4b5d      	ldr	r3, [pc, #372]	@ (80048b0 <_dtoa_r+0x528>)
 800473a:	f7fc f93f 	bl	80009bc <__aeabi_dcmplt>
 800473e:	2800      	cmp	r0, #0
 8004740:	f000 80ae 	beq.w	80048a0 <_dtoa_r+0x518>
 8004744:	9b07      	ldr	r3, [sp, #28]
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 80aa 	beq.w	80048a0 <_dtoa_r+0x518>
 800474c:	9b08      	ldr	r3, [sp, #32]
 800474e:	2b00      	cmp	r3, #0
 8004750:	dd37      	ble.n	80047c2 <_dtoa_r+0x43a>
 8004752:	1e7b      	subs	r3, r7, #1
 8004754:	4620      	mov	r0, r4
 8004756:	9304      	str	r3, [sp, #16]
 8004758:	2200      	movs	r2, #0
 800475a:	4629      	mov	r1, r5
 800475c:	4b55      	ldr	r3, [pc, #340]	@ (80048b4 <_dtoa_r+0x52c>)
 800475e:	f7fb febb 	bl	80004d8 <__aeabi_dmul>
 8004762:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004766:	9c08      	ldr	r4, [sp, #32]
 8004768:	3601      	adds	r6, #1
 800476a:	4630      	mov	r0, r6
 800476c:	f7fb fe4a 	bl	8000404 <__aeabi_i2d>
 8004770:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004774:	f7fb feb0 	bl	80004d8 <__aeabi_dmul>
 8004778:	2200      	movs	r2, #0
 800477a:	4b4f      	ldr	r3, [pc, #316]	@ (80048b8 <_dtoa_r+0x530>)
 800477c:	f7fb fcf6 	bl	800016c <__adddf3>
 8004780:	4605      	mov	r5, r0
 8004782:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004786:	2c00      	cmp	r4, #0
 8004788:	f040 809a 	bne.w	80048c0 <_dtoa_r+0x538>
 800478c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004790:	2200      	movs	r2, #0
 8004792:	4b4a      	ldr	r3, [pc, #296]	@ (80048bc <_dtoa_r+0x534>)
 8004794:	f7fb fce8 	bl	8000168 <__aeabi_dsub>
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80047a0:	462a      	mov	r2, r5
 80047a2:	4633      	mov	r3, r6
 80047a4:	f7fc f928 	bl	80009f8 <__aeabi_dcmpgt>
 80047a8:	2800      	cmp	r0, #0
 80047aa:	f040 828e 	bne.w	8004cca <_dtoa_r+0x942>
 80047ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047b2:	462a      	mov	r2, r5
 80047b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80047b8:	f7fc f900 	bl	80009bc <__aeabi_dcmplt>
 80047bc:	2800      	cmp	r0, #0
 80047be:	f040 8127 	bne.w	8004a10 <_dtoa_r+0x688>
 80047c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80047c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80047ca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f2c0 8163 	blt.w	8004a98 <_dtoa_r+0x710>
 80047d2:	2f0e      	cmp	r7, #14
 80047d4:	f300 8160 	bgt.w	8004a98 <_dtoa_r+0x710>
 80047d8:	4b33      	ldr	r3, [pc, #204]	@ (80048a8 <_dtoa_r+0x520>)
 80047da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80047de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047e2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80047e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	da03      	bge.n	80047f4 <_dtoa_r+0x46c>
 80047ec:	9b07      	ldr	r3, [sp, #28]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f340 8100 	ble.w	80049f4 <_dtoa_r+0x66c>
 80047f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80047f8:	4656      	mov	r6, sl
 80047fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047fe:	4620      	mov	r0, r4
 8004800:	4629      	mov	r1, r5
 8004802:	f7fb ff93 	bl	800072c <__aeabi_ddiv>
 8004806:	f7fc f917 	bl	8000a38 <__aeabi_d2iz>
 800480a:	4680      	mov	r8, r0
 800480c:	f7fb fdfa 	bl	8000404 <__aeabi_i2d>
 8004810:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004814:	f7fb fe60 	bl	80004d8 <__aeabi_dmul>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4620      	mov	r0, r4
 800481e:	4629      	mov	r1, r5
 8004820:	f7fb fca2 	bl	8000168 <__aeabi_dsub>
 8004824:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004828:	9d07      	ldr	r5, [sp, #28]
 800482a:	f806 4b01 	strb.w	r4, [r6], #1
 800482e:	eba6 040a 	sub.w	r4, r6, sl
 8004832:	42a5      	cmp	r5, r4
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	f040 8116 	bne.w	8004a68 <_dtoa_r+0x6e0>
 800483c:	f7fb fc96 	bl	800016c <__adddf3>
 8004840:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004844:	4604      	mov	r4, r0
 8004846:	460d      	mov	r5, r1
 8004848:	f7fc f8d6 	bl	80009f8 <__aeabi_dcmpgt>
 800484c:	2800      	cmp	r0, #0
 800484e:	f040 80f8 	bne.w	8004a42 <_dtoa_r+0x6ba>
 8004852:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004856:	4620      	mov	r0, r4
 8004858:	4629      	mov	r1, r5
 800485a:	f7fc f8a5 	bl	80009a8 <__aeabi_dcmpeq>
 800485e:	b118      	cbz	r0, 8004868 <_dtoa_r+0x4e0>
 8004860:	f018 0f01 	tst.w	r8, #1
 8004864:	f040 80ed 	bne.w	8004a42 <_dtoa_r+0x6ba>
 8004868:	4649      	mov	r1, r9
 800486a:	4658      	mov	r0, fp
 800486c:	f000 fc92 	bl	8005194 <_Bfree>
 8004870:	2300      	movs	r3, #0
 8004872:	7033      	strb	r3, [r6, #0]
 8004874:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004876:	3701      	adds	r7, #1
 8004878:	601f      	str	r7, [r3, #0]
 800487a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 8320 	beq.w	8004ec2 <_dtoa_r+0xb3a>
 8004882:	601e      	str	r6, [r3, #0]
 8004884:	e31d      	b.n	8004ec2 <_dtoa_r+0xb3a>
 8004886:	07e2      	lsls	r2, r4, #31
 8004888:	d505      	bpl.n	8004896 <_dtoa_r+0x50e>
 800488a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800488e:	f7fb fe23 	bl	80004d8 <__aeabi_dmul>
 8004892:	2301      	movs	r3, #1
 8004894:	3601      	adds	r6, #1
 8004896:	1064      	asrs	r4, r4, #1
 8004898:	3508      	adds	r5, #8
 800489a:	e73f      	b.n	800471c <_dtoa_r+0x394>
 800489c:	2602      	movs	r6, #2
 800489e:	e742      	b.n	8004726 <_dtoa_r+0x39e>
 80048a0:	9c07      	ldr	r4, [sp, #28]
 80048a2:	9704      	str	r7, [sp, #16]
 80048a4:	e761      	b.n	800476a <_dtoa_r+0x3e2>
 80048a6:	bf00      	nop
 80048a8:	08007a80 	.word	0x08007a80
 80048ac:	08007a58 	.word	0x08007a58
 80048b0:	3ff00000 	.word	0x3ff00000
 80048b4:	40240000 	.word	0x40240000
 80048b8:	401c0000 	.word	0x401c0000
 80048bc:	40140000 	.word	0x40140000
 80048c0:	4b70      	ldr	r3, [pc, #448]	@ (8004a84 <_dtoa_r+0x6fc>)
 80048c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80048c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80048c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80048cc:	4454      	add	r4, sl
 80048ce:	2900      	cmp	r1, #0
 80048d0:	d045      	beq.n	800495e <_dtoa_r+0x5d6>
 80048d2:	2000      	movs	r0, #0
 80048d4:	496c      	ldr	r1, [pc, #432]	@ (8004a88 <_dtoa_r+0x700>)
 80048d6:	f7fb ff29 	bl	800072c <__aeabi_ddiv>
 80048da:	4633      	mov	r3, r6
 80048dc:	462a      	mov	r2, r5
 80048de:	f7fb fc43 	bl	8000168 <__aeabi_dsub>
 80048e2:	4656      	mov	r6, sl
 80048e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80048e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048ec:	f7fc f8a4 	bl	8000a38 <__aeabi_d2iz>
 80048f0:	4605      	mov	r5, r0
 80048f2:	f7fb fd87 	bl	8000404 <__aeabi_i2d>
 80048f6:	4602      	mov	r2, r0
 80048f8:	460b      	mov	r3, r1
 80048fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048fe:	f7fb fc33 	bl	8000168 <__aeabi_dsub>
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	3530      	adds	r5, #48	@ 0x30
 8004908:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800490c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004910:	f806 5b01 	strb.w	r5, [r6], #1
 8004914:	f7fc f852 	bl	80009bc <__aeabi_dcmplt>
 8004918:	2800      	cmp	r0, #0
 800491a:	d163      	bne.n	80049e4 <_dtoa_r+0x65c>
 800491c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004920:	2000      	movs	r0, #0
 8004922:	495a      	ldr	r1, [pc, #360]	@ (8004a8c <_dtoa_r+0x704>)
 8004924:	f7fb fc20 	bl	8000168 <__aeabi_dsub>
 8004928:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800492c:	f7fc f846 	bl	80009bc <__aeabi_dcmplt>
 8004930:	2800      	cmp	r0, #0
 8004932:	f040 8087 	bne.w	8004a44 <_dtoa_r+0x6bc>
 8004936:	42a6      	cmp	r6, r4
 8004938:	f43f af43 	beq.w	80047c2 <_dtoa_r+0x43a>
 800493c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004940:	2200      	movs	r2, #0
 8004942:	4b53      	ldr	r3, [pc, #332]	@ (8004a90 <_dtoa_r+0x708>)
 8004944:	f7fb fdc8 	bl	80004d8 <__aeabi_dmul>
 8004948:	2200      	movs	r2, #0
 800494a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800494e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004952:	4b4f      	ldr	r3, [pc, #316]	@ (8004a90 <_dtoa_r+0x708>)
 8004954:	f7fb fdc0 	bl	80004d8 <__aeabi_dmul>
 8004958:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800495c:	e7c4      	b.n	80048e8 <_dtoa_r+0x560>
 800495e:	4631      	mov	r1, r6
 8004960:	4628      	mov	r0, r5
 8004962:	f7fb fdb9 	bl	80004d8 <__aeabi_dmul>
 8004966:	4656      	mov	r6, sl
 8004968:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800496c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800496e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004972:	f7fc f861 	bl	8000a38 <__aeabi_d2iz>
 8004976:	4605      	mov	r5, r0
 8004978:	f7fb fd44 	bl	8000404 <__aeabi_i2d>
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004984:	f7fb fbf0 	bl	8000168 <__aeabi_dsub>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	3530      	adds	r5, #48	@ 0x30
 800498e:	f806 5b01 	strb.w	r5, [r6], #1
 8004992:	42a6      	cmp	r6, r4
 8004994:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004998:	f04f 0200 	mov.w	r2, #0
 800499c:	d124      	bne.n	80049e8 <_dtoa_r+0x660>
 800499e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80049a2:	4b39      	ldr	r3, [pc, #228]	@ (8004a88 <_dtoa_r+0x700>)
 80049a4:	f7fb fbe2 	bl	800016c <__adddf3>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049b0:	f7fc f822 	bl	80009f8 <__aeabi_dcmpgt>
 80049b4:	2800      	cmp	r0, #0
 80049b6:	d145      	bne.n	8004a44 <_dtoa_r+0x6bc>
 80049b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80049bc:	2000      	movs	r0, #0
 80049be:	4932      	ldr	r1, [pc, #200]	@ (8004a88 <_dtoa_r+0x700>)
 80049c0:	f7fb fbd2 	bl	8000168 <__aeabi_dsub>
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049cc:	f7fb fff6 	bl	80009bc <__aeabi_dcmplt>
 80049d0:	2800      	cmp	r0, #0
 80049d2:	f43f aef6 	beq.w	80047c2 <_dtoa_r+0x43a>
 80049d6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80049d8:	1e73      	subs	r3, r6, #1
 80049da:	9313      	str	r3, [sp, #76]	@ 0x4c
 80049dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80049e0:	2b30      	cmp	r3, #48	@ 0x30
 80049e2:	d0f8      	beq.n	80049d6 <_dtoa_r+0x64e>
 80049e4:	9f04      	ldr	r7, [sp, #16]
 80049e6:	e73f      	b.n	8004868 <_dtoa_r+0x4e0>
 80049e8:	4b29      	ldr	r3, [pc, #164]	@ (8004a90 <_dtoa_r+0x708>)
 80049ea:	f7fb fd75 	bl	80004d8 <__aeabi_dmul>
 80049ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049f2:	e7bc      	b.n	800496e <_dtoa_r+0x5e6>
 80049f4:	d10c      	bne.n	8004a10 <_dtoa_r+0x688>
 80049f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049fa:	2200      	movs	r2, #0
 80049fc:	4b25      	ldr	r3, [pc, #148]	@ (8004a94 <_dtoa_r+0x70c>)
 80049fe:	f7fb fd6b 	bl	80004d8 <__aeabi_dmul>
 8004a02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a06:	f7fb ffed 	bl	80009e4 <__aeabi_dcmpge>
 8004a0a:	2800      	cmp	r0, #0
 8004a0c:	f000 815b 	beq.w	8004cc6 <_dtoa_r+0x93e>
 8004a10:	2400      	movs	r4, #0
 8004a12:	4625      	mov	r5, r4
 8004a14:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004a16:	4656      	mov	r6, sl
 8004a18:	43db      	mvns	r3, r3
 8004a1a:	9304      	str	r3, [sp, #16]
 8004a1c:	2700      	movs	r7, #0
 8004a1e:	4621      	mov	r1, r4
 8004a20:	4658      	mov	r0, fp
 8004a22:	f000 fbb7 	bl	8005194 <_Bfree>
 8004a26:	2d00      	cmp	r5, #0
 8004a28:	d0dc      	beq.n	80049e4 <_dtoa_r+0x65c>
 8004a2a:	b12f      	cbz	r7, 8004a38 <_dtoa_r+0x6b0>
 8004a2c:	42af      	cmp	r7, r5
 8004a2e:	d003      	beq.n	8004a38 <_dtoa_r+0x6b0>
 8004a30:	4639      	mov	r1, r7
 8004a32:	4658      	mov	r0, fp
 8004a34:	f000 fbae 	bl	8005194 <_Bfree>
 8004a38:	4629      	mov	r1, r5
 8004a3a:	4658      	mov	r0, fp
 8004a3c:	f000 fbaa 	bl	8005194 <_Bfree>
 8004a40:	e7d0      	b.n	80049e4 <_dtoa_r+0x65c>
 8004a42:	9704      	str	r7, [sp, #16]
 8004a44:	4633      	mov	r3, r6
 8004a46:	461e      	mov	r6, r3
 8004a48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004a4c:	2a39      	cmp	r2, #57	@ 0x39
 8004a4e:	d107      	bne.n	8004a60 <_dtoa_r+0x6d8>
 8004a50:	459a      	cmp	sl, r3
 8004a52:	d1f8      	bne.n	8004a46 <_dtoa_r+0x6be>
 8004a54:	9a04      	ldr	r2, [sp, #16]
 8004a56:	3201      	adds	r2, #1
 8004a58:	9204      	str	r2, [sp, #16]
 8004a5a:	2230      	movs	r2, #48	@ 0x30
 8004a5c:	f88a 2000 	strb.w	r2, [sl]
 8004a60:	781a      	ldrb	r2, [r3, #0]
 8004a62:	3201      	adds	r2, #1
 8004a64:	701a      	strb	r2, [r3, #0]
 8004a66:	e7bd      	b.n	80049e4 <_dtoa_r+0x65c>
 8004a68:	2200      	movs	r2, #0
 8004a6a:	4b09      	ldr	r3, [pc, #36]	@ (8004a90 <_dtoa_r+0x708>)
 8004a6c:	f7fb fd34 	bl	80004d8 <__aeabi_dmul>
 8004a70:	2200      	movs	r2, #0
 8004a72:	2300      	movs	r3, #0
 8004a74:	4604      	mov	r4, r0
 8004a76:	460d      	mov	r5, r1
 8004a78:	f7fb ff96 	bl	80009a8 <__aeabi_dcmpeq>
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	f43f aebc 	beq.w	80047fa <_dtoa_r+0x472>
 8004a82:	e6f1      	b.n	8004868 <_dtoa_r+0x4e0>
 8004a84:	08007a80 	.word	0x08007a80
 8004a88:	3fe00000 	.word	0x3fe00000
 8004a8c:	3ff00000 	.word	0x3ff00000
 8004a90:	40240000 	.word	0x40240000
 8004a94:	40140000 	.word	0x40140000
 8004a98:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004a9a:	2a00      	cmp	r2, #0
 8004a9c:	f000 80db 	beq.w	8004c56 <_dtoa_r+0x8ce>
 8004aa0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004aa2:	2a01      	cmp	r2, #1
 8004aa4:	f300 80bf 	bgt.w	8004c26 <_dtoa_r+0x89e>
 8004aa8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004aaa:	2a00      	cmp	r2, #0
 8004aac:	f000 80b7 	beq.w	8004c1e <_dtoa_r+0x896>
 8004ab0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004ab4:	4646      	mov	r6, r8
 8004ab6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004ab8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004aba:	2101      	movs	r1, #1
 8004abc:	441a      	add	r2, r3
 8004abe:	4658      	mov	r0, fp
 8004ac0:	4498      	add	r8, r3
 8004ac2:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ac4:	f000 fc64 	bl	8005390 <__i2b>
 8004ac8:	4605      	mov	r5, r0
 8004aca:	b15e      	cbz	r6, 8004ae4 <_dtoa_r+0x75c>
 8004acc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	dd08      	ble.n	8004ae4 <_dtoa_r+0x75c>
 8004ad2:	42b3      	cmp	r3, r6
 8004ad4:	bfa8      	it	ge
 8004ad6:	4633      	movge	r3, r6
 8004ad8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ada:	eba8 0803 	sub.w	r8, r8, r3
 8004ade:	1af6      	subs	r6, r6, r3
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ae6:	b1f3      	cbz	r3, 8004b26 <_dtoa_r+0x79e>
 8004ae8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f000 80b7 	beq.w	8004c5e <_dtoa_r+0x8d6>
 8004af0:	b18c      	cbz	r4, 8004b16 <_dtoa_r+0x78e>
 8004af2:	4629      	mov	r1, r5
 8004af4:	4622      	mov	r2, r4
 8004af6:	4658      	mov	r0, fp
 8004af8:	f000 fd08 	bl	800550c <__pow5mult>
 8004afc:	464a      	mov	r2, r9
 8004afe:	4601      	mov	r1, r0
 8004b00:	4605      	mov	r5, r0
 8004b02:	4658      	mov	r0, fp
 8004b04:	f000 fc5a 	bl	80053bc <__multiply>
 8004b08:	4649      	mov	r1, r9
 8004b0a:	9004      	str	r0, [sp, #16]
 8004b0c:	4658      	mov	r0, fp
 8004b0e:	f000 fb41 	bl	8005194 <_Bfree>
 8004b12:	9b04      	ldr	r3, [sp, #16]
 8004b14:	4699      	mov	r9, r3
 8004b16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b18:	1b1a      	subs	r2, r3, r4
 8004b1a:	d004      	beq.n	8004b26 <_dtoa_r+0x79e>
 8004b1c:	4649      	mov	r1, r9
 8004b1e:	4658      	mov	r0, fp
 8004b20:	f000 fcf4 	bl	800550c <__pow5mult>
 8004b24:	4681      	mov	r9, r0
 8004b26:	2101      	movs	r1, #1
 8004b28:	4658      	mov	r0, fp
 8004b2a:	f000 fc31 	bl	8005390 <__i2b>
 8004b2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b30:	4604      	mov	r4, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 81c9 	beq.w	8004eca <_dtoa_r+0xb42>
 8004b38:	461a      	mov	r2, r3
 8004b3a:	4601      	mov	r1, r0
 8004b3c:	4658      	mov	r0, fp
 8004b3e:	f000 fce5 	bl	800550c <__pow5mult>
 8004b42:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004b44:	4604      	mov	r4, r0
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	f300 808f 	bgt.w	8004c6a <_dtoa_r+0x8e2>
 8004b4c:	9b02      	ldr	r3, [sp, #8]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f040 8087 	bne.w	8004c62 <_dtoa_r+0x8da>
 8004b54:	9b03      	ldr	r3, [sp, #12]
 8004b56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f040 8083 	bne.w	8004c66 <_dtoa_r+0x8de>
 8004b60:	9b03      	ldr	r3, [sp, #12]
 8004b62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b66:	0d1b      	lsrs	r3, r3, #20
 8004b68:	051b      	lsls	r3, r3, #20
 8004b6a:	b12b      	cbz	r3, 8004b78 <_dtoa_r+0x7f0>
 8004b6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b6e:	f108 0801 	add.w	r8, r8, #1
 8004b72:	3301      	adds	r3, #1
 8004b74:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b76:	2301      	movs	r3, #1
 8004b78:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 81aa 	beq.w	8004ed6 <_dtoa_r+0xb4e>
 8004b82:	6923      	ldr	r3, [r4, #16]
 8004b84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004b88:	6918      	ldr	r0, [r3, #16]
 8004b8a:	f000 fbb5 	bl	80052f8 <__hi0bits>
 8004b8e:	f1c0 0020 	rsb	r0, r0, #32
 8004b92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b94:	4418      	add	r0, r3
 8004b96:	f010 001f 	ands.w	r0, r0, #31
 8004b9a:	d071      	beq.n	8004c80 <_dtoa_r+0x8f8>
 8004b9c:	f1c0 0320 	rsb	r3, r0, #32
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	dd65      	ble.n	8004c70 <_dtoa_r+0x8e8>
 8004ba4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ba6:	f1c0 001c 	rsb	r0, r0, #28
 8004baa:	4403      	add	r3, r0
 8004bac:	4480      	add	r8, r0
 8004bae:	4406      	add	r6, r0
 8004bb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bb2:	f1b8 0f00 	cmp.w	r8, #0
 8004bb6:	dd05      	ble.n	8004bc4 <_dtoa_r+0x83c>
 8004bb8:	4649      	mov	r1, r9
 8004bba:	4642      	mov	r2, r8
 8004bbc:	4658      	mov	r0, fp
 8004bbe:	f000 fcff 	bl	80055c0 <__lshift>
 8004bc2:	4681      	mov	r9, r0
 8004bc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	dd05      	ble.n	8004bd6 <_dtoa_r+0x84e>
 8004bca:	4621      	mov	r1, r4
 8004bcc:	461a      	mov	r2, r3
 8004bce:	4658      	mov	r0, fp
 8004bd0:	f000 fcf6 	bl	80055c0 <__lshift>
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d053      	beq.n	8004c84 <_dtoa_r+0x8fc>
 8004bdc:	4621      	mov	r1, r4
 8004bde:	4648      	mov	r0, r9
 8004be0:	f000 fd5a 	bl	8005698 <__mcmp>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	da4d      	bge.n	8004c84 <_dtoa_r+0x8fc>
 8004be8:	1e7b      	subs	r3, r7, #1
 8004bea:	4649      	mov	r1, r9
 8004bec:	9304      	str	r3, [sp, #16]
 8004bee:	220a      	movs	r2, #10
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	4658      	mov	r0, fp
 8004bf4:	f000 faf0 	bl	80051d8 <__multadd>
 8004bf8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004bfa:	4681      	mov	r9, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 816c 	beq.w	8004eda <_dtoa_r+0xb52>
 8004c02:	2300      	movs	r3, #0
 8004c04:	4629      	mov	r1, r5
 8004c06:	220a      	movs	r2, #10
 8004c08:	4658      	mov	r0, fp
 8004c0a:	f000 fae5 	bl	80051d8 <__multadd>
 8004c0e:	9b08      	ldr	r3, [sp, #32]
 8004c10:	4605      	mov	r5, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	dc61      	bgt.n	8004cda <_dtoa_r+0x952>
 8004c16:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	dc3b      	bgt.n	8004c94 <_dtoa_r+0x90c>
 8004c1c:	e05d      	b.n	8004cda <_dtoa_r+0x952>
 8004c1e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004c20:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004c24:	e746      	b.n	8004ab4 <_dtoa_r+0x72c>
 8004c26:	9b07      	ldr	r3, [sp, #28]
 8004c28:	1e5c      	subs	r4, r3, #1
 8004c2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c2c:	42a3      	cmp	r3, r4
 8004c2e:	bfbf      	itttt	lt
 8004c30:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004c32:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004c34:	1ae3      	sublt	r3, r4, r3
 8004c36:	18d2      	addlt	r2, r2, r3
 8004c38:	bfa8      	it	ge
 8004c3a:	1b1c      	subge	r4, r3, r4
 8004c3c:	9b07      	ldr	r3, [sp, #28]
 8004c3e:	bfbe      	ittt	lt
 8004c40:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004c42:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004c44:	2400      	movlt	r4, #0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	bfb5      	itete	lt
 8004c4a:	eba8 0603 	sublt.w	r6, r8, r3
 8004c4e:	4646      	movge	r6, r8
 8004c50:	2300      	movlt	r3, #0
 8004c52:	9b07      	ldrge	r3, [sp, #28]
 8004c54:	e730      	b.n	8004ab8 <_dtoa_r+0x730>
 8004c56:	4646      	mov	r6, r8
 8004c58:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004c5a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004c5c:	e735      	b.n	8004aca <_dtoa_r+0x742>
 8004c5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004c60:	e75c      	b.n	8004b1c <_dtoa_r+0x794>
 8004c62:	2300      	movs	r3, #0
 8004c64:	e788      	b.n	8004b78 <_dtoa_r+0x7f0>
 8004c66:	9b02      	ldr	r3, [sp, #8]
 8004c68:	e786      	b.n	8004b78 <_dtoa_r+0x7f0>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c6e:	e788      	b.n	8004b82 <_dtoa_r+0x7fa>
 8004c70:	d09f      	beq.n	8004bb2 <_dtoa_r+0x82a>
 8004c72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c74:	331c      	adds	r3, #28
 8004c76:	441a      	add	r2, r3
 8004c78:	4498      	add	r8, r3
 8004c7a:	441e      	add	r6, r3
 8004c7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c7e:	e798      	b.n	8004bb2 <_dtoa_r+0x82a>
 8004c80:	4603      	mov	r3, r0
 8004c82:	e7f6      	b.n	8004c72 <_dtoa_r+0x8ea>
 8004c84:	9b07      	ldr	r3, [sp, #28]
 8004c86:	9704      	str	r7, [sp, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	dc20      	bgt.n	8004cce <_dtoa_r+0x946>
 8004c8c:	9308      	str	r3, [sp, #32]
 8004c8e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	dd1e      	ble.n	8004cd2 <_dtoa_r+0x94a>
 8004c94:	9b08      	ldr	r3, [sp, #32]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f47f aebc 	bne.w	8004a14 <_dtoa_r+0x68c>
 8004c9c:	4621      	mov	r1, r4
 8004c9e:	2205      	movs	r2, #5
 8004ca0:	4658      	mov	r0, fp
 8004ca2:	f000 fa99 	bl	80051d8 <__multadd>
 8004ca6:	4601      	mov	r1, r0
 8004ca8:	4604      	mov	r4, r0
 8004caa:	4648      	mov	r0, r9
 8004cac:	f000 fcf4 	bl	8005698 <__mcmp>
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	f77f aeaf 	ble.w	8004a14 <_dtoa_r+0x68c>
 8004cb6:	2331      	movs	r3, #49	@ 0x31
 8004cb8:	4656      	mov	r6, sl
 8004cba:	f806 3b01 	strb.w	r3, [r6], #1
 8004cbe:	9b04      	ldr	r3, [sp, #16]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	9304      	str	r3, [sp, #16]
 8004cc4:	e6aa      	b.n	8004a1c <_dtoa_r+0x694>
 8004cc6:	9c07      	ldr	r4, [sp, #28]
 8004cc8:	9704      	str	r7, [sp, #16]
 8004cca:	4625      	mov	r5, r4
 8004ccc:	e7f3      	b.n	8004cb6 <_dtoa_r+0x92e>
 8004cce:	9b07      	ldr	r3, [sp, #28]
 8004cd0:	9308      	str	r3, [sp, #32]
 8004cd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 8104 	beq.w	8004ee2 <_dtoa_r+0xb5a>
 8004cda:	2e00      	cmp	r6, #0
 8004cdc:	dd05      	ble.n	8004cea <_dtoa_r+0x962>
 8004cde:	4629      	mov	r1, r5
 8004ce0:	4632      	mov	r2, r6
 8004ce2:	4658      	mov	r0, fp
 8004ce4:	f000 fc6c 	bl	80055c0 <__lshift>
 8004ce8:	4605      	mov	r5, r0
 8004cea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d05a      	beq.n	8004da6 <_dtoa_r+0xa1e>
 8004cf0:	4658      	mov	r0, fp
 8004cf2:	6869      	ldr	r1, [r5, #4]
 8004cf4:	f000 fa0e 	bl	8005114 <_Balloc>
 8004cf8:	4606      	mov	r6, r0
 8004cfa:	b928      	cbnz	r0, 8004d08 <_dtoa_r+0x980>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004d02:	4b83      	ldr	r3, [pc, #524]	@ (8004f10 <_dtoa_r+0xb88>)
 8004d04:	f7ff bb54 	b.w	80043b0 <_dtoa_r+0x28>
 8004d08:	692a      	ldr	r2, [r5, #16]
 8004d0a:	f105 010c 	add.w	r1, r5, #12
 8004d0e:	3202      	adds	r2, #2
 8004d10:	0092      	lsls	r2, r2, #2
 8004d12:	300c      	adds	r0, #12
 8004d14:	f001 ff5e 	bl	8006bd4 <memcpy>
 8004d18:	2201      	movs	r2, #1
 8004d1a:	4631      	mov	r1, r6
 8004d1c:	4658      	mov	r0, fp
 8004d1e:	f000 fc4f 	bl	80055c0 <__lshift>
 8004d22:	462f      	mov	r7, r5
 8004d24:	4605      	mov	r5, r0
 8004d26:	f10a 0301 	add.w	r3, sl, #1
 8004d2a:	9307      	str	r3, [sp, #28]
 8004d2c:	9b08      	ldr	r3, [sp, #32]
 8004d2e:	4453      	add	r3, sl
 8004d30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d32:	9b02      	ldr	r3, [sp, #8]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d3a:	9b07      	ldr	r3, [sp, #28]
 8004d3c:	4621      	mov	r1, r4
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	4648      	mov	r0, r9
 8004d42:	9302      	str	r3, [sp, #8]
 8004d44:	f7ff fa96 	bl	8004274 <quorem>
 8004d48:	4639      	mov	r1, r7
 8004d4a:	9008      	str	r0, [sp, #32]
 8004d4c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004d50:	4648      	mov	r0, r9
 8004d52:	f000 fca1 	bl	8005698 <__mcmp>
 8004d56:	462a      	mov	r2, r5
 8004d58:	9009      	str	r0, [sp, #36]	@ 0x24
 8004d5a:	4621      	mov	r1, r4
 8004d5c:	4658      	mov	r0, fp
 8004d5e:	f000 fcb7 	bl	80056d0 <__mdiff>
 8004d62:	68c2      	ldr	r2, [r0, #12]
 8004d64:	4606      	mov	r6, r0
 8004d66:	bb02      	cbnz	r2, 8004daa <_dtoa_r+0xa22>
 8004d68:	4601      	mov	r1, r0
 8004d6a:	4648      	mov	r0, r9
 8004d6c:	f000 fc94 	bl	8005698 <__mcmp>
 8004d70:	4602      	mov	r2, r0
 8004d72:	4631      	mov	r1, r6
 8004d74:	4658      	mov	r0, fp
 8004d76:	920c      	str	r2, [sp, #48]	@ 0x30
 8004d78:	f000 fa0c 	bl	8005194 <_Bfree>
 8004d7c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004d7e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004d80:	9e07      	ldr	r6, [sp, #28]
 8004d82:	ea43 0102 	orr.w	r1, r3, r2
 8004d86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d88:	4319      	orrs	r1, r3
 8004d8a:	d110      	bne.n	8004dae <_dtoa_r+0xa26>
 8004d8c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004d90:	d029      	beq.n	8004de6 <_dtoa_r+0xa5e>
 8004d92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	dd02      	ble.n	8004d9e <_dtoa_r+0xa16>
 8004d98:	9b08      	ldr	r3, [sp, #32]
 8004d9a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004d9e:	9b02      	ldr	r3, [sp, #8]
 8004da0:	f883 8000 	strb.w	r8, [r3]
 8004da4:	e63b      	b.n	8004a1e <_dtoa_r+0x696>
 8004da6:	4628      	mov	r0, r5
 8004da8:	e7bb      	b.n	8004d22 <_dtoa_r+0x99a>
 8004daa:	2201      	movs	r2, #1
 8004dac:	e7e1      	b.n	8004d72 <_dtoa_r+0x9ea>
 8004dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	db04      	blt.n	8004dbe <_dtoa_r+0xa36>
 8004db4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8004db6:	430b      	orrs	r3, r1
 8004db8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004dba:	430b      	orrs	r3, r1
 8004dbc:	d120      	bne.n	8004e00 <_dtoa_r+0xa78>
 8004dbe:	2a00      	cmp	r2, #0
 8004dc0:	dded      	ble.n	8004d9e <_dtoa_r+0xa16>
 8004dc2:	4649      	mov	r1, r9
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	4658      	mov	r0, fp
 8004dc8:	f000 fbfa 	bl	80055c0 <__lshift>
 8004dcc:	4621      	mov	r1, r4
 8004dce:	4681      	mov	r9, r0
 8004dd0:	f000 fc62 	bl	8005698 <__mcmp>
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	dc03      	bgt.n	8004de0 <_dtoa_r+0xa58>
 8004dd8:	d1e1      	bne.n	8004d9e <_dtoa_r+0xa16>
 8004dda:	f018 0f01 	tst.w	r8, #1
 8004dde:	d0de      	beq.n	8004d9e <_dtoa_r+0xa16>
 8004de0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004de4:	d1d8      	bne.n	8004d98 <_dtoa_r+0xa10>
 8004de6:	2339      	movs	r3, #57	@ 0x39
 8004de8:	9a02      	ldr	r2, [sp, #8]
 8004dea:	7013      	strb	r3, [r2, #0]
 8004dec:	4633      	mov	r3, r6
 8004dee:	461e      	mov	r6, r3
 8004df0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004df4:	3b01      	subs	r3, #1
 8004df6:	2a39      	cmp	r2, #57	@ 0x39
 8004df8:	d052      	beq.n	8004ea0 <_dtoa_r+0xb18>
 8004dfa:	3201      	adds	r2, #1
 8004dfc:	701a      	strb	r2, [r3, #0]
 8004dfe:	e60e      	b.n	8004a1e <_dtoa_r+0x696>
 8004e00:	2a00      	cmp	r2, #0
 8004e02:	dd07      	ble.n	8004e14 <_dtoa_r+0xa8c>
 8004e04:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004e08:	d0ed      	beq.n	8004de6 <_dtoa_r+0xa5e>
 8004e0a:	9a02      	ldr	r2, [sp, #8]
 8004e0c:	f108 0301 	add.w	r3, r8, #1
 8004e10:	7013      	strb	r3, [r2, #0]
 8004e12:	e604      	b.n	8004a1e <_dtoa_r+0x696>
 8004e14:	9b07      	ldr	r3, [sp, #28]
 8004e16:	9a07      	ldr	r2, [sp, #28]
 8004e18:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004e1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d028      	beq.n	8004e74 <_dtoa_r+0xaec>
 8004e22:	4649      	mov	r1, r9
 8004e24:	2300      	movs	r3, #0
 8004e26:	220a      	movs	r2, #10
 8004e28:	4658      	mov	r0, fp
 8004e2a:	f000 f9d5 	bl	80051d8 <__multadd>
 8004e2e:	42af      	cmp	r7, r5
 8004e30:	4681      	mov	r9, r0
 8004e32:	f04f 0300 	mov.w	r3, #0
 8004e36:	f04f 020a 	mov.w	r2, #10
 8004e3a:	4639      	mov	r1, r7
 8004e3c:	4658      	mov	r0, fp
 8004e3e:	d107      	bne.n	8004e50 <_dtoa_r+0xac8>
 8004e40:	f000 f9ca 	bl	80051d8 <__multadd>
 8004e44:	4607      	mov	r7, r0
 8004e46:	4605      	mov	r5, r0
 8004e48:	9b07      	ldr	r3, [sp, #28]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	9307      	str	r3, [sp, #28]
 8004e4e:	e774      	b.n	8004d3a <_dtoa_r+0x9b2>
 8004e50:	f000 f9c2 	bl	80051d8 <__multadd>
 8004e54:	4629      	mov	r1, r5
 8004e56:	4607      	mov	r7, r0
 8004e58:	2300      	movs	r3, #0
 8004e5a:	220a      	movs	r2, #10
 8004e5c:	4658      	mov	r0, fp
 8004e5e:	f000 f9bb 	bl	80051d8 <__multadd>
 8004e62:	4605      	mov	r5, r0
 8004e64:	e7f0      	b.n	8004e48 <_dtoa_r+0xac0>
 8004e66:	9b08      	ldr	r3, [sp, #32]
 8004e68:	2700      	movs	r7, #0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	bfcc      	ite	gt
 8004e6e:	461e      	movgt	r6, r3
 8004e70:	2601      	movle	r6, #1
 8004e72:	4456      	add	r6, sl
 8004e74:	4649      	mov	r1, r9
 8004e76:	2201      	movs	r2, #1
 8004e78:	4658      	mov	r0, fp
 8004e7a:	f000 fba1 	bl	80055c0 <__lshift>
 8004e7e:	4621      	mov	r1, r4
 8004e80:	4681      	mov	r9, r0
 8004e82:	f000 fc09 	bl	8005698 <__mcmp>
 8004e86:	2800      	cmp	r0, #0
 8004e88:	dcb0      	bgt.n	8004dec <_dtoa_r+0xa64>
 8004e8a:	d102      	bne.n	8004e92 <_dtoa_r+0xb0a>
 8004e8c:	f018 0f01 	tst.w	r8, #1
 8004e90:	d1ac      	bne.n	8004dec <_dtoa_r+0xa64>
 8004e92:	4633      	mov	r3, r6
 8004e94:	461e      	mov	r6, r3
 8004e96:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e9a:	2a30      	cmp	r2, #48	@ 0x30
 8004e9c:	d0fa      	beq.n	8004e94 <_dtoa_r+0xb0c>
 8004e9e:	e5be      	b.n	8004a1e <_dtoa_r+0x696>
 8004ea0:	459a      	cmp	sl, r3
 8004ea2:	d1a4      	bne.n	8004dee <_dtoa_r+0xa66>
 8004ea4:	9b04      	ldr	r3, [sp, #16]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	9304      	str	r3, [sp, #16]
 8004eaa:	2331      	movs	r3, #49	@ 0x31
 8004eac:	f88a 3000 	strb.w	r3, [sl]
 8004eb0:	e5b5      	b.n	8004a1e <_dtoa_r+0x696>
 8004eb2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004eb4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004f14 <_dtoa_r+0xb8c>
 8004eb8:	b11b      	cbz	r3, 8004ec2 <_dtoa_r+0xb3a>
 8004eba:	f10a 0308 	add.w	r3, sl, #8
 8004ebe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	4650      	mov	r0, sl
 8004ec4:	b017      	add	sp, #92	@ 0x5c
 8004ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	f77f ae3d 	ble.w	8004b4c <_dtoa_r+0x7c4>
 8004ed2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ed4:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ed6:	2001      	movs	r0, #1
 8004ed8:	e65b      	b.n	8004b92 <_dtoa_r+0x80a>
 8004eda:	9b08      	ldr	r3, [sp, #32]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f77f aed6 	ble.w	8004c8e <_dtoa_r+0x906>
 8004ee2:	4656      	mov	r6, sl
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	4648      	mov	r0, r9
 8004ee8:	f7ff f9c4 	bl	8004274 <quorem>
 8004eec:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004ef0:	9b08      	ldr	r3, [sp, #32]
 8004ef2:	f806 8b01 	strb.w	r8, [r6], #1
 8004ef6:	eba6 020a 	sub.w	r2, r6, sl
 8004efa:	4293      	cmp	r3, r2
 8004efc:	ddb3      	ble.n	8004e66 <_dtoa_r+0xade>
 8004efe:	4649      	mov	r1, r9
 8004f00:	2300      	movs	r3, #0
 8004f02:	220a      	movs	r2, #10
 8004f04:	4658      	mov	r0, fp
 8004f06:	f000 f967 	bl	80051d8 <__multadd>
 8004f0a:	4681      	mov	r9, r0
 8004f0c:	e7ea      	b.n	8004ee4 <_dtoa_r+0xb5c>
 8004f0e:	bf00      	nop
 8004f10:	080079df 	.word	0x080079df
 8004f14:	08007963 	.word	0x08007963

08004f18 <_free_r>:
 8004f18:	b538      	push	{r3, r4, r5, lr}
 8004f1a:	4605      	mov	r5, r0
 8004f1c:	2900      	cmp	r1, #0
 8004f1e:	d040      	beq.n	8004fa2 <_free_r+0x8a>
 8004f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f24:	1f0c      	subs	r4, r1, #4
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	bfb8      	it	lt
 8004f2a:	18e4      	addlt	r4, r4, r3
 8004f2c:	f000 f8e6 	bl	80050fc <__malloc_lock>
 8004f30:	4a1c      	ldr	r2, [pc, #112]	@ (8004fa4 <_free_r+0x8c>)
 8004f32:	6813      	ldr	r3, [r2, #0]
 8004f34:	b933      	cbnz	r3, 8004f44 <_free_r+0x2c>
 8004f36:	6063      	str	r3, [r4, #4]
 8004f38:	6014      	str	r4, [r2, #0]
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f40:	f000 b8e2 	b.w	8005108 <__malloc_unlock>
 8004f44:	42a3      	cmp	r3, r4
 8004f46:	d908      	bls.n	8004f5a <_free_r+0x42>
 8004f48:	6820      	ldr	r0, [r4, #0]
 8004f4a:	1821      	adds	r1, r4, r0
 8004f4c:	428b      	cmp	r3, r1
 8004f4e:	bf01      	itttt	eq
 8004f50:	6819      	ldreq	r1, [r3, #0]
 8004f52:	685b      	ldreq	r3, [r3, #4]
 8004f54:	1809      	addeq	r1, r1, r0
 8004f56:	6021      	streq	r1, [r4, #0]
 8004f58:	e7ed      	b.n	8004f36 <_free_r+0x1e>
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	b10b      	cbz	r3, 8004f64 <_free_r+0x4c>
 8004f60:	42a3      	cmp	r3, r4
 8004f62:	d9fa      	bls.n	8004f5a <_free_r+0x42>
 8004f64:	6811      	ldr	r1, [r2, #0]
 8004f66:	1850      	adds	r0, r2, r1
 8004f68:	42a0      	cmp	r0, r4
 8004f6a:	d10b      	bne.n	8004f84 <_free_r+0x6c>
 8004f6c:	6820      	ldr	r0, [r4, #0]
 8004f6e:	4401      	add	r1, r0
 8004f70:	1850      	adds	r0, r2, r1
 8004f72:	4283      	cmp	r3, r0
 8004f74:	6011      	str	r1, [r2, #0]
 8004f76:	d1e0      	bne.n	8004f3a <_free_r+0x22>
 8004f78:	6818      	ldr	r0, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	4408      	add	r0, r1
 8004f7e:	6010      	str	r0, [r2, #0]
 8004f80:	6053      	str	r3, [r2, #4]
 8004f82:	e7da      	b.n	8004f3a <_free_r+0x22>
 8004f84:	d902      	bls.n	8004f8c <_free_r+0x74>
 8004f86:	230c      	movs	r3, #12
 8004f88:	602b      	str	r3, [r5, #0]
 8004f8a:	e7d6      	b.n	8004f3a <_free_r+0x22>
 8004f8c:	6820      	ldr	r0, [r4, #0]
 8004f8e:	1821      	adds	r1, r4, r0
 8004f90:	428b      	cmp	r3, r1
 8004f92:	bf01      	itttt	eq
 8004f94:	6819      	ldreq	r1, [r3, #0]
 8004f96:	685b      	ldreq	r3, [r3, #4]
 8004f98:	1809      	addeq	r1, r1, r0
 8004f9a:	6021      	streq	r1, [r4, #0]
 8004f9c:	6063      	str	r3, [r4, #4]
 8004f9e:	6054      	str	r4, [r2, #4]
 8004fa0:	e7cb      	b.n	8004f3a <_free_r+0x22>
 8004fa2:	bd38      	pop	{r3, r4, r5, pc}
 8004fa4:	20000394 	.word	0x20000394

08004fa8 <malloc>:
 8004fa8:	4b02      	ldr	r3, [pc, #8]	@ (8004fb4 <malloc+0xc>)
 8004faa:	4601      	mov	r1, r0
 8004fac:	6818      	ldr	r0, [r3, #0]
 8004fae:	f000 b825 	b.w	8004ffc <_malloc_r>
 8004fb2:	bf00      	nop
 8004fb4:	20000018 	.word	0x20000018

08004fb8 <sbrk_aligned>:
 8004fb8:	b570      	push	{r4, r5, r6, lr}
 8004fba:	4e0f      	ldr	r6, [pc, #60]	@ (8004ff8 <sbrk_aligned+0x40>)
 8004fbc:	460c      	mov	r4, r1
 8004fbe:	6831      	ldr	r1, [r6, #0]
 8004fc0:	4605      	mov	r5, r0
 8004fc2:	b911      	cbnz	r1, 8004fca <sbrk_aligned+0x12>
 8004fc4:	f001 fdf6 	bl	8006bb4 <_sbrk_r>
 8004fc8:	6030      	str	r0, [r6, #0]
 8004fca:	4621      	mov	r1, r4
 8004fcc:	4628      	mov	r0, r5
 8004fce:	f001 fdf1 	bl	8006bb4 <_sbrk_r>
 8004fd2:	1c43      	adds	r3, r0, #1
 8004fd4:	d103      	bne.n	8004fde <sbrk_aligned+0x26>
 8004fd6:	f04f 34ff 	mov.w	r4, #4294967295
 8004fda:	4620      	mov	r0, r4
 8004fdc:	bd70      	pop	{r4, r5, r6, pc}
 8004fde:	1cc4      	adds	r4, r0, #3
 8004fe0:	f024 0403 	bic.w	r4, r4, #3
 8004fe4:	42a0      	cmp	r0, r4
 8004fe6:	d0f8      	beq.n	8004fda <sbrk_aligned+0x22>
 8004fe8:	1a21      	subs	r1, r4, r0
 8004fea:	4628      	mov	r0, r5
 8004fec:	f001 fde2 	bl	8006bb4 <_sbrk_r>
 8004ff0:	3001      	adds	r0, #1
 8004ff2:	d1f2      	bne.n	8004fda <sbrk_aligned+0x22>
 8004ff4:	e7ef      	b.n	8004fd6 <sbrk_aligned+0x1e>
 8004ff6:	bf00      	nop
 8004ff8:	20000390 	.word	0x20000390

08004ffc <_malloc_r>:
 8004ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005000:	1ccd      	adds	r5, r1, #3
 8005002:	f025 0503 	bic.w	r5, r5, #3
 8005006:	3508      	adds	r5, #8
 8005008:	2d0c      	cmp	r5, #12
 800500a:	bf38      	it	cc
 800500c:	250c      	movcc	r5, #12
 800500e:	2d00      	cmp	r5, #0
 8005010:	4606      	mov	r6, r0
 8005012:	db01      	blt.n	8005018 <_malloc_r+0x1c>
 8005014:	42a9      	cmp	r1, r5
 8005016:	d904      	bls.n	8005022 <_malloc_r+0x26>
 8005018:	230c      	movs	r3, #12
 800501a:	6033      	str	r3, [r6, #0]
 800501c:	2000      	movs	r0, #0
 800501e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005022:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80050f8 <_malloc_r+0xfc>
 8005026:	f000 f869 	bl	80050fc <__malloc_lock>
 800502a:	f8d8 3000 	ldr.w	r3, [r8]
 800502e:	461c      	mov	r4, r3
 8005030:	bb44      	cbnz	r4, 8005084 <_malloc_r+0x88>
 8005032:	4629      	mov	r1, r5
 8005034:	4630      	mov	r0, r6
 8005036:	f7ff ffbf 	bl	8004fb8 <sbrk_aligned>
 800503a:	1c43      	adds	r3, r0, #1
 800503c:	4604      	mov	r4, r0
 800503e:	d158      	bne.n	80050f2 <_malloc_r+0xf6>
 8005040:	f8d8 4000 	ldr.w	r4, [r8]
 8005044:	4627      	mov	r7, r4
 8005046:	2f00      	cmp	r7, #0
 8005048:	d143      	bne.n	80050d2 <_malloc_r+0xd6>
 800504a:	2c00      	cmp	r4, #0
 800504c:	d04b      	beq.n	80050e6 <_malloc_r+0xea>
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	4639      	mov	r1, r7
 8005052:	4630      	mov	r0, r6
 8005054:	eb04 0903 	add.w	r9, r4, r3
 8005058:	f001 fdac 	bl	8006bb4 <_sbrk_r>
 800505c:	4581      	cmp	r9, r0
 800505e:	d142      	bne.n	80050e6 <_malloc_r+0xea>
 8005060:	6821      	ldr	r1, [r4, #0]
 8005062:	4630      	mov	r0, r6
 8005064:	1a6d      	subs	r5, r5, r1
 8005066:	4629      	mov	r1, r5
 8005068:	f7ff ffa6 	bl	8004fb8 <sbrk_aligned>
 800506c:	3001      	adds	r0, #1
 800506e:	d03a      	beq.n	80050e6 <_malloc_r+0xea>
 8005070:	6823      	ldr	r3, [r4, #0]
 8005072:	442b      	add	r3, r5
 8005074:	6023      	str	r3, [r4, #0]
 8005076:	f8d8 3000 	ldr.w	r3, [r8]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	bb62      	cbnz	r2, 80050d8 <_malloc_r+0xdc>
 800507e:	f8c8 7000 	str.w	r7, [r8]
 8005082:	e00f      	b.n	80050a4 <_malloc_r+0xa8>
 8005084:	6822      	ldr	r2, [r4, #0]
 8005086:	1b52      	subs	r2, r2, r5
 8005088:	d420      	bmi.n	80050cc <_malloc_r+0xd0>
 800508a:	2a0b      	cmp	r2, #11
 800508c:	d917      	bls.n	80050be <_malloc_r+0xc2>
 800508e:	1961      	adds	r1, r4, r5
 8005090:	42a3      	cmp	r3, r4
 8005092:	6025      	str	r5, [r4, #0]
 8005094:	bf18      	it	ne
 8005096:	6059      	strne	r1, [r3, #4]
 8005098:	6863      	ldr	r3, [r4, #4]
 800509a:	bf08      	it	eq
 800509c:	f8c8 1000 	streq.w	r1, [r8]
 80050a0:	5162      	str	r2, [r4, r5]
 80050a2:	604b      	str	r3, [r1, #4]
 80050a4:	4630      	mov	r0, r6
 80050a6:	f000 f82f 	bl	8005108 <__malloc_unlock>
 80050aa:	f104 000b 	add.w	r0, r4, #11
 80050ae:	1d23      	adds	r3, r4, #4
 80050b0:	f020 0007 	bic.w	r0, r0, #7
 80050b4:	1ac2      	subs	r2, r0, r3
 80050b6:	bf1c      	itt	ne
 80050b8:	1a1b      	subne	r3, r3, r0
 80050ba:	50a3      	strne	r3, [r4, r2]
 80050bc:	e7af      	b.n	800501e <_malloc_r+0x22>
 80050be:	6862      	ldr	r2, [r4, #4]
 80050c0:	42a3      	cmp	r3, r4
 80050c2:	bf0c      	ite	eq
 80050c4:	f8c8 2000 	streq.w	r2, [r8]
 80050c8:	605a      	strne	r2, [r3, #4]
 80050ca:	e7eb      	b.n	80050a4 <_malloc_r+0xa8>
 80050cc:	4623      	mov	r3, r4
 80050ce:	6864      	ldr	r4, [r4, #4]
 80050d0:	e7ae      	b.n	8005030 <_malloc_r+0x34>
 80050d2:	463c      	mov	r4, r7
 80050d4:	687f      	ldr	r7, [r7, #4]
 80050d6:	e7b6      	b.n	8005046 <_malloc_r+0x4a>
 80050d8:	461a      	mov	r2, r3
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	42a3      	cmp	r3, r4
 80050de:	d1fb      	bne.n	80050d8 <_malloc_r+0xdc>
 80050e0:	2300      	movs	r3, #0
 80050e2:	6053      	str	r3, [r2, #4]
 80050e4:	e7de      	b.n	80050a4 <_malloc_r+0xa8>
 80050e6:	230c      	movs	r3, #12
 80050e8:	4630      	mov	r0, r6
 80050ea:	6033      	str	r3, [r6, #0]
 80050ec:	f000 f80c 	bl	8005108 <__malloc_unlock>
 80050f0:	e794      	b.n	800501c <_malloc_r+0x20>
 80050f2:	6005      	str	r5, [r0, #0]
 80050f4:	e7d6      	b.n	80050a4 <_malloc_r+0xa8>
 80050f6:	bf00      	nop
 80050f8:	20000394 	.word	0x20000394

080050fc <__malloc_lock>:
 80050fc:	4801      	ldr	r0, [pc, #4]	@ (8005104 <__malloc_lock+0x8>)
 80050fe:	f7ff b8a4 	b.w	800424a <__retarget_lock_acquire_recursive>
 8005102:	bf00      	nop
 8005104:	2000038c 	.word	0x2000038c

08005108 <__malloc_unlock>:
 8005108:	4801      	ldr	r0, [pc, #4]	@ (8005110 <__malloc_unlock+0x8>)
 800510a:	f7ff b89f 	b.w	800424c <__retarget_lock_release_recursive>
 800510e:	bf00      	nop
 8005110:	2000038c 	.word	0x2000038c

08005114 <_Balloc>:
 8005114:	b570      	push	{r4, r5, r6, lr}
 8005116:	69c6      	ldr	r6, [r0, #28]
 8005118:	4604      	mov	r4, r0
 800511a:	460d      	mov	r5, r1
 800511c:	b976      	cbnz	r6, 800513c <_Balloc+0x28>
 800511e:	2010      	movs	r0, #16
 8005120:	f7ff ff42 	bl	8004fa8 <malloc>
 8005124:	4602      	mov	r2, r0
 8005126:	61e0      	str	r0, [r4, #28]
 8005128:	b920      	cbnz	r0, 8005134 <_Balloc+0x20>
 800512a:	216b      	movs	r1, #107	@ 0x6b
 800512c:	4b17      	ldr	r3, [pc, #92]	@ (800518c <_Balloc+0x78>)
 800512e:	4818      	ldr	r0, [pc, #96]	@ (8005190 <_Balloc+0x7c>)
 8005130:	f001 fd64 	bl	8006bfc <__assert_func>
 8005134:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005138:	6006      	str	r6, [r0, #0]
 800513a:	60c6      	str	r6, [r0, #12]
 800513c:	69e6      	ldr	r6, [r4, #28]
 800513e:	68f3      	ldr	r3, [r6, #12]
 8005140:	b183      	cbz	r3, 8005164 <_Balloc+0x50>
 8005142:	69e3      	ldr	r3, [r4, #28]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800514a:	b9b8      	cbnz	r0, 800517c <_Balloc+0x68>
 800514c:	2101      	movs	r1, #1
 800514e:	fa01 f605 	lsl.w	r6, r1, r5
 8005152:	1d72      	adds	r2, r6, #5
 8005154:	4620      	mov	r0, r4
 8005156:	0092      	lsls	r2, r2, #2
 8005158:	f001 fd6e 	bl	8006c38 <_calloc_r>
 800515c:	b160      	cbz	r0, 8005178 <_Balloc+0x64>
 800515e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005162:	e00e      	b.n	8005182 <_Balloc+0x6e>
 8005164:	2221      	movs	r2, #33	@ 0x21
 8005166:	2104      	movs	r1, #4
 8005168:	4620      	mov	r0, r4
 800516a:	f001 fd65 	bl	8006c38 <_calloc_r>
 800516e:	69e3      	ldr	r3, [r4, #28]
 8005170:	60f0      	str	r0, [r6, #12]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1e4      	bne.n	8005142 <_Balloc+0x2e>
 8005178:	2000      	movs	r0, #0
 800517a:	bd70      	pop	{r4, r5, r6, pc}
 800517c:	6802      	ldr	r2, [r0, #0]
 800517e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005182:	2300      	movs	r3, #0
 8005184:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005188:	e7f7      	b.n	800517a <_Balloc+0x66>
 800518a:	bf00      	nop
 800518c:	08007970 	.word	0x08007970
 8005190:	080079f0 	.word	0x080079f0

08005194 <_Bfree>:
 8005194:	b570      	push	{r4, r5, r6, lr}
 8005196:	69c6      	ldr	r6, [r0, #28]
 8005198:	4605      	mov	r5, r0
 800519a:	460c      	mov	r4, r1
 800519c:	b976      	cbnz	r6, 80051bc <_Bfree+0x28>
 800519e:	2010      	movs	r0, #16
 80051a0:	f7ff ff02 	bl	8004fa8 <malloc>
 80051a4:	4602      	mov	r2, r0
 80051a6:	61e8      	str	r0, [r5, #28]
 80051a8:	b920      	cbnz	r0, 80051b4 <_Bfree+0x20>
 80051aa:	218f      	movs	r1, #143	@ 0x8f
 80051ac:	4b08      	ldr	r3, [pc, #32]	@ (80051d0 <_Bfree+0x3c>)
 80051ae:	4809      	ldr	r0, [pc, #36]	@ (80051d4 <_Bfree+0x40>)
 80051b0:	f001 fd24 	bl	8006bfc <__assert_func>
 80051b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80051b8:	6006      	str	r6, [r0, #0]
 80051ba:	60c6      	str	r6, [r0, #12]
 80051bc:	b13c      	cbz	r4, 80051ce <_Bfree+0x3a>
 80051be:	69eb      	ldr	r3, [r5, #28]
 80051c0:	6862      	ldr	r2, [r4, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80051c8:	6021      	str	r1, [r4, #0]
 80051ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80051ce:	bd70      	pop	{r4, r5, r6, pc}
 80051d0:	08007970 	.word	0x08007970
 80051d4:	080079f0 	.word	0x080079f0

080051d8 <__multadd>:
 80051d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051dc:	4607      	mov	r7, r0
 80051de:	460c      	mov	r4, r1
 80051e0:	461e      	mov	r6, r3
 80051e2:	2000      	movs	r0, #0
 80051e4:	690d      	ldr	r5, [r1, #16]
 80051e6:	f101 0c14 	add.w	ip, r1, #20
 80051ea:	f8dc 3000 	ldr.w	r3, [ip]
 80051ee:	3001      	adds	r0, #1
 80051f0:	b299      	uxth	r1, r3
 80051f2:	fb02 6101 	mla	r1, r2, r1, r6
 80051f6:	0c1e      	lsrs	r6, r3, #16
 80051f8:	0c0b      	lsrs	r3, r1, #16
 80051fa:	fb02 3306 	mla	r3, r2, r6, r3
 80051fe:	b289      	uxth	r1, r1
 8005200:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005204:	4285      	cmp	r5, r0
 8005206:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800520a:	f84c 1b04 	str.w	r1, [ip], #4
 800520e:	dcec      	bgt.n	80051ea <__multadd+0x12>
 8005210:	b30e      	cbz	r6, 8005256 <__multadd+0x7e>
 8005212:	68a3      	ldr	r3, [r4, #8]
 8005214:	42ab      	cmp	r3, r5
 8005216:	dc19      	bgt.n	800524c <__multadd+0x74>
 8005218:	6861      	ldr	r1, [r4, #4]
 800521a:	4638      	mov	r0, r7
 800521c:	3101      	adds	r1, #1
 800521e:	f7ff ff79 	bl	8005114 <_Balloc>
 8005222:	4680      	mov	r8, r0
 8005224:	b928      	cbnz	r0, 8005232 <__multadd+0x5a>
 8005226:	4602      	mov	r2, r0
 8005228:	21ba      	movs	r1, #186	@ 0xba
 800522a:	4b0c      	ldr	r3, [pc, #48]	@ (800525c <__multadd+0x84>)
 800522c:	480c      	ldr	r0, [pc, #48]	@ (8005260 <__multadd+0x88>)
 800522e:	f001 fce5 	bl	8006bfc <__assert_func>
 8005232:	6922      	ldr	r2, [r4, #16]
 8005234:	f104 010c 	add.w	r1, r4, #12
 8005238:	3202      	adds	r2, #2
 800523a:	0092      	lsls	r2, r2, #2
 800523c:	300c      	adds	r0, #12
 800523e:	f001 fcc9 	bl	8006bd4 <memcpy>
 8005242:	4621      	mov	r1, r4
 8005244:	4638      	mov	r0, r7
 8005246:	f7ff ffa5 	bl	8005194 <_Bfree>
 800524a:	4644      	mov	r4, r8
 800524c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005250:	3501      	adds	r5, #1
 8005252:	615e      	str	r6, [r3, #20]
 8005254:	6125      	str	r5, [r4, #16]
 8005256:	4620      	mov	r0, r4
 8005258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800525c:	080079df 	.word	0x080079df
 8005260:	080079f0 	.word	0x080079f0

08005264 <__s2b>:
 8005264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005268:	4615      	mov	r5, r2
 800526a:	2209      	movs	r2, #9
 800526c:	461f      	mov	r7, r3
 800526e:	3308      	adds	r3, #8
 8005270:	460c      	mov	r4, r1
 8005272:	fb93 f3f2 	sdiv	r3, r3, r2
 8005276:	4606      	mov	r6, r0
 8005278:	2201      	movs	r2, #1
 800527a:	2100      	movs	r1, #0
 800527c:	429a      	cmp	r2, r3
 800527e:	db09      	blt.n	8005294 <__s2b+0x30>
 8005280:	4630      	mov	r0, r6
 8005282:	f7ff ff47 	bl	8005114 <_Balloc>
 8005286:	b940      	cbnz	r0, 800529a <__s2b+0x36>
 8005288:	4602      	mov	r2, r0
 800528a:	21d3      	movs	r1, #211	@ 0xd3
 800528c:	4b18      	ldr	r3, [pc, #96]	@ (80052f0 <__s2b+0x8c>)
 800528e:	4819      	ldr	r0, [pc, #100]	@ (80052f4 <__s2b+0x90>)
 8005290:	f001 fcb4 	bl	8006bfc <__assert_func>
 8005294:	0052      	lsls	r2, r2, #1
 8005296:	3101      	adds	r1, #1
 8005298:	e7f0      	b.n	800527c <__s2b+0x18>
 800529a:	9b08      	ldr	r3, [sp, #32]
 800529c:	2d09      	cmp	r5, #9
 800529e:	6143      	str	r3, [r0, #20]
 80052a0:	f04f 0301 	mov.w	r3, #1
 80052a4:	6103      	str	r3, [r0, #16]
 80052a6:	dd16      	ble.n	80052d6 <__s2b+0x72>
 80052a8:	f104 0909 	add.w	r9, r4, #9
 80052ac:	46c8      	mov	r8, r9
 80052ae:	442c      	add	r4, r5
 80052b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80052b4:	4601      	mov	r1, r0
 80052b6:	220a      	movs	r2, #10
 80052b8:	4630      	mov	r0, r6
 80052ba:	3b30      	subs	r3, #48	@ 0x30
 80052bc:	f7ff ff8c 	bl	80051d8 <__multadd>
 80052c0:	45a0      	cmp	r8, r4
 80052c2:	d1f5      	bne.n	80052b0 <__s2b+0x4c>
 80052c4:	f1a5 0408 	sub.w	r4, r5, #8
 80052c8:	444c      	add	r4, r9
 80052ca:	1b2d      	subs	r5, r5, r4
 80052cc:	1963      	adds	r3, r4, r5
 80052ce:	42bb      	cmp	r3, r7
 80052d0:	db04      	blt.n	80052dc <__s2b+0x78>
 80052d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052d6:	2509      	movs	r5, #9
 80052d8:	340a      	adds	r4, #10
 80052da:	e7f6      	b.n	80052ca <__s2b+0x66>
 80052dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80052e0:	4601      	mov	r1, r0
 80052e2:	220a      	movs	r2, #10
 80052e4:	4630      	mov	r0, r6
 80052e6:	3b30      	subs	r3, #48	@ 0x30
 80052e8:	f7ff ff76 	bl	80051d8 <__multadd>
 80052ec:	e7ee      	b.n	80052cc <__s2b+0x68>
 80052ee:	bf00      	nop
 80052f0:	080079df 	.word	0x080079df
 80052f4:	080079f0 	.word	0x080079f0

080052f8 <__hi0bits>:
 80052f8:	4603      	mov	r3, r0
 80052fa:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80052fe:	bf3a      	itte	cc
 8005300:	0403      	lslcc	r3, r0, #16
 8005302:	2010      	movcc	r0, #16
 8005304:	2000      	movcs	r0, #0
 8005306:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800530a:	bf3c      	itt	cc
 800530c:	021b      	lslcc	r3, r3, #8
 800530e:	3008      	addcc	r0, #8
 8005310:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005314:	bf3c      	itt	cc
 8005316:	011b      	lslcc	r3, r3, #4
 8005318:	3004      	addcc	r0, #4
 800531a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800531e:	bf3c      	itt	cc
 8005320:	009b      	lslcc	r3, r3, #2
 8005322:	3002      	addcc	r0, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	db05      	blt.n	8005334 <__hi0bits+0x3c>
 8005328:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800532c:	f100 0001 	add.w	r0, r0, #1
 8005330:	bf08      	it	eq
 8005332:	2020      	moveq	r0, #32
 8005334:	4770      	bx	lr

08005336 <__lo0bits>:
 8005336:	6803      	ldr	r3, [r0, #0]
 8005338:	4602      	mov	r2, r0
 800533a:	f013 0007 	ands.w	r0, r3, #7
 800533e:	d00b      	beq.n	8005358 <__lo0bits+0x22>
 8005340:	07d9      	lsls	r1, r3, #31
 8005342:	d421      	bmi.n	8005388 <__lo0bits+0x52>
 8005344:	0798      	lsls	r0, r3, #30
 8005346:	bf49      	itett	mi
 8005348:	085b      	lsrmi	r3, r3, #1
 800534a:	089b      	lsrpl	r3, r3, #2
 800534c:	2001      	movmi	r0, #1
 800534e:	6013      	strmi	r3, [r2, #0]
 8005350:	bf5c      	itt	pl
 8005352:	2002      	movpl	r0, #2
 8005354:	6013      	strpl	r3, [r2, #0]
 8005356:	4770      	bx	lr
 8005358:	b299      	uxth	r1, r3
 800535a:	b909      	cbnz	r1, 8005360 <__lo0bits+0x2a>
 800535c:	2010      	movs	r0, #16
 800535e:	0c1b      	lsrs	r3, r3, #16
 8005360:	b2d9      	uxtb	r1, r3
 8005362:	b909      	cbnz	r1, 8005368 <__lo0bits+0x32>
 8005364:	3008      	adds	r0, #8
 8005366:	0a1b      	lsrs	r3, r3, #8
 8005368:	0719      	lsls	r1, r3, #28
 800536a:	bf04      	itt	eq
 800536c:	091b      	lsreq	r3, r3, #4
 800536e:	3004      	addeq	r0, #4
 8005370:	0799      	lsls	r1, r3, #30
 8005372:	bf04      	itt	eq
 8005374:	089b      	lsreq	r3, r3, #2
 8005376:	3002      	addeq	r0, #2
 8005378:	07d9      	lsls	r1, r3, #31
 800537a:	d403      	bmi.n	8005384 <__lo0bits+0x4e>
 800537c:	085b      	lsrs	r3, r3, #1
 800537e:	f100 0001 	add.w	r0, r0, #1
 8005382:	d003      	beq.n	800538c <__lo0bits+0x56>
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	4770      	bx	lr
 8005388:	2000      	movs	r0, #0
 800538a:	4770      	bx	lr
 800538c:	2020      	movs	r0, #32
 800538e:	4770      	bx	lr

08005390 <__i2b>:
 8005390:	b510      	push	{r4, lr}
 8005392:	460c      	mov	r4, r1
 8005394:	2101      	movs	r1, #1
 8005396:	f7ff febd 	bl	8005114 <_Balloc>
 800539a:	4602      	mov	r2, r0
 800539c:	b928      	cbnz	r0, 80053aa <__i2b+0x1a>
 800539e:	f240 1145 	movw	r1, #325	@ 0x145
 80053a2:	4b04      	ldr	r3, [pc, #16]	@ (80053b4 <__i2b+0x24>)
 80053a4:	4804      	ldr	r0, [pc, #16]	@ (80053b8 <__i2b+0x28>)
 80053a6:	f001 fc29 	bl	8006bfc <__assert_func>
 80053aa:	2301      	movs	r3, #1
 80053ac:	6144      	str	r4, [r0, #20]
 80053ae:	6103      	str	r3, [r0, #16]
 80053b0:	bd10      	pop	{r4, pc}
 80053b2:	bf00      	nop
 80053b4:	080079df 	.word	0x080079df
 80053b8:	080079f0 	.word	0x080079f0

080053bc <__multiply>:
 80053bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c0:	4614      	mov	r4, r2
 80053c2:	690a      	ldr	r2, [r1, #16]
 80053c4:	6923      	ldr	r3, [r4, #16]
 80053c6:	460f      	mov	r7, r1
 80053c8:	429a      	cmp	r2, r3
 80053ca:	bfa2      	ittt	ge
 80053cc:	4623      	movge	r3, r4
 80053ce:	460c      	movge	r4, r1
 80053d0:	461f      	movge	r7, r3
 80053d2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80053d6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80053da:	68a3      	ldr	r3, [r4, #8]
 80053dc:	6861      	ldr	r1, [r4, #4]
 80053de:	eb0a 0609 	add.w	r6, sl, r9
 80053e2:	42b3      	cmp	r3, r6
 80053e4:	b085      	sub	sp, #20
 80053e6:	bfb8      	it	lt
 80053e8:	3101      	addlt	r1, #1
 80053ea:	f7ff fe93 	bl	8005114 <_Balloc>
 80053ee:	b930      	cbnz	r0, 80053fe <__multiply+0x42>
 80053f0:	4602      	mov	r2, r0
 80053f2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80053f6:	4b43      	ldr	r3, [pc, #268]	@ (8005504 <__multiply+0x148>)
 80053f8:	4843      	ldr	r0, [pc, #268]	@ (8005508 <__multiply+0x14c>)
 80053fa:	f001 fbff 	bl	8006bfc <__assert_func>
 80053fe:	f100 0514 	add.w	r5, r0, #20
 8005402:	462b      	mov	r3, r5
 8005404:	2200      	movs	r2, #0
 8005406:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800540a:	4543      	cmp	r3, r8
 800540c:	d321      	bcc.n	8005452 <__multiply+0x96>
 800540e:	f107 0114 	add.w	r1, r7, #20
 8005412:	f104 0214 	add.w	r2, r4, #20
 8005416:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800541a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800541e:	9302      	str	r3, [sp, #8]
 8005420:	1b13      	subs	r3, r2, r4
 8005422:	3b15      	subs	r3, #21
 8005424:	f023 0303 	bic.w	r3, r3, #3
 8005428:	3304      	adds	r3, #4
 800542a:	f104 0715 	add.w	r7, r4, #21
 800542e:	42ba      	cmp	r2, r7
 8005430:	bf38      	it	cc
 8005432:	2304      	movcc	r3, #4
 8005434:	9301      	str	r3, [sp, #4]
 8005436:	9b02      	ldr	r3, [sp, #8]
 8005438:	9103      	str	r1, [sp, #12]
 800543a:	428b      	cmp	r3, r1
 800543c:	d80c      	bhi.n	8005458 <__multiply+0x9c>
 800543e:	2e00      	cmp	r6, #0
 8005440:	dd03      	ble.n	800544a <__multiply+0x8e>
 8005442:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005446:	2b00      	cmp	r3, #0
 8005448:	d05a      	beq.n	8005500 <__multiply+0x144>
 800544a:	6106      	str	r6, [r0, #16]
 800544c:	b005      	add	sp, #20
 800544e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005452:	f843 2b04 	str.w	r2, [r3], #4
 8005456:	e7d8      	b.n	800540a <__multiply+0x4e>
 8005458:	f8b1 a000 	ldrh.w	sl, [r1]
 800545c:	f1ba 0f00 	cmp.w	sl, #0
 8005460:	d023      	beq.n	80054aa <__multiply+0xee>
 8005462:	46a9      	mov	r9, r5
 8005464:	f04f 0c00 	mov.w	ip, #0
 8005468:	f104 0e14 	add.w	lr, r4, #20
 800546c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005470:	f8d9 3000 	ldr.w	r3, [r9]
 8005474:	fa1f fb87 	uxth.w	fp, r7
 8005478:	b29b      	uxth	r3, r3
 800547a:	fb0a 330b 	mla	r3, sl, fp, r3
 800547e:	4463      	add	r3, ip
 8005480:	f8d9 c000 	ldr.w	ip, [r9]
 8005484:	0c3f      	lsrs	r7, r7, #16
 8005486:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800548a:	fb0a c707 	mla	r7, sl, r7, ip
 800548e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005492:	b29b      	uxth	r3, r3
 8005494:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005498:	4572      	cmp	r2, lr
 800549a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800549e:	f849 3b04 	str.w	r3, [r9], #4
 80054a2:	d8e3      	bhi.n	800546c <__multiply+0xb0>
 80054a4:	9b01      	ldr	r3, [sp, #4]
 80054a6:	f845 c003 	str.w	ip, [r5, r3]
 80054aa:	9b03      	ldr	r3, [sp, #12]
 80054ac:	3104      	adds	r1, #4
 80054ae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80054b2:	f1b9 0f00 	cmp.w	r9, #0
 80054b6:	d021      	beq.n	80054fc <__multiply+0x140>
 80054b8:	46ae      	mov	lr, r5
 80054ba:	f04f 0a00 	mov.w	sl, #0
 80054be:	682b      	ldr	r3, [r5, #0]
 80054c0:	f104 0c14 	add.w	ip, r4, #20
 80054c4:	f8bc b000 	ldrh.w	fp, [ip]
 80054c8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	fb09 770b 	mla	r7, r9, fp, r7
 80054d2:	4457      	add	r7, sl
 80054d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80054d8:	f84e 3b04 	str.w	r3, [lr], #4
 80054dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80054e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80054e4:	f8be 3000 	ldrh.w	r3, [lr]
 80054e8:	4562      	cmp	r2, ip
 80054ea:	fb09 330a 	mla	r3, r9, sl, r3
 80054ee:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80054f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80054f6:	d8e5      	bhi.n	80054c4 <__multiply+0x108>
 80054f8:	9f01      	ldr	r7, [sp, #4]
 80054fa:	51eb      	str	r3, [r5, r7]
 80054fc:	3504      	adds	r5, #4
 80054fe:	e79a      	b.n	8005436 <__multiply+0x7a>
 8005500:	3e01      	subs	r6, #1
 8005502:	e79c      	b.n	800543e <__multiply+0x82>
 8005504:	080079df 	.word	0x080079df
 8005508:	080079f0 	.word	0x080079f0

0800550c <__pow5mult>:
 800550c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005510:	4615      	mov	r5, r2
 8005512:	f012 0203 	ands.w	r2, r2, #3
 8005516:	4607      	mov	r7, r0
 8005518:	460e      	mov	r6, r1
 800551a:	d007      	beq.n	800552c <__pow5mult+0x20>
 800551c:	4c25      	ldr	r4, [pc, #148]	@ (80055b4 <__pow5mult+0xa8>)
 800551e:	3a01      	subs	r2, #1
 8005520:	2300      	movs	r3, #0
 8005522:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005526:	f7ff fe57 	bl	80051d8 <__multadd>
 800552a:	4606      	mov	r6, r0
 800552c:	10ad      	asrs	r5, r5, #2
 800552e:	d03d      	beq.n	80055ac <__pow5mult+0xa0>
 8005530:	69fc      	ldr	r4, [r7, #28]
 8005532:	b97c      	cbnz	r4, 8005554 <__pow5mult+0x48>
 8005534:	2010      	movs	r0, #16
 8005536:	f7ff fd37 	bl	8004fa8 <malloc>
 800553a:	4602      	mov	r2, r0
 800553c:	61f8      	str	r0, [r7, #28]
 800553e:	b928      	cbnz	r0, 800554c <__pow5mult+0x40>
 8005540:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005544:	4b1c      	ldr	r3, [pc, #112]	@ (80055b8 <__pow5mult+0xac>)
 8005546:	481d      	ldr	r0, [pc, #116]	@ (80055bc <__pow5mult+0xb0>)
 8005548:	f001 fb58 	bl	8006bfc <__assert_func>
 800554c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005550:	6004      	str	r4, [r0, #0]
 8005552:	60c4      	str	r4, [r0, #12]
 8005554:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005558:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800555c:	b94c      	cbnz	r4, 8005572 <__pow5mult+0x66>
 800555e:	f240 2171 	movw	r1, #625	@ 0x271
 8005562:	4638      	mov	r0, r7
 8005564:	f7ff ff14 	bl	8005390 <__i2b>
 8005568:	2300      	movs	r3, #0
 800556a:	4604      	mov	r4, r0
 800556c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005570:	6003      	str	r3, [r0, #0]
 8005572:	f04f 0900 	mov.w	r9, #0
 8005576:	07eb      	lsls	r3, r5, #31
 8005578:	d50a      	bpl.n	8005590 <__pow5mult+0x84>
 800557a:	4631      	mov	r1, r6
 800557c:	4622      	mov	r2, r4
 800557e:	4638      	mov	r0, r7
 8005580:	f7ff ff1c 	bl	80053bc <__multiply>
 8005584:	4680      	mov	r8, r0
 8005586:	4631      	mov	r1, r6
 8005588:	4638      	mov	r0, r7
 800558a:	f7ff fe03 	bl	8005194 <_Bfree>
 800558e:	4646      	mov	r6, r8
 8005590:	106d      	asrs	r5, r5, #1
 8005592:	d00b      	beq.n	80055ac <__pow5mult+0xa0>
 8005594:	6820      	ldr	r0, [r4, #0]
 8005596:	b938      	cbnz	r0, 80055a8 <__pow5mult+0x9c>
 8005598:	4622      	mov	r2, r4
 800559a:	4621      	mov	r1, r4
 800559c:	4638      	mov	r0, r7
 800559e:	f7ff ff0d 	bl	80053bc <__multiply>
 80055a2:	6020      	str	r0, [r4, #0]
 80055a4:	f8c0 9000 	str.w	r9, [r0]
 80055a8:	4604      	mov	r4, r0
 80055aa:	e7e4      	b.n	8005576 <__pow5mult+0x6a>
 80055ac:	4630      	mov	r0, r6
 80055ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055b2:	bf00      	nop
 80055b4:	08007a4c 	.word	0x08007a4c
 80055b8:	08007970 	.word	0x08007970
 80055bc:	080079f0 	.word	0x080079f0

080055c0 <__lshift>:
 80055c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055c4:	460c      	mov	r4, r1
 80055c6:	4607      	mov	r7, r0
 80055c8:	4691      	mov	r9, r2
 80055ca:	6923      	ldr	r3, [r4, #16]
 80055cc:	6849      	ldr	r1, [r1, #4]
 80055ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80055d2:	68a3      	ldr	r3, [r4, #8]
 80055d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80055d8:	f108 0601 	add.w	r6, r8, #1
 80055dc:	42b3      	cmp	r3, r6
 80055de:	db0b      	blt.n	80055f8 <__lshift+0x38>
 80055e0:	4638      	mov	r0, r7
 80055e2:	f7ff fd97 	bl	8005114 <_Balloc>
 80055e6:	4605      	mov	r5, r0
 80055e8:	b948      	cbnz	r0, 80055fe <__lshift+0x3e>
 80055ea:	4602      	mov	r2, r0
 80055ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80055f0:	4b27      	ldr	r3, [pc, #156]	@ (8005690 <__lshift+0xd0>)
 80055f2:	4828      	ldr	r0, [pc, #160]	@ (8005694 <__lshift+0xd4>)
 80055f4:	f001 fb02 	bl	8006bfc <__assert_func>
 80055f8:	3101      	adds	r1, #1
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	e7ee      	b.n	80055dc <__lshift+0x1c>
 80055fe:	2300      	movs	r3, #0
 8005600:	f100 0114 	add.w	r1, r0, #20
 8005604:	f100 0210 	add.w	r2, r0, #16
 8005608:	4618      	mov	r0, r3
 800560a:	4553      	cmp	r3, sl
 800560c:	db33      	blt.n	8005676 <__lshift+0xb6>
 800560e:	6920      	ldr	r0, [r4, #16]
 8005610:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005614:	f104 0314 	add.w	r3, r4, #20
 8005618:	f019 091f 	ands.w	r9, r9, #31
 800561c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005620:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005624:	d02b      	beq.n	800567e <__lshift+0xbe>
 8005626:	468a      	mov	sl, r1
 8005628:	2200      	movs	r2, #0
 800562a:	f1c9 0e20 	rsb	lr, r9, #32
 800562e:	6818      	ldr	r0, [r3, #0]
 8005630:	fa00 f009 	lsl.w	r0, r0, r9
 8005634:	4310      	orrs	r0, r2
 8005636:	f84a 0b04 	str.w	r0, [sl], #4
 800563a:	f853 2b04 	ldr.w	r2, [r3], #4
 800563e:	459c      	cmp	ip, r3
 8005640:	fa22 f20e 	lsr.w	r2, r2, lr
 8005644:	d8f3      	bhi.n	800562e <__lshift+0x6e>
 8005646:	ebac 0304 	sub.w	r3, ip, r4
 800564a:	3b15      	subs	r3, #21
 800564c:	f023 0303 	bic.w	r3, r3, #3
 8005650:	3304      	adds	r3, #4
 8005652:	f104 0015 	add.w	r0, r4, #21
 8005656:	4584      	cmp	ip, r0
 8005658:	bf38      	it	cc
 800565a:	2304      	movcc	r3, #4
 800565c:	50ca      	str	r2, [r1, r3]
 800565e:	b10a      	cbz	r2, 8005664 <__lshift+0xa4>
 8005660:	f108 0602 	add.w	r6, r8, #2
 8005664:	3e01      	subs	r6, #1
 8005666:	4638      	mov	r0, r7
 8005668:	4621      	mov	r1, r4
 800566a:	612e      	str	r6, [r5, #16]
 800566c:	f7ff fd92 	bl	8005194 <_Bfree>
 8005670:	4628      	mov	r0, r5
 8005672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005676:	f842 0f04 	str.w	r0, [r2, #4]!
 800567a:	3301      	adds	r3, #1
 800567c:	e7c5      	b.n	800560a <__lshift+0x4a>
 800567e:	3904      	subs	r1, #4
 8005680:	f853 2b04 	ldr.w	r2, [r3], #4
 8005684:	459c      	cmp	ip, r3
 8005686:	f841 2f04 	str.w	r2, [r1, #4]!
 800568a:	d8f9      	bhi.n	8005680 <__lshift+0xc0>
 800568c:	e7ea      	b.n	8005664 <__lshift+0xa4>
 800568e:	bf00      	nop
 8005690:	080079df 	.word	0x080079df
 8005694:	080079f0 	.word	0x080079f0

08005698 <__mcmp>:
 8005698:	4603      	mov	r3, r0
 800569a:	690a      	ldr	r2, [r1, #16]
 800569c:	6900      	ldr	r0, [r0, #16]
 800569e:	b530      	push	{r4, r5, lr}
 80056a0:	1a80      	subs	r0, r0, r2
 80056a2:	d10e      	bne.n	80056c2 <__mcmp+0x2a>
 80056a4:	3314      	adds	r3, #20
 80056a6:	3114      	adds	r1, #20
 80056a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80056ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80056b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80056b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80056b8:	4295      	cmp	r5, r2
 80056ba:	d003      	beq.n	80056c4 <__mcmp+0x2c>
 80056bc:	d205      	bcs.n	80056ca <__mcmp+0x32>
 80056be:	f04f 30ff 	mov.w	r0, #4294967295
 80056c2:	bd30      	pop	{r4, r5, pc}
 80056c4:	42a3      	cmp	r3, r4
 80056c6:	d3f3      	bcc.n	80056b0 <__mcmp+0x18>
 80056c8:	e7fb      	b.n	80056c2 <__mcmp+0x2a>
 80056ca:	2001      	movs	r0, #1
 80056cc:	e7f9      	b.n	80056c2 <__mcmp+0x2a>
	...

080056d0 <__mdiff>:
 80056d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d4:	4689      	mov	r9, r1
 80056d6:	4606      	mov	r6, r0
 80056d8:	4611      	mov	r1, r2
 80056da:	4648      	mov	r0, r9
 80056dc:	4614      	mov	r4, r2
 80056de:	f7ff ffdb 	bl	8005698 <__mcmp>
 80056e2:	1e05      	subs	r5, r0, #0
 80056e4:	d112      	bne.n	800570c <__mdiff+0x3c>
 80056e6:	4629      	mov	r1, r5
 80056e8:	4630      	mov	r0, r6
 80056ea:	f7ff fd13 	bl	8005114 <_Balloc>
 80056ee:	4602      	mov	r2, r0
 80056f0:	b928      	cbnz	r0, 80056fe <__mdiff+0x2e>
 80056f2:	f240 2137 	movw	r1, #567	@ 0x237
 80056f6:	4b3e      	ldr	r3, [pc, #248]	@ (80057f0 <__mdiff+0x120>)
 80056f8:	483e      	ldr	r0, [pc, #248]	@ (80057f4 <__mdiff+0x124>)
 80056fa:	f001 fa7f 	bl	8006bfc <__assert_func>
 80056fe:	2301      	movs	r3, #1
 8005700:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005704:	4610      	mov	r0, r2
 8005706:	b003      	add	sp, #12
 8005708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800570c:	bfbc      	itt	lt
 800570e:	464b      	movlt	r3, r9
 8005710:	46a1      	movlt	r9, r4
 8005712:	4630      	mov	r0, r6
 8005714:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005718:	bfba      	itte	lt
 800571a:	461c      	movlt	r4, r3
 800571c:	2501      	movlt	r5, #1
 800571e:	2500      	movge	r5, #0
 8005720:	f7ff fcf8 	bl	8005114 <_Balloc>
 8005724:	4602      	mov	r2, r0
 8005726:	b918      	cbnz	r0, 8005730 <__mdiff+0x60>
 8005728:	f240 2145 	movw	r1, #581	@ 0x245
 800572c:	4b30      	ldr	r3, [pc, #192]	@ (80057f0 <__mdiff+0x120>)
 800572e:	e7e3      	b.n	80056f8 <__mdiff+0x28>
 8005730:	f100 0b14 	add.w	fp, r0, #20
 8005734:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005738:	f109 0310 	add.w	r3, r9, #16
 800573c:	60c5      	str	r5, [r0, #12]
 800573e:	f04f 0c00 	mov.w	ip, #0
 8005742:	f109 0514 	add.w	r5, r9, #20
 8005746:	46d9      	mov	r9, fp
 8005748:	6926      	ldr	r6, [r4, #16]
 800574a:	f104 0e14 	add.w	lr, r4, #20
 800574e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005752:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005756:	9301      	str	r3, [sp, #4]
 8005758:	9b01      	ldr	r3, [sp, #4]
 800575a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800575e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005762:	b281      	uxth	r1, r0
 8005764:	9301      	str	r3, [sp, #4]
 8005766:	fa1f f38a 	uxth.w	r3, sl
 800576a:	1a5b      	subs	r3, r3, r1
 800576c:	0c00      	lsrs	r0, r0, #16
 800576e:	4463      	add	r3, ip
 8005770:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005774:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005778:	b29b      	uxth	r3, r3
 800577a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800577e:	4576      	cmp	r6, lr
 8005780:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005784:	f849 3b04 	str.w	r3, [r9], #4
 8005788:	d8e6      	bhi.n	8005758 <__mdiff+0x88>
 800578a:	1b33      	subs	r3, r6, r4
 800578c:	3b15      	subs	r3, #21
 800578e:	f023 0303 	bic.w	r3, r3, #3
 8005792:	3415      	adds	r4, #21
 8005794:	3304      	adds	r3, #4
 8005796:	42a6      	cmp	r6, r4
 8005798:	bf38      	it	cc
 800579a:	2304      	movcc	r3, #4
 800579c:	441d      	add	r5, r3
 800579e:	445b      	add	r3, fp
 80057a0:	461e      	mov	r6, r3
 80057a2:	462c      	mov	r4, r5
 80057a4:	4544      	cmp	r4, r8
 80057a6:	d30e      	bcc.n	80057c6 <__mdiff+0xf6>
 80057a8:	f108 0103 	add.w	r1, r8, #3
 80057ac:	1b49      	subs	r1, r1, r5
 80057ae:	f021 0103 	bic.w	r1, r1, #3
 80057b2:	3d03      	subs	r5, #3
 80057b4:	45a8      	cmp	r8, r5
 80057b6:	bf38      	it	cc
 80057b8:	2100      	movcc	r1, #0
 80057ba:	440b      	add	r3, r1
 80057bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80057c0:	b199      	cbz	r1, 80057ea <__mdiff+0x11a>
 80057c2:	6117      	str	r7, [r2, #16]
 80057c4:	e79e      	b.n	8005704 <__mdiff+0x34>
 80057c6:	46e6      	mov	lr, ip
 80057c8:	f854 1b04 	ldr.w	r1, [r4], #4
 80057cc:	fa1f fc81 	uxth.w	ip, r1
 80057d0:	44f4      	add	ip, lr
 80057d2:	0c08      	lsrs	r0, r1, #16
 80057d4:	4471      	add	r1, lr
 80057d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80057da:	b289      	uxth	r1, r1
 80057dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80057e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80057e4:	f846 1b04 	str.w	r1, [r6], #4
 80057e8:	e7dc      	b.n	80057a4 <__mdiff+0xd4>
 80057ea:	3f01      	subs	r7, #1
 80057ec:	e7e6      	b.n	80057bc <__mdiff+0xec>
 80057ee:	bf00      	nop
 80057f0:	080079df 	.word	0x080079df
 80057f4:	080079f0 	.word	0x080079f0

080057f8 <__ulp>:
 80057f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005834 <__ulp+0x3c>)
 80057fa:	400b      	ands	r3, r1
 80057fc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8005800:	2b00      	cmp	r3, #0
 8005802:	dc08      	bgt.n	8005816 <__ulp+0x1e>
 8005804:	425b      	negs	r3, r3
 8005806:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800580a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800580e:	da04      	bge.n	800581a <__ulp+0x22>
 8005810:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005814:	4113      	asrs	r3, r2
 8005816:	2200      	movs	r2, #0
 8005818:	e008      	b.n	800582c <__ulp+0x34>
 800581a:	f1a2 0314 	sub.w	r3, r2, #20
 800581e:	2b1e      	cmp	r3, #30
 8005820:	bfd6      	itet	le
 8005822:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8005826:	2201      	movgt	r2, #1
 8005828:	40da      	lsrle	r2, r3
 800582a:	2300      	movs	r3, #0
 800582c:	4619      	mov	r1, r3
 800582e:	4610      	mov	r0, r2
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	7ff00000 	.word	0x7ff00000

08005838 <__b2d>:
 8005838:	6902      	ldr	r2, [r0, #16]
 800583a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583c:	f100 0614 	add.w	r6, r0, #20
 8005840:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005844:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8005848:	4f1e      	ldr	r7, [pc, #120]	@ (80058c4 <__b2d+0x8c>)
 800584a:	4620      	mov	r0, r4
 800584c:	f7ff fd54 	bl	80052f8 <__hi0bits>
 8005850:	4603      	mov	r3, r0
 8005852:	f1c0 0020 	rsb	r0, r0, #32
 8005856:	2b0a      	cmp	r3, #10
 8005858:	f1a2 0504 	sub.w	r5, r2, #4
 800585c:	6008      	str	r0, [r1, #0]
 800585e:	dc12      	bgt.n	8005886 <__b2d+0x4e>
 8005860:	42ae      	cmp	r6, r5
 8005862:	bf2c      	ite	cs
 8005864:	2200      	movcs	r2, #0
 8005866:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800586a:	f1c3 0c0b 	rsb	ip, r3, #11
 800586e:	3315      	adds	r3, #21
 8005870:	fa24 fe0c 	lsr.w	lr, r4, ip
 8005874:	fa04 f303 	lsl.w	r3, r4, r3
 8005878:	fa22 f20c 	lsr.w	r2, r2, ip
 800587c:	ea4e 0107 	orr.w	r1, lr, r7
 8005880:	431a      	orrs	r2, r3
 8005882:	4610      	mov	r0, r2
 8005884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005886:	42ae      	cmp	r6, r5
 8005888:	bf36      	itet	cc
 800588a:	f1a2 0508 	subcc.w	r5, r2, #8
 800588e:	2200      	movcs	r2, #0
 8005890:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005894:	3b0b      	subs	r3, #11
 8005896:	d012      	beq.n	80058be <__b2d+0x86>
 8005898:	f1c3 0720 	rsb	r7, r3, #32
 800589c:	fa22 f107 	lsr.w	r1, r2, r7
 80058a0:	409c      	lsls	r4, r3
 80058a2:	430c      	orrs	r4, r1
 80058a4:	42b5      	cmp	r5, r6
 80058a6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80058aa:	bf94      	ite	ls
 80058ac:	2400      	movls	r4, #0
 80058ae:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80058b2:	409a      	lsls	r2, r3
 80058b4:	40fc      	lsrs	r4, r7
 80058b6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80058ba:	4322      	orrs	r2, r4
 80058bc:	e7e1      	b.n	8005882 <__b2d+0x4a>
 80058be:	ea44 0107 	orr.w	r1, r4, r7
 80058c2:	e7de      	b.n	8005882 <__b2d+0x4a>
 80058c4:	3ff00000 	.word	0x3ff00000

080058c8 <__d2b>:
 80058c8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80058cc:	2101      	movs	r1, #1
 80058ce:	4690      	mov	r8, r2
 80058d0:	4699      	mov	r9, r3
 80058d2:	9e08      	ldr	r6, [sp, #32]
 80058d4:	f7ff fc1e 	bl	8005114 <_Balloc>
 80058d8:	4604      	mov	r4, r0
 80058da:	b930      	cbnz	r0, 80058ea <__d2b+0x22>
 80058dc:	4602      	mov	r2, r0
 80058de:	f240 310f 	movw	r1, #783	@ 0x30f
 80058e2:	4b23      	ldr	r3, [pc, #140]	@ (8005970 <__d2b+0xa8>)
 80058e4:	4823      	ldr	r0, [pc, #140]	@ (8005974 <__d2b+0xac>)
 80058e6:	f001 f989 	bl	8006bfc <__assert_func>
 80058ea:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80058ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80058f2:	b10d      	cbz	r5, 80058f8 <__d2b+0x30>
 80058f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058f8:	9301      	str	r3, [sp, #4]
 80058fa:	f1b8 0300 	subs.w	r3, r8, #0
 80058fe:	d024      	beq.n	800594a <__d2b+0x82>
 8005900:	4668      	mov	r0, sp
 8005902:	9300      	str	r3, [sp, #0]
 8005904:	f7ff fd17 	bl	8005336 <__lo0bits>
 8005908:	e9dd 1200 	ldrd	r1, r2, [sp]
 800590c:	b1d8      	cbz	r0, 8005946 <__d2b+0x7e>
 800590e:	f1c0 0320 	rsb	r3, r0, #32
 8005912:	fa02 f303 	lsl.w	r3, r2, r3
 8005916:	430b      	orrs	r3, r1
 8005918:	40c2      	lsrs	r2, r0
 800591a:	6163      	str	r3, [r4, #20]
 800591c:	9201      	str	r2, [sp, #4]
 800591e:	9b01      	ldr	r3, [sp, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	bf0c      	ite	eq
 8005924:	2201      	moveq	r2, #1
 8005926:	2202      	movne	r2, #2
 8005928:	61a3      	str	r3, [r4, #24]
 800592a:	6122      	str	r2, [r4, #16]
 800592c:	b1ad      	cbz	r5, 800595a <__d2b+0x92>
 800592e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005932:	4405      	add	r5, r0
 8005934:	6035      	str	r5, [r6, #0]
 8005936:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800593a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800593c:	6018      	str	r0, [r3, #0]
 800593e:	4620      	mov	r0, r4
 8005940:	b002      	add	sp, #8
 8005942:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005946:	6161      	str	r1, [r4, #20]
 8005948:	e7e9      	b.n	800591e <__d2b+0x56>
 800594a:	a801      	add	r0, sp, #4
 800594c:	f7ff fcf3 	bl	8005336 <__lo0bits>
 8005950:	9b01      	ldr	r3, [sp, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	6163      	str	r3, [r4, #20]
 8005956:	3020      	adds	r0, #32
 8005958:	e7e7      	b.n	800592a <__d2b+0x62>
 800595a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800595e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005962:	6030      	str	r0, [r6, #0]
 8005964:	6918      	ldr	r0, [r3, #16]
 8005966:	f7ff fcc7 	bl	80052f8 <__hi0bits>
 800596a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800596e:	e7e4      	b.n	800593a <__d2b+0x72>
 8005970:	080079df 	.word	0x080079df
 8005974:	080079f0 	.word	0x080079f0

08005978 <__ratio>:
 8005978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800597c:	b085      	sub	sp, #20
 800597e:	e9cd 1000 	strd	r1, r0, [sp]
 8005982:	a902      	add	r1, sp, #8
 8005984:	f7ff ff58 	bl	8005838 <__b2d>
 8005988:	468b      	mov	fp, r1
 800598a:	4606      	mov	r6, r0
 800598c:	460f      	mov	r7, r1
 800598e:	9800      	ldr	r0, [sp, #0]
 8005990:	a903      	add	r1, sp, #12
 8005992:	f7ff ff51 	bl	8005838 <__b2d>
 8005996:	460d      	mov	r5, r1
 8005998:	9b01      	ldr	r3, [sp, #4]
 800599a:	4689      	mov	r9, r1
 800599c:	6919      	ldr	r1, [r3, #16]
 800599e:	9b00      	ldr	r3, [sp, #0]
 80059a0:	4604      	mov	r4, r0
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	4630      	mov	r0, r6
 80059a6:	1ac9      	subs	r1, r1, r3
 80059a8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80059ac:	1a9b      	subs	r3, r3, r2
 80059ae:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	bfcd      	iteet	gt
 80059b6:	463a      	movgt	r2, r7
 80059b8:	462a      	movle	r2, r5
 80059ba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80059be:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80059c2:	bfd8      	it	le
 80059c4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80059c8:	464b      	mov	r3, r9
 80059ca:	4622      	mov	r2, r4
 80059cc:	4659      	mov	r1, fp
 80059ce:	f7fa fead 	bl	800072c <__aeabi_ddiv>
 80059d2:	b005      	add	sp, #20
 80059d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080059d8 <__copybits>:
 80059d8:	3901      	subs	r1, #1
 80059da:	b570      	push	{r4, r5, r6, lr}
 80059dc:	1149      	asrs	r1, r1, #5
 80059de:	6914      	ldr	r4, [r2, #16]
 80059e0:	3101      	adds	r1, #1
 80059e2:	f102 0314 	add.w	r3, r2, #20
 80059e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80059ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80059ee:	1f05      	subs	r5, r0, #4
 80059f0:	42a3      	cmp	r3, r4
 80059f2:	d30c      	bcc.n	8005a0e <__copybits+0x36>
 80059f4:	1aa3      	subs	r3, r4, r2
 80059f6:	3b11      	subs	r3, #17
 80059f8:	f023 0303 	bic.w	r3, r3, #3
 80059fc:	3211      	adds	r2, #17
 80059fe:	42a2      	cmp	r2, r4
 8005a00:	bf88      	it	hi
 8005a02:	2300      	movhi	r3, #0
 8005a04:	4418      	add	r0, r3
 8005a06:	2300      	movs	r3, #0
 8005a08:	4288      	cmp	r0, r1
 8005a0a:	d305      	bcc.n	8005a18 <__copybits+0x40>
 8005a0c:	bd70      	pop	{r4, r5, r6, pc}
 8005a0e:	f853 6b04 	ldr.w	r6, [r3], #4
 8005a12:	f845 6f04 	str.w	r6, [r5, #4]!
 8005a16:	e7eb      	b.n	80059f0 <__copybits+0x18>
 8005a18:	f840 3b04 	str.w	r3, [r0], #4
 8005a1c:	e7f4      	b.n	8005a08 <__copybits+0x30>

08005a1e <__any_on>:
 8005a1e:	f100 0214 	add.w	r2, r0, #20
 8005a22:	6900      	ldr	r0, [r0, #16]
 8005a24:	114b      	asrs	r3, r1, #5
 8005a26:	4298      	cmp	r0, r3
 8005a28:	b510      	push	{r4, lr}
 8005a2a:	db11      	blt.n	8005a50 <__any_on+0x32>
 8005a2c:	dd0a      	ble.n	8005a44 <__any_on+0x26>
 8005a2e:	f011 011f 	ands.w	r1, r1, #31
 8005a32:	d007      	beq.n	8005a44 <__any_on+0x26>
 8005a34:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005a38:	fa24 f001 	lsr.w	r0, r4, r1
 8005a3c:	fa00 f101 	lsl.w	r1, r0, r1
 8005a40:	428c      	cmp	r4, r1
 8005a42:	d10b      	bne.n	8005a5c <__any_on+0x3e>
 8005a44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d803      	bhi.n	8005a54 <__any_on+0x36>
 8005a4c:	2000      	movs	r0, #0
 8005a4e:	bd10      	pop	{r4, pc}
 8005a50:	4603      	mov	r3, r0
 8005a52:	e7f7      	b.n	8005a44 <__any_on+0x26>
 8005a54:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005a58:	2900      	cmp	r1, #0
 8005a5a:	d0f5      	beq.n	8005a48 <__any_on+0x2a>
 8005a5c:	2001      	movs	r0, #1
 8005a5e:	e7f6      	b.n	8005a4e <__any_on+0x30>

08005a60 <sulp>:
 8005a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a64:	460f      	mov	r7, r1
 8005a66:	4690      	mov	r8, r2
 8005a68:	f7ff fec6 	bl	80057f8 <__ulp>
 8005a6c:	4604      	mov	r4, r0
 8005a6e:	460d      	mov	r5, r1
 8005a70:	f1b8 0f00 	cmp.w	r8, #0
 8005a74:	d011      	beq.n	8005a9a <sulp+0x3a>
 8005a76:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005a7a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	dd0b      	ble.n	8005a9a <sulp+0x3a>
 8005a82:	2400      	movs	r4, #0
 8005a84:	051b      	lsls	r3, r3, #20
 8005a86:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005a8a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005a8e:	4622      	mov	r2, r4
 8005a90:	462b      	mov	r3, r5
 8005a92:	f7fa fd21 	bl	80004d8 <__aeabi_dmul>
 8005a96:	4604      	mov	r4, r0
 8005a98:	460d      	mov	r5, r1
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	4629      	mov	r1, r5
 8005a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005aa2:	0000      	movs	r0, r0
 8005aa4:	0000      	movs	r0, r0
	...

08005aa8 <_strtod_l>:
 8005aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aac:	b09f      	sub	sp, #124	@ 0x7c
 8005aae:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	460c      	mov	r4, r1
 8005ab4:	921a      	str	r2, [sp, #104]	@ 0x68
 8005ab6:	f04f 0a00 	mov.w	sl, #0
 8005aba:	f04f 0b00 	mov.w	fp, #0
 8005abe:	460a      	mov	r2, r1
 8005ac0:	9005      	str	r0, [sp, #20]
 8005ac2:	9219      	str	r2, [sp, #100]	@ 0x64
 8005ac4:	7811      	ldrb	r1, [r2, #0]
 8005ac6:	292b      	cmp	r1, #43	@ 0x2b
 8005ac8:	d048      	beq.n	8005b5c <_strtod_l+0xb4>
 8005aca:	d836      	bhi.n	8005b3a <_strtod_l+0x92>
 8005acc:	290d      	cmp	r1, #13
 8005ace:	d830      	bhi.n	8005b32 <_strtod_l+0x8a>
 8005ad0:	2908      	cmp	r1, #8
 8005ad2:	d830      	bhi.n	8005b36 <_strtod_l+0x8e>
 8005ad4:	2900      	cmp	r1, #0
 8005ad6:	d039      	beq.n	8005b4c <_strtod_l+0xa4>
 8005ad8:	2200      	movs	r2, #0
 8005ada:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005adc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005ade:	782a      	ldrb	r2, [r5, #0]
 8005ae0:	2a30      	cmp	r2, #48	@ 0x30
 8005ae2:	f040 80b1 	bne.w	8005c48 <_strtod_l+0x1a0>
 8005ae6:	786a      	ldrb	r2, [r5, #1]
 8005ae8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005aec:	2a58      	cmp	r2, #88	@ 0x58
 8005aee:	d16c      	bne.n	8005bca <_strtod_l+0x122>
 8005af0:	9302      	str	r3, [sp, #8]
 8005af2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005af4:	4a8e      	ldr	r2, [pc, #568]	@ (8005d30 <_strtod_l+0x288>)
 8005af6:	9301      	str	r3, [sp, #4]
 8005af8:	ab1a      	add	r3, sp, #104	@ 0x68
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	9805      	ldr	r0, [sp, #20]
 8005afe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005b00:	a919      	add	r1, sp, #100	@ 0x64
 8005b02:	f001 f915 	bl	8006d30 <__gethex>
 8005b06:	f010 060f 	ands.w	r6, r0, #15
 8005b0a:	4604      	mov	r4, r0
 8005b0c:	d005      	beq.n	8005b1a <_strtod_l+0x72>
 8005b0e:	2e06      	cmp	r6, #6
 8005b10:	d126      	bne.n	8005b60 <_strtod_l+0xb8>
 8005b12:	2300      	movs	r3, #0
 8005b14:	3501      	adds	r5, #1
 8005b16:	9519      	str	r5, [sp, #100]	@ 0x64
 8005b18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f040 8584 	bne.w	800662a <_strtod_l+0xb82>
 8005b22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b24:	b1bb      	cbz	r3, 8005b56 <_strtod_l+0xae>
 8005b26:	4650      	mov	r0, sl
 8005b28:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8005b2c:	b01f      	add	sp, #124	@ 0x7c
 8005b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b32:	2920      	cmp	r1, #32
 8005b34:	d1d0      	bne.n	8005ad8 <_strtod_l+0x30>
 8005b36:	3201      	adds	r2, #1
 8005b38:	e7c3      	b.n	8005ac2 <_strtod_l+0x1a>
 8005b3a:	292d      	cmp	r1, #45	@ 0x2d
 8005b3c:	d1cc      	bne.n	8005ad8 <_strtod_l+0x30>
 8005b3e:	2101      	movs	r1, #1
 8005b40:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005b42:	1c51      	adds	r1, r2, #1
 8005b44:	9119      	str	r1, [sp, #100]	@ 0x64
 8005b46:	7852      	ldrb	r2, [r2, #1]
 8005b48:	2a00      	cmp	r2, #0
 8005b4a:	d1c7      	bne.n	8005adc <_strtod_l+0x34>
 8005b4c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005b4e:	9419      	str	r4, [sp, #100]	@ 0x64
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f040 8568 	bne.w	8006626 <_strtod_l+0xb7e>
 8005b56:	4650      	mov	r0, sl
 8005b58:	4659      	mov	r1, fp
 8005b5a:	e7e7      	b.n	8005b2c <_strtod_l+0x84>
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	e7ef      	b.n	8005b40 <_strtod_l+0x98>
 8005b60:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005b62:	b13a      	cbz	r2, 8005b74 <_strtod_l+0xcc>
 8005b64:	2135      	movs	r1, #53	@ 0x35
 8005b66:	a81c      	add	r0, sp, #112	@ 0x70
 8005b68:	f7ff ff36 	bl	80059d8 <__copybits>
 8005b6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005b6e:	9805      	ldr	r0, [sp, #20]
 8005b70:	f7ff fb10 	bl	8005194 <_Bfree>
 8005b74:	3e01      	subs	r6, #1
 8005b76:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005b78:	2e04      	cmp	r6, #4
 8005b7a:	d806      	bhi.n	8005b8a <_strtod_l+0xe2>
 8005b7c:	e8df f006 	tbb	[pc, r6]
 8005b80:	201d0314 	.word	0x201d0314
 8005b84:	14          	.byte	0x14
 8005b85:	00          	.byte	0x00
 8005b86:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005b8a:	05e1      	lsls	r1, r4, #23
 8005b8c:	bf48      	it	mi
 8005b8e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005b92:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005b96:	0d1b      	lsrs	r3, r3, #20
 8005b98:	051b      	lsls	r3, r3, #20
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1bd      	bne.n	8005b1a <_strtod_l+0x72>
 8005b9e:	f7fe fb29 	bl	80041f4 <__errno>
 8005ba2:	2322      	movs	r3, #34	@ 0x22
 8005ba4:	6003      	str	r3, [r0, #0]
 8005ba6:	e7b8      	b.n	8005b1a <_strtod_l+0x72>
 8005ba8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005bac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005bb0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005bb4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005bb8:	e7e7      	b.n	8005b8a <_strtod_l+0xe2>
 8005bba:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8005d34 <_strtod_l+0x28c>
 8005bbe:	e7e4      	b.n	8005b8a <_strtod_l+0xe2>
 8005bc0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005bc4:	f04f 3aff 	mov.w	sl, #4294967295
 8005bc8:	e7df      	b.n	8005b8a <_strtod_l+0xe2>
 8005bca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005bcc:	1c5a      	adds	r2, r3, #1
 8005bce:	9219      	str	r2, [sp, #100]	@ 0x64
 8005bd0:	785b      	ldrb	r3, [r3, #1]
 8005bd2:	2b30      	cmp	r3, #48	@ 0x30
 8005bd4:	d0f9      	beq.n	8005bca <_strtod_l+0x122>
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d09f      	beq.n	8005b1a <_strtod_l+0x72>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bde:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005be0:	220a      	movs	r2, #10
 8005be2:	930c      	str	r3, [sp, #48]	@ 0x30
 8005be4:	2300      	movs	r3, #0
 8005be6:	461f      	mov	r7, r3
 8005be8:	9308      	str	r3, [sp, #32]
 8005bea:	930a      	str	r3, [sp, #40]	@ 0x28
 8005bec:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005bee:	7805      	ldrb	r5, [r0, #0]
 8005bf0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005bf4:	b2d9      	uxtb	r1, r3
 8005bf6:	2909      	cmp	r1, #9
 8005bf8:	d928      	bls.n	8005c4c <_strtod_l+0x1a4>
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	494e      	ldr	r1, [pc, #312]	@ (8005d38 <_strtod_l+0x290>)
 8005bfe:	f000 ffc7 	bl	8006b90 <strncmp>
 8005c02:	2800      	cmp	r0, #0
 8005c04:	d032      	beq.n	8005c6c <_strtod_l+0x1c4>
 8005c06:	2000      	movs	r0, #0
 8005c08:	462a      	mov	r2, r5
 8005c0a:	4681      	mov	r9, r0
 8005c0c:	463d      	mov	r5, r7
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2a65      	cmp	r2, #101	@ 0x65
 8005c12:	d001      	beq.n	8005c18 <_strtod_l+0x170>
 8005c14:	2a45      	cmp	r2, #69	@ 0x45
 8005c16:	d114      	bne.n	8005c42 <_strtod_l+0x19a>
 8005c18:	b91d      	cbnz	r5, 8005c22 <_strtod_l+0x17a>
 8005c1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c1c:	4302      	orrs	r2, r0
 8005c1e:	d095      	beq.n	8005b4c <_strtod_l+0xa4>
 8005c20:	2500      	movs	r5, #0
 8005c22:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005c24:	1c62      	adds	r2, r4, #1
 8005c26:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c28:	7862      	ldrb	r2, [r4, #1]
 8005c2a:	2a2b      	cmp	r2, #43	@ 0x2b
 8005c2c:	d077      	beq.n	8005d1e <_strtod_l+0x276>
 8005c2e:	2a2d      	cmp	r2, #45	@ 0x2d
 8005c30:	d07b      	beq.n	8005d2a <_strtod_l+0x282>
 8005c32:	f04f 0c00 	mov.w	ip, #0
 8005c36:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005c3a:	2909      	cmp	r1, #9
 8005c3c:	f240 8082 	bls.w	8005d44 <_strtod_l+0x29c>
 8005c40:	9419      	str	r4, [sp, #100]	@ 0x64
 8005c42:	f04f 0800 	mov.w	r8, #0
 8005c46:	e0a2      	b.n	8005d8e <_strtod_l+0x2e6>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	e7c7      	b.n	8005bdc <_strtod_l+0x134>
 8005c4c:	2f08      	cmp	r7, #8
 8005c4e:	bfd5      	itete	le
 8005c50:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8005c52:	9908      	ldrgt	r1, [sp, #32]
 8005c54:	fb02 3301 	mlale	r3, r2, r1, r3
 8005c58:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005c5c:	f100 0001 	add.w	r0, r0, #1
 8005c60:	bfd4      	ite	le
 8005c62:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005c64:	9308      	strgt	r3, [sp, #32]
 8005c66:	3701      	adds	r7, #1
 8005c68:	9019      	str	r0, [sp, #100]	@ 0x64
 8005c6a:	e7bf      	b.n	8005bec <_strtod_l+0x144>
 8005c6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c6e:	1c5a      	adds	r2, r3, #1
 8005c70:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c72:	785a      	ldrb	r2, [r3, #1]
 8005c74:	b37f      	cbz	r7, 8005cd6 <_strtod_l+0x22e>
 8005c76:	4681      	mov	r9, r0
 8005c78:	463d      	mov	r5, r7
 8005c7a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005c7e:	2b09      	cmp	r3, #9
 8005c80:	d912      	bls.n	8005ca8 <_strtod_l+0x200>
 8005c82:	2301      	movs	r3, #1
 8005c84:	e7c4      	b.n	8005c10 <_strtod_l+0x168>
 8005c86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c88:	3001      	adds	r0, #1
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c8e:	785a      	ldrb	r2, [r3, #1]
 8005c90:	2a30      	cmp	r2, #48	@ 0x30
 8005c92:	d0f8      	beq.n	8005c86 <_strtod_l+0x1de>
 8005c94:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	f200 84cb 	bhi.w	8006634 <_strtod_l+0xb8c>
 8005c9e:	4681      	mov	r9, r0
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	4605      	mov	r5, r0
 8005ca4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005ca6:	930c      	str	r3, [sp, #48]	@ 0x30
 8005ca8:	3a30      	subs	r2, #48	@ 0x30
 8005caa:	f100 0301 	add.w	r3, r0, #1
 8005cae:	d02a      	beq.n	8005d06 <_strtod_l+0x25e>
 8005cb0:	4499      	add	r9, r3
 8005cb2:	210a      	movs	r1, #10
 8005cb4:	462b      	mov	r3, r5
 8005cb6:	eb00 0c05 	add.w	ip, r0, r5
 8005cba:	4563      	cmp	r3, ip
 8005cbc:	d10d      	bne.n	8005cda <_strtod_l+0x232>
 8005cbe:	1c69      	adds	r1, r5, #1
 8005cc0:	4401      	add	r1, r0
 8005cc2:	4428      	add	r0, r5
 8005cc4:	2808      	cmp	r0, #8
 8005cc6:	dc16      	bgt.n	8005cf6 <_strtod_l+0x24e>
 8005cc8:	230a      	movs	r3, #10
 8005cca:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005ccc:	fb03 2300 	mla	r3, r3, r0, r2
 8005cd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	e018      	b.n	8005d08 <_strtod_l+0x260>
 8005cd6:	4638      	mov	r0, r7
 8005cd8:	e7da      	b.n	8005c90 <_strtod_l+0x1e8>
 8005cda:	2b08      	cmp	r3, #8
 8005cdc:	f103 0301 	add.w	r3, r3, #1
 8005ce0:	dc03      	bgt.n	8005cea <_strtod_l+0x242>
 8005ce2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005ce4:	434e      	muls	r6, r1
 8005ce6:	960a      	str	r6, [sp, #40]	@ 0x28
 8005ce8:	e7e7      	b.n	8005cba <_strtod_l+0x212>
 8005cea:	2b10      	cmp	r3, #16
 8005cec:	bfde      	ittt	le
 8005cee:	9e08      	ldrle	r6, [sp, #32]
 8005cf0:	434e      	mulle	r6, r1
 8005cf2:	9608      	strle	r6, [sp, #32]
 8005cf4:	e7e1      	b.n	8005cba <_strtod_l+0x212>
 8005cf6:	280f      	cmp	r0, #15
 8005cf8:	dceb      	bgt.n	8005cd2 <_strtod_l+0x22a>
 8005cfa:	230a      	movs	r3, #10
 8005cfc:	9808      	ldr	r0, [sp, #32]
 8005cfe:	fb03 2300 	mla	r3, r3, r0, r2
 8005d02:	9308      	str	r3, [sp, #32]
 8005d04:	e7e5      	b.n	8005cd2 <_strtod_l+0x22a>
 8005d06:	4629      	mov	r1, r5
 8005d08:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005d0a:	460d      	mov	r5, r1
 8005d0c:	1c50      	adds	r0, r2, #1
 8005d0e:	9019      	str	r0, [sp, #100]	@ 0x64
 8005d10:	7852      	ldrb	r2, [r2, #1]
 8005d12:	4618      	mov	r0, r3
 8005d14:	e7b1      	b.n	8005c7a <_strtod_l+0x1d2>
 8005d16:	f04f 0900 	mov.w	r9, #0
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e77d      	b.n	8005c1a <_strtod_l+0x172>
 8005d1e:	f04f 0c00 	mov.w	ip, #0
 8005d22:	1ca2      	adds	r2, r4, #2
 8005d24:	9219      	str	r2, [sp, #100]	@ 0x64
 8005d26:	78a2      	ldrb	r2, [r4, #2]
 8005d28:	e785      	b.n	8005c36 <_strtod_l+0x18e>
 8005d2a:	f04f 0c01 	mov.w	ip, #1
 8005d2e:	e7f8      	b.n	8005d22 <_strtod_l+0x27a>
 8005d30:	08007b60 	.word	0x08007b60
 8005d34:	7ff00000 	.word	0x7ff00000
 8005d38:	08007b48 	.word	0x08007b48
 8005d3c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005d3e:	1c51      	adds	r1, r2, #1
 8005d40:	9119      	str	r1, [sp, #100]	@ 0x64
 8005d42:	7852      	ldrb	r2, [r2, #1]
 8005d44:	2a30      	cmp	r2, #48	@ 0x30
 8005d46:	d0f9      	beq.n	8005d3c <_strtod_l+0x294>
 8005d48:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005d4c:	2908      	cmp	r1, #8
 8005d4e:	f63f af78 	bhi.w	8005c42 <_strtod_l+0x19a>
 8005d52:	f04f 080a 	mov.w	r8, #10
 8005d56:	3a30      	subs	r2, #48	@ 0x30
 8005d58:	920e      	str	r2, [sp, #56]	@ 0x38
 8005d5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005d5c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005d5e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005d60:	1c56      	adds	r6, r2, #1
 8005d62:	9619      	str	r6, [sp, #100]	@ 0x64
 8005d64:	7852      	ldrb	r2, [r2, #1]
 8005d66:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005d6a:	f1be 0f09 	cmp.w	lr, #9
 8005d6e:	d939      	bls.n	8005de4 <_strtod_l+0x33c>
 8005d70:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005d72:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005d76:	1a76      	subs	r6, r6, r1
 8005d78:	2e08      	cmp	r6, #8
 8005d7a:	dc03      	bgt.n	8005d84 <_strtod_l+0x2dc>
 8005d7c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005d7e:	4588      	cmp	r8, r1
 8005d80:	bfa8      	it	ge
 8005d82:	4688      	movge	r8, r1
 8005d84:	f1bc 0f00 	cmp.w	ip, #0
 8005d88:	d001      	beq.n	8005d8e <_strtod_l+0x2e6>
 8005d8a:	f1c8 0800 	rsb	r8, r8, #0
 8005d8e:	2d00      	cmp	r5, #0
 8005d90:	d14e      	bne.n	8005e30 <_strtod_l+0x388>
 8005d92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005d94:	4308      	orrs	r0, r1
 8005d96:	f47f aec0 	bne.w	8005b1a <_strtod_l+0x72>
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f47f aed6 	bne.w	8005b4c <_strtod_l+0xa4>
 8005da0:	2a69      	cmp	r2, #105	@ 0x69
 8005da2:	d028      	beq.n	8005df6 <_strtod_l+0x34e>
 8005da4:	dc25      	bgt.n	8005df2 <_strtod_l+0x34a>
 8005da6:	2a49      	cmp	r2, #73	@ 0x49
 8005da8:	d025      	beq.n	8005df6 <_strtod_l+0x34e>
 8005daa:	2a4e      	cmp	r2, #78	@ 0x4e
 8005dac:	f47f aece 	bne.w	8005b4c <_strtod_l+0xa4>
 8005db0:	499a      	ldr	r1, [pc, #616]	@ (800601c <_strtod_l+0x574>)
 8005db2:	a819      	add	r0, sp, #100	@ 0x64
 8005db4:	f001 f9de 	bl	8007174 <__match>
 8005db8:	2800      	cmp	r0, #0
 8005dba:	f43f aec7 	beq.w	8005b4c <_strtod_l+0xa4>
 8005dbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	2b28      	cmp	r3, #40	@ 0x28
 8005dc4:	d12e      	bne.n	8005e24 <_strtod_l+0x37c>
 8005dc6:	4996      	ldr	r1, [pc, #600]	@ (8006020 <_strtod_l+0x578>)
 8005dc8:	aa1c      	add	r2, sp, #112	@ 0x70
 8005dca:	a819      	add	r0, sp, #100	@ 0x64
 8005dcc:	f001 f9e6 	bl	800719c <__hexnan>
 8005dd0:	2805      	cmp	r0, #5
 8005dd2:	d127      	bne.n	8005e24 <_strtod_l+0x37c>
 8005dd4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005dd6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005dda:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005dde:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005de2:	e69a      	b.n	8005b1a <_strtod_l+0x72>
 8005de4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005de6:	fb08 2101 	mla	r1, r8, r1, r2
 8005dea:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005dee:	920e      	str	r2, [sp, #56]	@ 0x38
 8005df0:	e7b5      	b.n	8005d5e <_strtod_l+0x2b6>
 8005df2:	2a6e      	cmp	r2, #110	@ 0x6e
 8005df4:	e7da      	b.n	8005dac <_strtod_l+0x304>
 8005df6:	498b      	ldr	r1, [pc, #556]	@ (8006024 <_strtod_l+0x57c>)
 8005df8:	a819      	add	r0, sp, #100	@ 0x64
 8005dfa:	f001 f9bb 	bl	8007174 <__match>
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	f43f aea4 	beq.w	8005b4c <_strtod_l+0xa4>
 8005e04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005e06:	4988      	ldr	r1, [pc, #544]	@ (8006028 <_strtod_l+0x580>)
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	a819      	add	r0, sp, #100	@ 0x64
 8005e0c:	9319      	str	r3, [sp, #100]	@ 0x64
 8005e0e:	f001 f9b1 	bl	8007174 <__match>
 8005e12:	b910      	cbnz	r0, 8005e1a <_strtod_l+0x372>
 8005e14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005e16:	3301      	adds	r3, #1
 8005e18:	9319      	str	r3, [sp, #100]	@ 0x64
 8005e1a:	f04f 0a00 	mov.w	sl, #0
 8005e1e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800602c <_strtod_l+0x584>
 8005e22:	e67a      	b.n	8005b1a <_strtod_l+0x72>
 8005e24:	4882      	ldr	r0, [pc, #520]	@ (8006030 <_strtod_l+0x588>)
 8005e26:	f000 fee3 	bl	8006bf0 <nan>
 8005e2a:	4682      	mov	sl, r0
 8005e2c:	468b      	mov	fp, r1
 8005e2e:	e674      	b.n	8005b1a <_strtod_l+0x72>
 8005e30:	eba8 0309 	sub.w	r3, r8, r9
 8005e34:	2f00      	cmp	r7, #0
 8005e36:	bf08      	it	eq
 8005e38:	462f      	moveq	r7, r5
 8005e3a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005e3c:	2d10      	cmp	r5, #16
 8005e3e:	462c      	mov	r4, r5
 8005e40:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e42:	bfa8      	it	ge
 8005e44:	2410      	movge	r4, #16
 8005e46:	f7fa facd 	bl	80003e4 <__aeabi_ui2d>
 8005e4a:	2d09      	cmp	r5, #9
 8005e4c:	4682      	mov	sl, r0
 8005e4e:	468b      	mov	fp, r1
 8005e50:	dc11      	bgt.n	8005e76 <_strtod_l+0x3ce>
 8005e52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f43f ae60 	beq.w	8005b1a <_strtod_l+0x72>
 8005e5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e5c:	dd76      	ble.n	8005f4c <_strtod_l+0x4a4>
 8005e5e:	2b16      	cmp	r3, #22
 8005e60:	dc5d      	bgt.n	8005f1e <_strtod_l+0x476>
 8005e62:	4974      	ldr	r1, [pc, #464]	@ (8006034 <_strtod_l+0x58c>)
 8005e64:	4652      	mov	r2, sl
 8005e66:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005e6a:	465b      	mov	r3, fp
 8005e6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e70:	f7fa fb32 	bl	80004d8 <__aeabi_dmul>
 8005e74:	e7d9      	b.n	8005e2a <_strtod_l+0x382>
 8005e76:	4b6f      	ldr	r3, [pc, #444]	@ (8006034 <_strtod_l+0x58c>)
 8005e78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005e7c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005e80:	f7fa fb2a 	bl	80004d8 <__aeabi_dmul>
 8005e84:	4682      	mov	sl, r0
 8005e86:	9808      	ldr	r0, [sp, #32]
 8005e88:	468b      	mov	fp, r1
 8005e8a:	f7fa faab 	bl	80003e4 <__aeabi_ui2d>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	4650      	mov	r0, sl
 8005e94:	4659      	mov	r1, fp
 8005e96:	f7fa f969 	bl	800016c <__adddf3>
 8005e9a:	2d0f      	cmp	r5, #15
 8005e9c:	4682      	mov	sl, r0
 8005e9e:	468b      	mov	fp, r1
 8005ea0:	ddd7      	ble.n	8005e52 <_strtod_l+0x3aa>
 8005ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ea4:	1b2c      	subs	r4, r5, r4
 8005ea6:	441c      	add	r4, r3
 8005ea8:	2c00      	cmp	r4, #0
 8005eaa:	f340 8096 	ble.w	8005fda <_strtod_l+0x532>
 8005eae:	f014 030f 	ands.w	r3, r4, #15
 8005eb2:	d00a      	beq.n	8005eca <_strtod_l+0x422>
 8005eb4:	495f      	ldr	r1, [pc, #380]	@ (8006034 <_strtod_l+0x58c>)
 8005eb6:	4652      	mov	r2, sl
 8005eb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005ebc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ec0:	465b      	mov	r3, fp
 8005ec2:	f7fa fb09 	bl	80004d8 <__aeabi_dmul>
 8005ec6:	4682      	mov	sl, r0
 8005ec8:	468b      	mov	fp, r1
 8005eca:	f034 040f 	bics.w	r4, r4, #15
 8005ece:	d073      	beq.n	8005fb8 <_strtod_l+0x510>
 8005ed0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005ed4:	dd48      	ble.n	8005f68 <_strtod_l+0x4c0>
 8005ed6:	2400      	movs	r4, #0
 8005ed8:	46a0      	mov	r8, r4
 8005eda:	46a1      	mov	r9, r4
 8005edc:	940a      	str	r4, [sp, #40]	@ 0x28
 8005ede:	2322      	movs	r3, #34	@ 0x22
 8005ee0:	f04f 0a00 	mov.w	sl, #0
 8005ee4:	9a05      	ldr	r2, [sp, #20]
 8005ee6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800602c <_strtod_l+0x584>
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f43f ae13 	beq.w	8005b1a <_strtod_l+0x72>
 8005ef4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005ef6:	9805      	ldr	r0, [sp, #20]
 8005ef8:	f7ff f94c 	bl	8005194 <_Bfree>
 8005efc:	4649      	mov	r1, r9
 8005efe:	9805      	ldr	r0, [sp, #20]
 8005f00:	f7ff f948 	bl	8005194 <_Bfree>
 8005f04:	4641      	mov	r1, r8
 8005f06:	9805      	ldr	r0, [sp, #20]
 8005f08:	f7ff f944 	bl	8005194 <_Bfree>
 8005f0c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005f0e:	9805      	ldr	r0, [sp, #20]
 8005f10:	f7ff f940 	bl	8005194 <_Bfree>
 8005f14:	4621      	mov	r1, r4
 8005f16:	9805      	ldr	r0, [sp, #20]
 8005f18:	f7ff f93c 	bl	8005194 <_Bfree>
 8005f1c:	e5fd      	b.n	8005b1a <_strtod_l+0x72>
 8005f1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f20:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005f24:	4293      	cmp	r3, r2
 8005f26:	dbbc      	blt.n	8005ea2 <_strtod_l+0x3fa>
 8005f28:	4c42      	ldr	r4, [pc, #264]	@ (8006034 <_strtod_l+0x58c>)
 8005f2a:	f1c5 050f 	rsb	r5, r5, #15
 8005f2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005f32:	4652      	mov	r2, sl
 8005f34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f38:	465b      	mov	r3, fp
 8005f3a:	f7fa facd 	bl	80004d8 <__aeabi_dmul>
 8005f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f40:	1b5d      	subs	r5, r3, r5
 8005f42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005f46:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005f4a:	e791      	b.n	8005e70 <_strtod_l+0x3c8>
 8005f4c:	3316      	adds	r3, #22
 8005f4e:	dba8      	blt.n	8005ea2 <_strtod_l+0x3fa>
 8005f50:	4b38      	ldr	r3, [pc, #224]	@ (8006034 <_strtod_l+0x58c>)
 8005f52:	eba9 0808 	sub.w	r8, r9, r8
 8005f56:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005f5a:	4650      	mov	r0, sl
 8005f5c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005f60:	4659      	mov	r1, fp
 8005f62:	f7fa fbe3 	bl	800072c <__aeabi_ddiv>
 8005f66:	e760      	b.n	8005e2a <_strtod_l+0x382>
 8005f68:	4b33      	ldr	r3, [pc, #204]	@ (8006038 <_strtod_l+0x590>)
 8005f6a:	4650      	mov	r0, sl
 8005f6c:	9308      	str	r3, [sp, #32]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	4659      	mov	r1, fp
 8005f72:	461e      	mov	r6, r3
 8005f74:	1124      	asrs	r4, r4, #4
 8005f76:	2c01      	cmp	r4, #1
 8005f78:	dc21      	bgt.n	8005fbe <_strtod_l+0x516>
 8005f7a:	b10b      	cbz	r3, 8005f80 <_strtod_l+0x4d8>
 8005f7c:	4682      	mov	sl, r0
 8005f7e:	468b      	mov	fp, r1
 8005f80:	492d      	ldr	r1, [pc, #180]	@ (8006038 <_strtod_l+0x590>)
 8005f82:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005f86:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005f8a:	4652      	mov	r2, sl
 8005f8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f90:	465b      	mov	r3, fp
 8005f92:	f7fa faa1 	bl	80004d8 <__aeabi_dmul>
 8005f96:	4b25      	ldr	r3, [pc, #148]	@ (800602c <_strtod_l+0x584>)
 8005f98:	460a      	mov	r2, r1
 8005f9a:	400b      	ands	r3, r1
 8005f9c:	4927      	ldr	r1, [pc, #156]	@ (800603c <_strtod_l+0x594>)
 8005f9e:	4682      	mov	sl, r0
 8005fa0:	428b      	cmp	r3, r1
 8005fa2:	d898      	bhi.n	8005ed6 <_strtod_l+0x42e>
 8005fa4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005fa8:	428b      	cmp	r3, r1
 8005faa:	bf86      	itte	hi
 8005fac:	f04f 3aff 	movhi.w	sl, #4294967295
 8005fb0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006040 <_strtod_l+0x598>
 8005fb4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005fb8:	2300      	movs	r3, #0
 8005fba:	9308      	str	r3, [sp, #32]
 8005fbc:	e07a      	b.n	80060b4 <_strtod_l+0x60c>
 8005fbe:	07e2      	lsls	r2, r4, #31
 8005fc0:	d505      	bpl.n	8005fce <_strtod_l+0x526>
 8005fc2:	9b08      	ldr	r3, [sp, #32]
 8005fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc8:	f7fa fa86 	bl	80004d8 <__aeabi_dmul>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	9a08      	ldr	r2, [sp, #32]
 8005fd0:	3601      	adds	r6, #1
 8005fd2:	3208      	adds	r2, #8
 8005fd4:	1064      	asrs	r4, r4, #1
 8005fd6:	9208      	str	r2, [sp, #32]
 8005fd8:	e7cd      	b.n	8005f76 <_strtod_l+0x4ce>
 8005fda:	d0ed      	beq.n	8005fb8 <_strtod_l+0x510>
 8005fdc:	4264      	negs	r4, r4
 8005fde:	f014 020f 	ands.w	r2, r4, #15
 8005fe2:	d00a      	beq.n	8005ffa <_strtod_l+0x552>
 8005fe4:	4b13      	ldr	r3, [pc, #76]	@ (8006034 <_strtod_l+0x58c>)
 8005fe6:	4650      	mov	r0, sl
 8005fe8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fec:	4659      	mov	r1, fp
 8005fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff2:	f7fa fb9b 	bl	800072c <__aeabi_ddiv>
 8005ff6:	4682      	mov	sl, r0
 8005ff8:	468b      	mov	fp, r1
 8005ffa:	1124      	asrs	r4, r4, #4
 8005ffc:	d0dc      	beq.n	8005fb8 <_strtod_l+0x510>
 8005ffe:	2c1f      	cmp	r4, #31
 8006000:	dd20      	ble.n	8006044 <_strtod_l+0x59c>
 8006002:	2400      	movs	r4, #0
 8006004:	46a0      	mov	r8, r4
 8006006:	46a1      	mov	r9, r4
 8006008:	940a      	str	r4, [sp, #40]	@ 0x28
 800600a:	2322      	movs	r3, #34	@ 0x22
 800600c:	9a05      	ldr	r2, [sp, #20]
 800600e:	f04f 0a00 	mov.w	sl, #0
 8006012:	f04f 0b00 	mov.w	fp, #0
 8006016:	6013      	str	r3, [r2, #0]
 8006018:	e768      	b.n	8005eec <_strtod_l+0x444>
 800601a:	bf00      	nop
 800601c:	08007937 	.word	0x08007937
 8006020:	08007b4c 	.word	0x08007b4c
 8006024:	0800792f 	.word	0x0800792f
 8006028:	08007966 	.word	0x08007966
 800602c:	7ff00000 	.word	0x7ff00000
 8006030:	08007cf5 	.word	0x08007cf5
 8006034:	08007a80 	.word	0x08007a80
 8006038:	08007a58 	.word	0x08007a58
 800603c:	7ca00000 	.word	0x7ca00000
 8006040:	7fefffff 	.word	0x7fefffff
 8006044:	f014 0310 	ands.w	r3, r4, #16
 8006048:	bf18      	it	ne
 800604a:	236a      	movne	r3, #106	@ 0x6a
 800604c:	4650      	mov	r0, sl
 800604e:	9308      	str	r3, [sp, #32]
 8006050:	4659      	mov	r1, fp
 8006052:	2300      	movs	r3, #0
 8006054:	4ea9      	ldr	r6, [pc, #676]	@ (80062fc <_strtod_l+0x854>)
 8006056:	07e2      	lsls	r2, r4, #31
 8006058:	d504      	bpl.n	8006064 <_strtod_l+0x5bc>
 800605a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800605e:	f7fa fa3b 	bl	80004d8 <__aeabi_dmul>
 8006062:	2301      	movs	r3, #1
 8006064:	1064      	asrs	r4, r4, #1
 8006066:	f106 0608 	add.w	r6, r6, #8
 800606a:	d1f4      	bne.n	8006056 <_strtod_l+0x5ae>
 800606c:	b10b      	cbz	r3, 8006072 <_strtod_l+0x5ca>
 800606e:	4682      	mov	sl, r0
 8006070:	468b      	mov	fp, r1
 8006072:	9b08      	ldr	r3, [sp, #32]
 8006074:	b1b3      	cbz	r3, 80060a4 <_strtod_l+0x5fc>
 8006076:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800607a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800607e:	2b00      	cmp	r3, #0
 8006080:	4659      	mov	r1, fp
 8006082:	dd0f      	ble.n	80060a4 <_strtod_l+0x5fc>
 8006084:	2b1f      	cmp	r3, #31
 8006086:	dd57      	ble.n	8006138 <_strtod_l+0x690>
 8006088:	2b34      	cmp	r3, #52	@ 0x34
 800608a:	bfd8      	it	le
 800608c:	f04f 33ff 	movle.w	r3, #4294967295
 8006090:	f04f 0a00 	mov.w	sl, #0
 8006094:	bfcf      	iteee	gt
 8006096:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800609a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800609e:	4093      	lslle	r3, r2
 80060a0:	ea03 0b01 	andle.w	fp, r3, r1
 80060a4:	2200      	movs	r2, #0
 80060a6:	2300      	movs	r3, #0
 80060a8:	4650      	mov	r0, sl
 80060aa:	4659      	mov	r1, fp
 80060ac:	f7fa fc7c 	bl	80009a8 <__aeabi_dcmpeq>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	d1a6      	bne.n	8006002 <_strtod_l+0x55a>
 80060b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060b6:	463a      	mov	r2, r7
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80060bc:	462b      	mov	r3, r5
 80060be:	9805      	ldr	r0, [sp, #20]
 80060c0:	f7ff f8d0 	bl	8005264 <__s2b>
 80060c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80060c6:	2800      	cmp	r0, #0
 80060c8:	f43f af05 	beq.w	8005ed6 <_strtod_l+0x42e>
 80060cc:	2400      	movs	r4, #0
 80060ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060d0:	eba9 0308 	sub.w	r3, r9, r8
 80060d4:	2a00      	cmp	r2, #0
 80060d6:	bfa8      	it	ge
 80060d8:	2300      	movge	r3, #0
 80060da:	46a0      	mov	r8, r4
 80060dc:	9312      	str	r3, [sp, #72]	@ 0x48
 80060de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80060e2:	9316      	str	r3, [sp, #88]	@ 0x58
 80060e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060e6:	9805      	ldr	r0, [sp, #20]
 80060e8:	6859      	ldr	r1, [r3, #4]
 80060ea:	f7ff f813 	bl	8005114 <_Balloc>
 80060ee:	4681      	mov	r9, r0
 80060f0:	2800      	cmp	r0, #0
 80060f2:	f43f aef4 	beq.w	8005ede <_strtod_l+0x436>
 80060f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060f8:	300c      	adds	r0, #12
 80060fa:	691a      	ldr	r2, [r3, #16]
 80060fc:	f103 010c 	add.w	r1, r3, #12
 8006100:	3202      	adds	r2, #2
 8006102:	0092      	lsls	r2, r2, #2
 8006104:	f000 fd66 	bl	8006bd4 <memcpy>
 8006108:	ab1c      	add	r3, sp, #112	@ 0x70
 800610a:	9301      	str	r3, [sp, #4]
 800610c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	4652      	mov	r2, sl
 8006112:	465b      	mov	r3, fp
 8006114:	9805      	ldr	r0, [sp, #20]
 8006116:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800611a:	f7ff fbd5 	bl	80058c8 <__d2b>
 800611e:	901a      	str	r0, [sp, #104]	@ 0x68
 8006120:	2800      	cmp	r0, #0
 8006122:	f43f aedc 	beq.w	8005ede <_strtod_l+0x436>
 8006126:	2101      	movs	r1, #1
 8006128:	9805      	ldr	r0, [sp, #20]
 800612a:	f7ff f931 	bl	8005390 <__i2b>
 800612e:	4680      	mov	r8, r0
 8006130:	b948      	cbnz	r0, 8006146 <_strtod_l+0x69e>
 8006132:	f04f 0800 	mov.w	r8, #0
 8006136:	e6d2      	b.n	8005ede <_strtod_l+0x436>
 8006138:	f04f 32ff 	mov.w	r2, #4294967295
 800613c:	fa02 f303 	lsl.w	r3, r2, r3
 8006140:	ea03 0a0a 	and.w	sl, r3, sl
 8006144:	e7ae      	b.n	80060a4 <_strtod_l+0x5fc>
 8006146:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006148:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800614a:	2d00      	cmp	r5, #0
 800614c:	bfab      	itete	ge
 800614e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006150:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006152:	18ef      	addge	r7, r5, r3
 8006154:	1b5e      	sublt	r6, r3, r5
 8006156:	9b08      	ldr	r3, [sp, #32]
 8006158:	bfa8      	it	ge
 800615a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800615c:	eba5 0503 	sub.w	r5, r5, r3
 8006160:	4415      	add	r5, r2
 8006162:	4b67      	ldr	r3, [pc, #412]	@ (8006300 <_strtod_l+0x858>)
 8006164:	f105 35ff 	add.w	r5, r5, #4294967295
 8006168:	bfb8      	it	lt
 800616a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800616c:	429d      	cmp	r5, r3
 800616e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006172:	da50      	bge.n	8006216 <_strtod_l+0x76e>
 8006174:	1b5b      	subs	r3, r3, r5
 8006176:	2b1f      	cmp	r3, #31
 8006178:	f04f 0101 	mov.w	r1, #1
 800617c:	eba2 0203 	sub.w	r2, r2, r3
 8006180:	dc3d      	bgt.n	80061fe <_strtod_l+0x756>
 8006182:	fa01 f303 	lsl.w	r3, r1, r3
 8006186:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006188:	2300      	movs	r3, #0
 800618a:	9310      	str	r3, [sp, #64]	@ 0x40
 800618c:	18bd      	adds	r5, r7, r2
 800618e:	9b08      	ldr	r3, [sp, #32]
 8006190:	42af      	cmp	r7, r5
 8006192:	4416      	add	r6, r2
 8006194:	441e      	add	r6, r3
 8006196:	463b      	mov	r3, r7
 8006198:	bfa8      	it	ge
 800619a:	462b      	movge	r3, r5
 800619c:	42b3      	cmp	r3, r6
 800619e:	bfa8      	it	ge
 80061a0:	4633      	movge	r3, r6
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	bfc2      	ittt	gt
 80061a6:	1aed      	subgt	r5, r5, r3
 80061a8:	1af6      	subgt	r6, r6, r3
 80061aa:	1aff      	subgt	r7, r7, r3
 80061ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	dd16      	ble.n	80061e0 <_strtod_l+0x738>
 80061b2:	4641      	mov	r1, r8
 80061b4:	461a      	mov	r2, r3
 80061b6:	9805      	ldr	r0, [sp, #20]
 80061b8:	f7ff f9a8 	bl	800550c <__pow5mult>
 80061bc:	4680      	mov	r8, r0
 80061be:	2800      	cmp	r0, #0
 80061c0:	d0b7      	beq.n	8006132 <_strtod_l+0x68a>
 80061c2:	4601      	mov	r1, r0
 80061c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80061c6:	9805      	ldr	r0, [sp, #20]
 80061c8:	f7ff f8f8 	bl	80053bc <__multiply>
 80061cc:	900e      	str	r0, [sp, #56]	@ 0x38
 80061ce:	2800      	cmp	r0, #0
 80061d0:	f43f ae85 	beq.w	8005ede <_strtod_l+0x436>
 80061d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80061d6:	9805      	ldr	r0, [sp, #20]
 80061d8:	f7fe ffdc 	bl	8005194 <_Bfree>
 80061dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061de:	931a      	str	r3, [sp, #104]	@ 0x68
 80061e0:	2d00      	cmp	r5, #0
 80061e2:	dc1d      	bgt.n	8006220 <_strtod_l+0x778>
 80061e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	dd23      	ble.n	8006232 <_strtod_l+0x78a>
 80061ea:	4649      	mov	r1, r9
 80061ec:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80061ee:	9805      	ldr	r0, [sp, #20]
 80061f0:	f7ff f98c 	bl	800550c <__pow5mult>
 80061f4:	4681      	mov	r9, r0
 80061f6:	b9e0      	cbnz	r0, 8006232 <_strtod_l+0x78a>
 80061f8:	f04f 0900 	mov.w	r9, #0
 80061fc:	e66f      	b.n	8005ede <_strtod_l+0x436>
 80061fe:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006202:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006206:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800620a:	35e2      	adds	r5, #226	@ 0xe2
 800620c:	fa01 f305 	lsl.w	r3, r1, r5
 8006210:	9310      	str	r3, [sp, #64]	@ 0x40
 8006212:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006214:	e7ba      	b.n	800618c <_strtod_l+0x6e4>
 8006216:	2300      	movs	r3, #0
 8006218:	9310      	str	r3, [sp, #64]	@ 0x40
 800621a:	2301      	movs	r3, #1
 800621c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800621e:	e7b5      	b.n	800618c <_strtod_l+0x6e4>
 8006220:	462a      	mov	r2, r5
 8006222:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006224:	9805      	ldr	r0, [sp, #20]
 8006226:	f7ff f9cb 	bl	80055c0 <__lshift>
 800622a:	901a      	str	r0, [sp, #104]	@ 0x68
 800622c:	2800      	cmp	r0, #0
 800622e:	d1d9      	bne.n	80061e4 <_strtod_l+0x73c>
 8006230:	e655      	b.n	8005ede <_strtod_l+0x436>
 8006232:	2e00      	cmp	r6, #0
 8006234:	dd07      	ble.n	8006246 <_strtod_l+0x79e>
 8006236:	4649      	mov	r1, r9
 8006238:	4632      	mov	r2, r6
 800623a:	9805      	ldr	r0, [sp, #20]
 800623c:	f7ff f9c0 	bl	80055c0 <__lshift>
 8006240:	4681      	mov	r9, r0
 8006242:	2800      	cmp	r0, #0
 8006244:	d0d8      	beq.n	80061f8 <_strtod_l+0x750>
 8006246:	2f00      	cmp	r7, #0
 8006248:	dd08      	ble.n	800625c <_strtod_l+0x7b4>
 800624a:	4641      	mov	r1, r8
 800624c:	463a      	mov	r2, r7
 800624e:	9805      	ldr	r0, [sp, #20]
 8006250:	f7ff f9b6 	bl	80055c0 <__lshift>
 8006254:	4680      	mov	r8, r0
 8006256:	2800      	cmp	r0, #0
 8006258:	f43f ae41 	beq.w	8005ede <_strtod_l+0x436>
 800625c:	464a      	mov	r2, r9
 800625e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006260:	9805      	ldr	r0, [sp, #20]
 8006262:	f7ff fa35 	bl	80056d0 <__mdiff>
 8006266:	4604      	mov	r4, r0
 8006268:	2800      	cmp	r0, #0
 800626a:	f43f ae38 	beq.w	8005ede <_strtod_l+0x436>
 800626e:	68c3      	ldr	r3, [r0, #12]
 8006270:	4641      	mov	r1, r8
 8006272:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006274:	2300      	movs	r3, #0
 8006276:	60c3      	str	r3, [r0, #12]
 8006278:	f7ff fa0e 	bl	8005698 <__mcmp>
 800627c:	2800      	cmp	r0, #0
 800627e:	da45      	bge.n	800630c <_strtod_l+0x864>
 8006280:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006282:	ea53 030a 	orrs.w	r3, r3, sl
 8006286:	d16b      	bne.n	8006360 <_strtod_l+0x8b8>
 8006288:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800628c:	2b00      	cmp	r3, #0
 800628e:	d167      	bne.n	8006360 <_strtod_l+0x8b8>
 8006290:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006294:	0d1b      	lsrs	r3, r3, #20
 8006296:	051b      	lsls	r3, r3, #20
 8006298:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800629c:	d960      	bls.n	8006360 <_strtod_l+0x8b8>
 800629e:	6963      	ldr	r3, [r4, #20]
 80062a0:	b913      	cbnz	r3, 80062a8 <_strtod_l+0x800>
 80062a2:	6923      	ldr	r3, [r4, #16]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	dd5b      	ble.n	8006360 <_strtod_l+0x8b8>
 80062a8:	4621      	mov	r1, r4
 80062aa:	2201      	movs	r2, #1
 80062ac:	9805      	ldr	r0, [sp, #20]
 80062ae:	f7ff f987 	bl	80055c0 <__lshift>
 80062b2:	4641      	mov	r1, r8
 80062b4:	4604      	mov	r4, r0
 80062b6:	f7ff f9ef 	bl	8005698 <__mcmp>
 80062ba:	2800      	cmp	r0, #0
 80062bc:	dd50      	ble.n	8006360 <_strtod_l+0x8b8>
 80062be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80062c2:	9a08      	ldr	r2, [sp, #32]
 80062c4:	0d1b      	lsrs	r3, r3, #20
 80062c6:	051b      	lsls	r3, r3, #20
 80062c8:	2a00      	cmp	r2, #0
 80062ca:	d06a      	beq.n	80063a2 <_strtod_l+0x8fa>
 80062cc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80062d0:	d867      	bhi.n	80063a2 <_strtod_l+0x8fa>
 80062d2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80062d6:	f67f ae98 	bls.w	800600a <_strtod_l+0x562>
 80062da:	4650      	mov	r0, sl
 80062dc:	4659      	mov	r1, fp
 80062de:	4b09      	ldr	r3, [pc, #36]	@ (8006304 <_strtod_l+0x85c>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	f7fa f8f9 	bl	80004d8 <__aeabi_dmul>
 80062e6:	4b08      	ldr	r3, [pc, #32]	@ (8006308 <_strtod_l+0x860>)
 80062e8:	4682      	mov	sl, r0
 80062ea:	400b      	ands	r3, r1
 80062ec:	468b      	mov	fp, r1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f47f ae00 	bne.w	8005ef4 <_strtod_l+0x44c>
 80062f4:	2322      	movs	r3, #34	@ 0x22
 80062f6:	9a05      	ldr	r2, [sp, #20]
 80062f8:	6013      	str	r3, [r2, #0]
 80062fa:	e5fb      	b.n	8005ef4 <_strtod_l+0x44c>
 80062fc:	08007b78 	.word	0x08007b78
 8006300:	fffffc02 	.word	0xfffffc02
 8006304:	39500000 	.word	0x39500000
 8006308:	7ff00000 	.word	0x7ff00000
 800630c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006310:	d165      	bne.n	80063de <_strtod_l+0x936>
 8006312:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006314:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006318:	b35a      	cbz	r2, 8006372 <_strtod_l+0x8ca>
 800631a:	4a99      	ldr	r2, [pc, #612]	@ (8006580 <_strtod_l+0xad8>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d12b      	bne.n	8006378 <_strtod_l+0x8d0>
 8006320:	9b08      	ldr	r3, [sp, #32]
 8006322:	4651      	mov	r1, sl
 8006324:	b303      	cbz	r3, 8006368 <_strtod_l+0x8c0>
 8006326:	465a      	mov	r2, fp
 8006328:	4b96      	ldr	r3, [pc, #600]	@ (8006584 <_strtod_l+0xadc>)
 800632a:	4013      	ands	r3, r2
 800632c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006330:	f04f 32ff 	mov.w	r2, #4294967295
 8006334:	d81b      	bhi.n	800636e <_strtod_l+0x8c6>
 8006336:	0d1b      	lsrs	r3, r3, #20
 8006338:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800633c:	fa02 f303 	lsl.w	r3, r2, r3
 8006340:	4299      	cmp	r1, r3
 8006342:	d119      	bne.n	8006378 <_strtod_l+0x8d0>
 8006344:	4b90      	ldr	r3, [pc, #576]	@ (8006588 <_strtod_l+0xae0>)
 8006346:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006348:	429a      	cmp	r2, r3
 800634a:	d102      	bne.n	8006352 <_strtod_l+0x8aa>
 800634c:	3101      	adds	r1, #1
 800634e:	f43f adc6 	beq.w	8005ede <_strtod_l+0x436>
 8006352:	f04f 0a00 	mov.w	sl, #0
 8006356:	4b8b      	ldr	r3, [pc, #556]	@ (8006584 <_strtod_l+0xadc>)
 8006358:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800635a:	401a      	ands	r2, r3
 800635c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006360:	9b08      	ldr	r3, [sp, #32]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1b9      	bne.n	80062da <_strtod_l+0x832>
 8006366:	e5c5      	b.n	8005ef4 <_strtod_l+0x44c>
 8006368:	f04f 33ff 	mov.w	r3, #4294967295
 800636c:	e7e8      	b.n	8006340 <_strtod_l+0x898>
 800636e:	4613      	mov	r3, r2
 8006370:	e7e6      	b.n	8006340 <_strtod_l+0x898>
 8006372:	ea53 030a 	orrs.w	r3, r3, sl
 8006376:	d0a2      	beq.n	80062be <_strtod_l+0x816>
 8006378:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800637a:	b1db      	cbz	r3, 80063b4 <_strtod_l+0x90c>
 800637c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800637e:	4213      	tst	r3, r2
 8006380:	d0ee      	beq.n	8006360 <_strtod_l+0x8b8>
 8006382:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006384:	4650      	mov	r0, sl
 8006386:	4659      	mov	r1, fp
 8006388:	9a08      	ldr	r2, [sp, #32]
 800638a:	b1bb      	cbz	r3, 80063bc <_strtod_l+0x914>
 800638c:	f7ff fb68 	bl	8005a60 <sulp>
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006398:	f7f9 fee8 	bl	800016c <__adddf3>
 800639c:	4682      	mov	sl, r0
 800639e:	468b      	mov	fp, r1
 80063a0:	e7de      	b.n	8006360 <_strtod_l+0x8b8>
 80063a2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80063a6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80063aa:	f04f 3aff 	mov.w	sl, #4294967295
 80063ae:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80063b2:	e7d5      	b.n	8006360 <_strtod_l+0x8b8>
 80063b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80063b6:	ea13 0f0a 	tst.w	r3, sl
 80063ba:	e7e1      	b.n	8006380 <_strtod_l+0x8d8>
 80063bc:	f7ff fb50 	bl	8005a60 <sulp>
 80063c0:	4602      	mov	r2, r0
 80063c2:	460b      	mov	r3, r1
 80063c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80063c8:	f7f9 fece 	bl	8000168 <__aeabi_dsub>
 80063cc:	2200      	movs	r2, #0
 80063ce:	2300      	movs	r3, #0
 80063d0:	4682      	mov	sl, r0
 80063d2:	468b      	mov	fp, r1
 80063d4:	f7fa fae8 	bl	80009a8 <__aeabi_dcmpeq>
 80063d8:	2800      	cmp	r0, #0
 80063da:	d0c1      	beq.n	8006360 <_strtod_l+0x8b8>
 80063dc:	e615      	b.n	800600a <_strtod_l+0x562>
 80063de:	4641      	mov	r1, r8
 80063e0:	4620      	mov	r0, r4
 80063e2:	f7ff fac9 	bl	8005978 <__ratio>
 80063e6:	2200      	movs	r2, #0
 80063e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80063ec:	4606      	mov	r6, r0
 80063ee:	460f      	mov	r7, r1
 80063f0:	f7fa faee 	bl	80009d0 <__aeabi_dcmple>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	d06d      	beq.n	80064d4 <_strtod_l+0xa2c>
 80063f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d178      	bne.n	80064f0 <_strtod_l+0xa48>
 80063fe:	f1ba 0f00 	cmp.w	sl, #0
 8006402:	d156      	bne.n	80064b2 <_strtod_l+0xa0a>
 8006404:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006406:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800640a:	2b00      	cmp	r3, #0
 800640c:	d158      	bne.n	80064c0 <_strtod_l+0xa18>
 800640e:	2200      	movs	r2, #0
 8006410:	4630      	mov	r0, r6
 8006412:	4639      	mov	r1, r7
 8006414:	4b5d      	ldr	r3, [pc, #372]	@ (800658c <_strtod_l+0xae4>)
 8006416:	f7fa fad1 	bl	80009bc <__aeabi_dcmplt>
 800641a:	2800      	cmp	r0, #0
 800641c:	d157      	bne.n	80064ce <_strtod_l+0xa26>
 800641e:	4630      	mov	r0, r6
 8006420:	4639      	mov	r1, r7
 8006422:	2200      	movs	r2, #0
 8006424:	4b5a      	ldr	r3, [pc, #360]	@ (8006590 <_strtod_l+0xae8>)
 8006426:	f7fa f857 	bl	80004d8 <__aeabi_dmul>
 800642a:	4606      	mov	r6, r0
 800642c:	460f      	mov	r7, r1
 800642e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006432:	9606      	str	r6, [sp, #24]
 8006434:	9307      	str	r3, [sp, #28]
 8006436:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800643a:	4d52      	ldr	r5, [pc, #328]	@ (8006584 <_strtod_l+0xadc>)
 800643c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006440:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006442:	401d      	ands	r5, r3
 8006444:	4b53      	ldr	r3, [pc, #332]	@ (8006594 <_strtod_l+0xaec>)
 8006446:	429d      	cmp	r5, r3
 8006448:	f040 80aa 	bne.w	80065a0 <_strtod_l+0xaf8>
 800644c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800644e:	4650      	mov	r0, sl
 8006450:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006454:	4659      	mov	r1, fp
 8006456:	f7ff f9cf 	bl	80057f8 <__ulp>
 800645a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800645e:	f7fa f83b 	bl	80004d8 <__aeabi_dmul>
 8006462:	4652      	mov	r2, sl
 8006464:	465b      	mov	r3, fp
 8006466:	f7f9 fe81 	bl	800016c <__adddf3>
 800646a:	460b      	mov	r3, r1
 800646c:	4945      	ldr	r1, [pc, #276]	@ (8006584 <_strtod_l+0xadc>)
 800646e:	4a4a      	ldr	r2, [pc, #296]	@ (8006598 <_strtod_l+0xaf0>)
 8006470:	4019      	ands	r1, r3
 8006472:	4291      	cmp	r1, r2
 8006474:	4682      	mov	sl, r0
 8006476:	d942      	bls.n	80064fe <_strtod_l+0xa56>
 8006478:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800647a:	4b43      	ldr	r3, [pc, #268]	@ (8006588 <_strtod_l+0xae0>)
 800647c:	429a      	cmp	r2, r3
 800647e:	d103      	bne.n	8006488 <_strtod_l+0x9e0>
 8006480:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006482:	3301      	adds	r3, #1
 8006484:	f43f ad2b 	beq.w	8005ede <_strtod_l+0x436>
 8006488:	f04f 3aff 	mov.w	sl, #4294967295
 800648c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8006588 <_strtod_l+0xae0>
 8006490:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006492:	9805      	ldr	r0, [sp, #20]
 8006494:	f7fe fe7e 	bl	8005194 <_Bfree>
 8006498:	4649      	mov	r1, r9
 800649a:	9805      	ldr	r0, [sp, #20]
 800649c:	f7fe fe7a 	bl	8005194 <_Bfree>
 80064a0:	4641      	mov	r1, r8
 80064a2:	9805      	ldr	r0, [sp, #20]
 80064a4:	f7fe fe76 	bl	8005194 <_Bfree>
 80064a8:	4621      	mov	r1, r4
 80064aa:	9805      	ldr	r0, [sp, #20]
 80064ac:	f7fe fe72 	bl	8005194 <_Bfree>
 80064b0:	e618      	b.n	80060e4 <_strtod_l+0x63c>
 80064b2:	f1ba 0f01 	cmp.w	sl, #1
 80064b6:	d103      	bne.n	80064c0 <_strtod_l+0xa18>
 80064b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f43f ada5 	beq.w	800600a <_strtod_l+0x562>
 80064c0:	2200      	movs	r2, #0
 80064c2:	4b36      	ldr	r3, [pc, #216]	@ (800659c <_strtod_l+0xaf4>)
 80064c4:	2600      	movs	r6, #0
 80064c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80064ca:	4f30      	ldr	r7, [pc, #192]	@ (800658c <_strtod_l+0xae4>)
 80064cc:	e7b3      	b.n	8006436 <_strtod_l+0x98e>
 80064ce:	2600      	movs	r6, #0
 80064d0:	4f2f      	ldr	r7, [pc, #188]	@ (8006590 <_strtod_l+0xae8>)
 80064d2:	e7ac      	b.n	800642e <_strtod_l+0x986>
 80064d4:	4630      	mov	r0, r6
 80064d6:	4639      	mov	r1, r7
 80064d8:	4b2d      	ldr	r3, [pc, #180]	@ (8006590 <_strtod_l+0xae8>)
 80064da:	2200      	movs	r2, #0
 80064dc:	f7f9 fffc 	bl	80004d8 <__aeabi_dmul>
 80064e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064e2:	4606      	mov	r6, r0
 80064e4:	460f      	mov	r7, r1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d0a1      	beq.n	800642e <_strtod_l+0x986>
 80064ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80064ee:	e7a2      	b.n	8006436 <_strtod_l+0x98e>
 80064f0:	2200      	movs	r2, #0
 80064f2:	4b26      	ldr	r3, [pc, #152]	@ (800658c <_strtod_l+0xae4>)
 80064f4:	4616      	mov	r6, r2
 80064f6:	461f      	mov	r7, r3
 80064f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80064fc:	e79b      	b.n	8006436 <_strtod_l+0x98e>
 80064fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006502:	9b08      	ldr	r3, [sp, #32]
 8006504:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1c1      	bne.n	8006490 <_strtod_l+0x9e8>
 800650c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006510:	0d1b      	lsrs	r3, r3, #20
 8006512:	051b      	lsls	r3, r3, #20
 8006514:	429d      	cmp	r5, r3
 8006516:	d1bb      	bne.n	8006490 <_strtod_l+0x9e8>
 8006518:	4630      	mov	r0, r6
 800651a:	4639      	mov	r1, r7
 800651c:	f7fa fb44 	bl	8000ba8 <__aeabi_d2lz>
 8006520:	f7f9 ffac 	bl	800047c <__aeabi_l2d>
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	4630      	mov	r0, r6
 800652a:	4639      	mov	r1, r7
 800652c:	f7f9 fe1c 	bl	8000168 <__aeabi_dsub>
 8006530:	460b      	mov	r3, r1
 8006532:	4602      	mov	r2, r0
 8006534:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006538:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800653c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800653e:	ea46 060a 	orr.w	r6, r6, sl
 8006542:	431e      	orrs	r6, r3
 8006544:	d069      	beq.n	800661a <_strtod_l+0xb72>
 8006546:	a30a      	add	r3, pc, #40	@ (adr r3, 8006570 <_strtod_l+0xac8>)
 8006548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654c:	f7fa fa36 	bl	80009bc <__aeabi_dcmplt>
 8006550:	2800      	cmp	r0, #0
 8006552:	f47f accf 	bne.w	8005ef4 <_strtod_l+0x44c>
 8006556:	a308      	add	r3, pc, #32	@ (adr r3, 8006578 <_strtod_l+0xad0>)
 8006558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006560:	f7fa fa4a 	bl	80009f8 <__aeabi_dcmpgt>
 8006564:	2800      	cmp	r0, #0
 8006566:	d093      	beq.n	8006490 <_strtod_l+0x9e8>
 8006568:	e4c4      	b.n	8005ef4 <_strtod_l+0x44c>
 800656a:	bf00      	nop
 800656c:	f3af 8000 	nop.w
 8006570:	94a03595 	.word	0x94a03595
 8006574:	3fdfffff 	.word	0x3fdfffff
 8006578:	35afe535 	.word	0x35afe535
 800657c:	3fe00000 	.word	0x3fe00000
 8006580:	000fffff 	.word	0x000fffff
 8006584:	7ff00000 	.word	0x7ff00000
 8006588:	7fefffff 	.word	0x7fefffff
 800658c:	3ff00000 	.word	0x3ff00000
 8006590:	3fe00000 	.word	0x3fe00000
 8006594:	7fe00000 	.word	0x7fe00000
 8006598:	7c9fffff 	.word	0x7c9fffff
 800659c:	bff00000 	.word	0xbff00000
 80065a0:	9b08      	ldr	r3, [sp, #32]
 80065a2:	b323      	cbz	r3, 80065ee <_strtod_l+0xb46>
 80065a4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80065a8:	d821      	bhi.n	80065ee <_strtod_l+0xb46>
 80065aa:	a327      	add	r3, pc, #156	@ (adr r3, 8006648 <_strtod_l+0xba0>)
 80065ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b0:	4630      	mov	r0, r6
 80065b2:	4639      	mov	r1, r7
 80065b4:	f7fa fa0c 	bl	80009d0 <__aeabi_dcmple>
 80065b8:	b1a0      	cbz	r0, 80065e4 <_strtod_l+0xb3c>
 80065ba:	4639      	mov	r1, r7
 80065bc:	4630      	mov	r0, r6
 80065be:	f7fa fa63 	bl	8000a88 <__aeabi_d2uiz>
 80065c2:	2801      	cmp	r0, #1
 80065c4:	bf38      	it	cc
 80065c6:	2001      	movcc	r0, #1
 80065c8:	f7f9 ff0c 	bl	80003e4 <__aeabi_ui2d>
 80065cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065ce:	4606      	mov	r6, r0
 80065d0:	460f      	mov	r7, r1
 80065d2:	b9fb      	cbnz	r3, 8006614 <_strtod_l+0xb6c>
 80065d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80065d8:	9014      	str	r0, [sp, #80]	@ 0x50
 80065da:	9315      	str	r3, [sp, #84]	@ 0x54
 80065dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80065e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80065e4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80065e6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80065ea:	1b5b      	subs	r3, r3, r5
 80065ec:	9311      	str	r3, [sp, #68]	@ 0x44
 80065ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80065f2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80065f6:	f7ff f8ff 	bl	80057f8 <__ulp>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	4650      	mov	r0, sl
 8006600:	4659      	mov	r1, fp
 8006602:	f7f9 ff69 	bl	80004d8 <__aeabi_dmul>
 8006606:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800660a:	f7f9 fdaf 	bl	800016c <__adddf3>
 800660e:	4682      	mov	sl, r0
 8006610:	468b      	mov	fp, r1
 8006612:	e776      	b.n	8006502 <_strtod_l+0xa5a>
 8006614:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006618:	e7e0      	b.n	80065dc <_strtod_l+0xb34>
 800661a:	a30d      	add	r3, pc, #52	@ (adr r3, 8006650 <_strtod_l+0xba8>)
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f7fa f9cc 	bl	80009bc <__aeabi_dcmplt>
 8006624:	e79e      	b.n	8006564 <_strtod_l+0xabc>
 8006626:	2300      	movs	r3, #0
 8006628:	930b      	str	r3, [sp, #44]	@ 0x2c
 800662a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800662c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800662e:	6013      	str	r3, [r2, #0]
 8006630:	f7ff ba77 	b.w	8005b22 <_strtod_l+0x7a>
 8006634:	2a65      	cmp	r2, #101	@ 0x65
 8006636:	f43f ab6e 	beq.w	8005d16 <_strtod_l+0x26e>
 800663a:	2a45      	cmp	r2, #69	@ 0x45
 800663c:	f43f ab6b 	beq.w	8005d16 <_strtod_l+0x26e>
 8006640:	2301      	movs	r3, #1
 8006642:	f7ff bba6 	b.w	8005d92 <_strtod_l+0x2ea>
 8006646:	bf00      	nop
 8006648:	ffc00000 	.word	0xffc00000
 800664c:	41dfffff 	.word	0x41dfffff
 8006650:	94a03595 	.word	0x94a03595
 8006654:	3fcfffff 	.word	0x3fcfffff

08006658 <_strtod_r>:
 8006658:	4b01      	ldr	r3, [pc, #4]	@ (8006660 <_strtod_r+0x8>)
 800665a:	f7ff ba25 	b.w	8005aa8 <_strtod_l>
 800665e:	bf00      	nop
 8006660:	20000068 	.word	0x20000068

08006664 <_strtol_l.constprop.0>:
 8006664:	2b24      	cmp	r3, #36	@ 0x24
 8006666:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800666a:	4686      	mov	lr, r0
 800666c:	4690      	mov	r8, r2
 800666e:	d801      	bhi.n	8006674 <_strtol_l.constprop.0+0x10>
 8006670:	2b01      	cmp	r3, #1
 8006672:	d106      	bne.n	8006682 <_strtol_l.constprop.0+0x1e>
 8006674:	f7fd fdbe 	bl	80041f4 <__errno>
 8006678:	2316      	movs	r3, #22
 800667a:	6003      	str	r3, [r0, #0]
 800667c:	2000      	movs	r0, #0
 800667e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006682:	460d      	mov	r5, r1
 8006684:	4833      	ldr	r0, [pc, #204]	@ (8006754 <_strtol_l.constprop.0+0xf0>)
 8006686:	462a      	mov	r2, r5
 8006688:	f815 4b01 	ldrb.w	r4, [r5], #1
 800668c:	5d06      	ldrb	r6, [r0, r4]
 800668e:	f016 0608 	ands.w	r6, r6, #8
 8006692:	d1f8      	bne.n	8006686 <_strtol_l.constprop.0+0x22>
 8006694:	2c2d      	cmp	r4, #45	@ 0x2d
 8006696:	d12d      	bne.n	80066f4 <_strtol_l.constprop.0+0x90>
 8006698:	2601      	movs	r6, #1
 800669a:	782c      	ldrb	r4, [r5, #0]
 800669c:	1c95      	adds	r5, r2, #2
 800669e:	f033 0210 	bics.w	r2, r3, #16
 80066a2:	d109      	bne.n	80066b8 <_strtol_l.constprop.0+0x54>
 80066a4:	2c30      	cmp	r4, #48	@ 0x30
 80066a6:	d12a      	bne.n	80066fe <_strtol_l.constprop.0+0x9a>
 80066a8:	782a      	ldrb	r2, [r5, #0]
 80066aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80066ae:	2a58      	cmp	r2, #88	@ 0x58
 80066b0:	d125      	bne.n	80066fe <_strtol_l.constprop.0+0x9a>
 80066b2:	2310      	movs	r3, #16
 80066b4:	786c      	ldrb	r4, [r5, #1]
 80066b6:	3502      	adds	r5, #2
 80066b8:	2200      	movs	r2, #0
 80066ba:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80066be:	f10c 3cff 	add.w	ip, ip, #4294967295
 80066c2:	fbbc f9f3 	udiv	r9, ip, r3
 80066c6:	4610      	mov	r0, r2
 80066c8:	fb03 ca19 	mls	sl, r3, r9, ip
 80066cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80066d0:	2f09      	cmp	r7, #9
 80066d2:	d81b      	bhi.n	800670c <_strtol_l.constprop.0+0xa8>
 80066d4:	463c      	mov	r4, r7
 80066d6:	42a3      	cmp	r3, r4
 80066d8:	dd27      	ble.n	800672a <_strtol_l.constprop.0+0xc6>
 80066da:	1c57      	adds	r7, r2, #1
 80066dc:	d007      	beq.n	80066ee <_strtol_l.constprop.0+0x8a>
 80066de:	4581      	cmp	r9, r0
 80066e0:	d320      	bcc.n	8006724 <_strtol_l.constprop.0+0xc0>
 80066e2:	d101      	bne.n	80066e8 <_strtol_l.constprop.0+0x84>
 80066e4:	45a2      	cmp	sl, r4
 80066e6:	db1d      	blt.n	8006724 <_strtol_l.constprop.0+0xc0>
 80066e8:	2201      	movs	r2, #1
 80066ea:	fb00 4003 	mla	r0, r0, r3, r4
 80066ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066f2:	e7eb      	b.n	80066cc <_strtol_l.constprop.0+0x68>
 80066f4:	2c2b      	cmp	r4, #43	@ 0x2b
 80066f6:	bf04      	itt	eq
 80066f8:	782c      	ldrbeq	r4, [r5, #0]
 80066fa:	1c95      	addeq	r5, r2, #2
 80066fc:	e7cf      	b.n	800669e <_strtol_l.constprop.0+0x3a>
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1da      	bne.n	80066b8 <_strtol_l.constprop.0+0x54>
 8006702:	2c30      	cmp	r4, #48	@ 0x30
 8006704:	bf0c      	ite	eq
 8006706:	2308      	moveq	r3, #8
 8006708:	230a      	movne	r3, #10
 800670a:	e7d5      	b.n	80066b8 <_strtol_l.constprop.0+0x54>
 800670c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006710:	2f19      	cmp	r7, #25
 8006712:	d801      	bhi.n	8006718 <_strtol_l.constprop.0+0xb4>
 8006714:	3c37      	subs	r4, #55	@ 0x37
 8006716:	e7de      	b.n	80066d6 <_strtol_l.constprop.0+0x72>
 8006718:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800671c:	2f19      	cmp	r7, #25
 800671e:	d804      	bhi.n	800672a <_strtol_l.constprop.0+0xc6>
 8006720:	3c57      	subs	r4, #87	@ 0x57
 8006722:	e7d8      	b.n	80066d6 <_strtol_l.constprop.0+0x72>
 8006724:	f04f 32ff 	mov.w	r2, #4294967295
 8006728:	e7e1      	b.n	80066ee <_strtol_l.constprop.0+0x8a>
 800672a:	1c53      	adds	r3, r2, #1
 800672c:	d108      	bne.n	8006740 <_strtol_l.constprop.0+0xdc>
 800672e:	2322      	movs	r3, #34	@ 0x22
 8006730:	4660      	mov	r0, ip
 8006732:	f8ce 3000 	str.w	r3, [lr]
 8006736:	f1b8 0f00 	cmp.w	r8, #0
 800673a:	d0a0      	beq.n	800667e <_strtol_l.constprop.0+0x1a>
 800673c:	1e69      	subs	r1, r5, #1
 800673e:	e006      	b.n	800674e <_strtol_l.constprop.0+0xea>
 8006740:	b106      	cbz	r6, 8006744 <_strtol_l.constprop.0+0xe0>
 8006742:	4240      	negs	r0, r0
 8006744:	f1b8 0f00 	cmp.w	r8, #0
 8006748:	d099      	beq.n	800667e <_strtol_l.constprop.0+0x1a>
 800674a:	2a00      	cmp	r2, #0
 800674c:	d1f6      	bne.n	800673c <_strtol_l.constprop.0+0xd8>
 800674e:	f8c8 1000 	str.w	r1, [r8]
 8006752:	e794      	b.n	800667e <_strtol_l.constprop.0+0x1a>
 8006754:	08007ba1 	.word	0x08007ba1

08006758 <_strtol_r>:
 8006758:	f7ff bf84 	b.w	8006664 <_strtol_l.constprop.0>

0800675c <__ssputs_r>:
 800675c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006760:	461f      	mov	r7, r3
 8006762:	688e      	ldr	r6, [r1, #8]
 8006764:	4682      	mov	sl, r0
 8006766:	42be      	cmp	r6, r7
 8006768:	460c      	mov	r4, r1
 800676a:	4690      	mov	r8, r2
 800676c:	680b      	ldr	r3, [r1, #0]
 800676e:	d82d      	bhi.n	80067cc <__ssputs_r+0x70>
 8006770:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006774:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006778:	d026      	beq.n	80067c8 <__ssputs_r+0x6c>
 800677a:	6965      	ldr	r5, [r4, #20]
 800677c:	6909      	ldr	r1, [r1, #16]
 800677e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006782:	eba3 0901 	sub.w	r9, r3, r1
 8006786:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800678a:	1c7b      	adds	r3, r7, #1
 800678c:	444b      	add	r3, r9
 800678e:	106d      	asrs	r5, r5, #1
 8006790:	429d      	cmp	r5, r3
 8006792:	bf38      	it	cc
 8006794:	461d      	movcc	r5, r3
 8006796:	0553      	lsls	r3, r2, #21
 8006798:	d527      	bpl.n	80067ea <__ssputs_r+0x8e>
 800679a:	4629      	mov	r1, r5
 800679c:	f7fe fc2e 	bl	8004ffc <_malloc_r>
 80067a0:	4606      	mov	r6, r0
 80067a2:	b360      	cbz	r0, 80067fe <__ssputs_r+0xa2>
 80067a4:	464a      	mov	r2, r9
 80067a6:	6921      	ldr	r1, [r4, #16]
 80067a8:	f000 fa14 	bl	8006bd4 <memcpy>
 80067ac:	89a3      	ldrh	r3, [r4, #12]
 80067ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80067b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067b6:	81a3      	strh	r3, [r4, #12]
 80067b8:	6126      	str	r6, [r4, #16]
 80067ba:	444e      	add	r6, r9
 80067bc:	6026      	str	r6, [r4, #0]
 80067be:	463e      	mov	r6, r7
 80067c0:	6165      	str	r5, [r4, #20]
 80067c2:	eba5 0509 	sub.w	r5, r5, r9
 80067c6:	60a5      	str	r5, [r4, #8]
 80067c8:	42be      	cmp	r6, r7
 80067ca:	d900      	bls.n	80067ce <__ssputs_r+0x72>
 80067cc:	463e      	mov	r6, r7
 80067ce:	4632      	mov	r2, r6
 80067d0:	4641      	mov	r1, r8
 80067d2:	6820      	ldr	r0, [r4, #0]
 80067d4:	f000 f9c2 	bl	8006b5c <memmove>
 80067d8:	2000      	movs	r0, #0
 80067da:	68a3      	ldr	r3, [r4, #8]
 80067dc:	1b9b      	subs	r3, r3, r6
 80067de:	60a3      	str	r3, [r4, #8]
 80067e0:	6823      	ldr	r3, [r4, #0]
 80067e2:	4433      	add	r3, r6
 80067e4:	6023      	str	r3, [r4, #0]
 80067e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ea:	462a      	mov	r2, r5
 80067ec:	f000 fd83 	bl	80072f6 <_realloc_r>
 80067f0:	4606      	mov	r6, r0
 80067f2:	2800      	cmp	r0, #0
 80067f4:	d1e0      	bne.n	80067b8 <__ssputs_r+0x5c>
 80067f6:	4650      	mov	r0, sl
 80067f8:	6921      	ldr	r1, [r4, #16]
 80067fa:	f7fe fb8d 	bl	8004f18 <_free_r>
 80067fe:	230c      	movs	r3, #12
 8006800:	f8ca 3000 	str.w	r3, [sl]
 8006804:	89a3      	ldrh	r3, [r4, #12]
 8006806:	f04f 30ff 	mov.w	r0, #4294967295
 800680a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800680e:	81a3      	strh	r3, [r4, #12]
 8006810:	e7e9      	b.n	80067e6 <__ssputs_r+0x8a>
	...

08006814 <_svfiprintf_r>:
 8006814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006818:	4698      	mov	r8, r3
 800681a:	898b      	ldrh	r3, [r1, #12]
 800681c:	4607      	mov	r7, r0
 800681e:	061b      	lsls	r3, r3, #24
 8006820:	460d      	mov	r5, r1
 8006822:	4614      	mov	r4, r2
 8006824:	b09d      	sub	sp, #116	@ 0x74
 8006826:	d510      	bpl.n	800684a <_svfiprintf_r+0x36>
 8006828:	690b      	ldr	r3, [r1, #16]
 800682a:	b973      	cbnz	r3, 800684a <_svfiprintf_r+0x36>
 800682c:	2140      	movs	r1, #64	@ 0x40
 800682e:	f7fe fbe5 	bl	8004ffc <_malloc_r>
 8006832:	6028      	str	r0, [r5, #0]
 8006834:	6128      	str	r0, [r5, #16]
 8006836:	b930      	cbnz	r0, 8006846 <_svfiprintf_r+0x32>
 8006838:	230c      	movs	r3, #12
 800683a:	603b      	str	r3, [r7, #0]
 800683c:	f04f 30ff 	mov.w	r0, #4294967295
 8006840:	b01d      	add	sp, #116	@ 0x74
 8006842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006846:	2340      	movs	r3, #64	@ 0x40
 8006848:	616b      	str	r3, [r5, #20]
 800684a:	2300      	movs	r3, #0
 800684c:	9309      	str	r3, [sp, #36]	@ 0x24
 800684e:	2320      	movs	r3, #32
 8006850:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006854:	2330      	movs	r3, #48	@ 0x30
 8006856:	f04f 0901 	mov.w	r9, #1
 800685a:	f8cd 800c 	str.w	r8, [sp, #12]
 800685e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80069f8 <_svfiprintf_r+0x1e4>
 8006862:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006866:	4623      	mov	r3, r4
 8006868:	469a      	mov	sl, r3
 800686a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800686e:	b10a      	cbz	r2, 8006874 <_svfiprintf_r+0x60>
 8006870:	2a25      	cmp	r2, #37	@ 0x25
 8006872:	d1f9      	bne.n	8006868 <_svfiprintf_r+0x54>
 8006874:	ebba 0b04 	subs.w	fp, sl, r4
 8006878:	d00b      	beq.n	8006892 <_svfiprintf_r+0x7e>
 800687a:	465b      	mov	r3, fp
 800687c:	4622      	mov	r2, r4
 800687e:	4629      	mov	r1, r5
 8006880:	4638      	mov	r0, r7
 8006882:	f7ff ff6b 	bl	800675c <__ssputs_r>
 8006886:	3001      	adds	r0, #1
 8006888:	f000 80a7 	beq.w	80069da <_svfiprintf_r+0x1c6>
 800688c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800688e:	445a      	add	r2, fp
 8006890:	9209      	str	r2, [sp, #36]	@ 0x24
 8006892:	f89a 3000 	ldrb.w	r3, [sl]
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 809f 	beq.w	80069da <_svfiprintf_r+0x1c6>
 800689c:	2300      	movs	r3, #0
 800689e:	f04f 32ff 	mov.w	r2, #4294967295
 80068a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068a6:	f10a 0a01 	add.w	sl, sl, #1
 80068aa:	9304      	str	r3, [sp, #16]
 80068ac:	9307      	str	r3, [sp, #28]
 80068ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80068b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80068b4:	4654      	mov	r4, sl
 80068b6:	2205      	movs	r2, #5
 80068b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068bc:	484e      	ldr	r0, [pc, #312]	@ (80069f8 <_svfiprintf_r+0x1e4>)
 80068be:	f7fd fcc6 	bl	800424e <memchr>
 80068c2:	9a04      	ldr	r2, [sp, #16]
 80068c4:	b9d8      	cbnz	r0, 80068fe <_svfiprintf_r+0xea>
 80068c6:	06d0      	lsls	r0, r2, #27
 80068c8:	bf44      	itt	mi
 80068ca:	2320      	movmi	r3, #32
 80068cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068d0:	0711      	lsls	r1, r2, #28
 80068d2:	bf44      	itt	mi
 80068d4:	232b      	movmi	r3, #43	@ 0x2b
 80068d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068da:	f89a 3000 	ldrb.w	r3, [sl]
 80068de:	2b2a      	cmp	r3, #42	@ 0x2a
 80068e0:	d015      	beq.n	800690e <_svfiprintf_r+0xfa>
 80068e2:	4654      	mov	r4, sl
 80068e4:	2000      	movs	r0, #0
 80068e6:	f04f 0c0a 	mov.w	ip, #10
 80068ea:	9a07      	ldr	r2, [sp, #28]
 80068ec:	4621      	mov	r1, r4
 80068ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068f2:	3b30      	subs	r3, #48	@ 0x30
 80068f4:	2b09      	cmp	r3, #9
 80068f6:	d94b      	bls.n	8006990 <_svfiprintf_r+0x17c>
 80068f8:	b1b0      	cbz	r0, 8006928 <_svfiprintf_r+0x114>
 80068fa:	9207      	str	r2, [sp, #28]
 80068fc:	e014      	b.n	8006928 <_svfiprintf_r+0x114>
 80068fe:	eba0 0308 	sub.w	r3, r0, r8
 8006902:	fa09 f303 	lsl.w	r3, r9, r3
 8006906:	4313      	orrs	r3, r2
 8006908:	46a2      	mov	sl, r4
 800690a:	9304      	str	r3, [sp, #16]
 800690c:	e7d2      	b.n	80068b4 <_svfiprintf_r+0xa0>
 800690e:	9b03      	ldr	r3, [sp, #12]
 8006910:	1d19      	adds	r1, r3, #4
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	9103      	str	r1, [sp, #12]
 8006916:	2b00      	cmp	r3, #0
 8006918:	bfbb      	ittet	lt
 800691a:	425b      	neglt	r3, r3
 800691c:	f042 0202 	orrlt.w	r2, r2, #2
 8006920:	9307      	strge	r3, [sp, #28]
 8006922:	9307      	strlt	r3, [sp, #28]
 8006924:	bfb8      	it	lt
 8006926:	9204      	strlt	r2, [sp, #16]
 8006928:	7823      	ldrb	r3, [r4, #0]
 800692a:	2b2e      	cmp	r3, #46	@ 0x2e
 800692c:	d10a      	bne.n	8006944 <_svfiprintf_r+0x130>
 800692e:	7863      	ldrb	r3, [r4, #1]
 8006930:	2b2a      	cmp	r3, #42	@ 0x2a
 8006932:	d132      	bne.n	800699a <_svfiprintf_r+0x186>
 8006934:	9b03      	ldr	r3, [sp, #12]
 8006936:	3402      	adds	r4, #2
 8006938:	1d1a      	adds	r2, r3, #4
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	9203      	str	r2, [sp, #12]
 800693e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006942:	9305      	str	r3, [sp, #20]
 8006944:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80069fc <_svfiprintf_r+0x1e8>
 8006948:	2203      	movs	r2, #3
 800694a:	4650      	mov	r0, sl
 800694c:	7821      	ldrb	r1, [r4, #0]
 800694e:	f7fd fc7e 	bl	800424e <memchr>
 8006952:	b138      	cbz	r0, 8006964 <_svfiprintf_r+0x150>
 8006954:	2240      	movs	r2, #64	@ 0x40
 8006956:	9b04      	ldr	r3, [sp, #16]
 8006958:	eba0 000a 	sub.w	r0, r0, sl
 800695c:	4082      	lsls	r2, r0
 800695e:	4313      	orrs	r3, r2
 8006960:	3401      	adds	r4, #1
 8006962:	9304      	str	r3, [sp, #16]
 8006964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006968:	2206      	movs	r2, #6
 800696a:	4825      	ldr	r0, [pc, #148]	@ (8006a00 <_svfiprintf_r+0x1ec>)
 800696c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006970:	f7fd fc6d 	bl	800424e <memchr>
 8006974:	2800      	cmp	r0, #0
 8006976:	d036      	beq.n	80069e6 <_svfiprintf_r+0x1d2>
 8006978:	4b22      	ldr	r3, [pc, #136]	@ (8006a04 <_svfiprintf_r+0x1f0>)
 800697a:	bb1b      	cbnz	r3, 80069c4 <_svfiprintf_r+0x1b0>
 800697c:	9b03      	ldr	r3, [sp, #12]
 800697e:	3307      	adds	r3, #7
 8006980:	f023 0307 	bic.w	r3, r3, #7
 8006984:	3308      	adds	r3, #8
 8006986:	9303      	str	r3, [sp, #12]
 8006988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800698a:	4433      	add	r3, r6
 800698c:	9309      	str	r3, [sp, #36]	@ 0x24
 800698e:	e76a      	b.n	8006866 <_svfiprintf_r+0x52>
 8006990:	460c      	mov	r4, r1
 8006992:	2001      	movs	r0, #1
 8006994:	fb0c 3202 	mla	r2, ip, r2, r3
 8006998:	e7a8      	b.n	80068ec <_svfiprintf_r+0xd8>
 800699a:	2300      	movs	r3, #0
 800699c:	f04f 0c0a 	mov.w	ip, #10
 80069a0:	4619      	mov	r1, r3
 80069a2:	3401      	adds	r4, #1
 80069a4:	9305      	str	r3, [sp, #20]
 80069a6:	4620      	mov	r0, r4
 80069a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069ac:	3a30      	subs	r2, #48	@ 0x30
 80069ae:	2a09      	cmp	r2, #9
 80069b0:	d903      	bls.n	80069ba <_svfiprintf_r+0x1a6>
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d0c6      	beq.n	8006944 <_svfiprintf_r+0x130>
 80069b6:	9105      	str	r1, [sp, #20]
 80069b8:	e7c4      	b.n	8006944 <_svfiprintf_r+0x130>
 80069ba:	4604      	mov	r4, r0
 80069bc:	2301      	movs	r3, #1
 80069be:	fb0c 2101 	mla	r1, ip, r1, r2
 80069c2:	e7f0      	b.n	80069a6 <_svfiprintf_r+0x192>
 80069c4:	ab03      	add	r3, sp, #12
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	462a      	mov	r2, r5
 80069ca:	4638      	mov	r0, r7
 80069cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006a08 <_svfiprintf_r+0x1f4>)
 80069ce:	a904      	add	r1, sp, #16
 80069d0:	f7fc fcca 	bl	8003368 <_printf_float>
 80069d4:	1c42      	adds	r2, r0, #1
 80069d6:	4606      	mov	r6, r0
 80069d8:	d1d6      	bne.n	8006988 <_svfiprintf_r+0x174>
 80069da:	89ab      	ldrh	r3, [r5, #12]
 80069dc:	065b      	lsls	r3, r3, #25
 80069de:	f53f af2d 	bmi.w	800683c <_svfiprintf_r+0x28>
 80069e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069e4:	e72c      	b.n	8006840 <_svfiprintf_r+0x2c>
 80069e6:	ab03      	add	r3, sp, #12
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	462a      	mov	r2, r5
 80069ec:	4638      	mov	r0, r7
 80069ee:	4b06      	ldr	r3, [pc, #24]	@ (8006a08 <_svfiprintf_r+0x1f4>)
 80069f0:	a904      	add	r1, sp, #16
 80069f2:	f7fc ff57 	bl	80038a4 <_printf_i>
 80069f6:	e7ed      	b.n	80069d4 <_svfiprintf_r+0x1c0>
 80069f8:	08007ca1 	.word	0x08007ca1
 80069fc:	08007ca7 	.word	0x08007ca7
 8006a00:	08007cab 	.word	0x08007cab
 8006a04:	08003369 	.word	0x08003369
 8006a08:	0800675d 	.word	0x0800675d

08006a0c <__sflush_r>:
 8006a0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a12:	0716      	lsls	r6, r2, #28
 8006a14:	4605      	mov	r5, r0
 8006a16:	460c      	mov	r4, r1
 8006a18:	d454      	bmi.n	8006ac4 <__sflush_r+0xb8>
 8006a1a:	684b      	ldr	r3, [r1, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	dc02      	bgt.n	8006a26 <__sflush_r+0x1a>
 8006a20:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	dd48      	ble.n	8006ab8 <__sflush_r+0xac>
 8006a26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a28:	2e00      	cmp	r6, #0
 8006a2a:	d045      	beq.n	8006ab8 <__sflush_r+0xac>
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006a32:	682f      	ldr	r7, [r5, #0]
 8006a34:	6a21      	ldr	r1, [r4, #32]
 8006a36:	602b      	str	r3, [r5, #0]
 8006a38:	d030      	beq.n	8006a9c <__sflush_r+0x90>
 8006a3a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006a3c:	89a3      	ldrh	r3, [r4, #12]
 8006a3e:	0759      	lsls	r1, r3, #29
 8006a40:	d505      	bpl.n	8006a4e <__sflush_r+0x42>
 8006a42:	6863      	ldr	r3, [r4, #4]
 8006a44:	1ad2      	subs	r2, r2, r3
 8006a46:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006a48:	b10b      	cbz	r3, 8006a4e <__sflush_r+0x42>
 8006a4a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006a4c:	1ad2      	subs	r2, r2, r3
 8006a4e:	2300      	movs	r3, #0
 8006a50:	4628      	mov	r0, r5
 8006a52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a54:	6a21      	ldr	r1, [r4, #32]
 8006a56:	47b0      	blx	r6
 8006a58:	1c43      	adds	r3, r0, #1
 8006a5a:	89a3      	ldrh	r3, [r4, #12]
 8006a5c:	d106      	bne.n	8006a6c <__sflush_r+0x60>
 8006a5e:	6829      	ldr	r1, [r5, #0]
 8006a60:	291d      	cmp	r1, #29
 8006a62:	d82b      	bhi.n	8006abc <__sflush_r+0xb0>
 8006a64:	4a28      	ldr	r2, [pc, #160]	@ (8006b08 <__sflush_r+0xfc>)
 8006a66:	410a      	asrs	r2, r1
 8006a68:	07d6      	lsls	r6, r2, #31
 8006a6a:	d427      	bmi.n	8006abc <__sflush_r+0xb0>
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	6062      	str	r2, [r4, #4]
 8006a70:	6922      	ldr	r2, [r4, #16]
 8006a72:	04d9      	lsls	r1, r3, #19
 8006a74:	6022      	str	r2, [r4, #0]
 8006a76:	d504      	bpl.n	8006a82 <__sflush_r+0x76>
 8006a78:	1c42      	adds	r2, r0, #1
 8006a7a:	d101      	bne.n	8006a80 <__sflush_r+0x74>
 8006a7c:	682b      	ldr	r3, [r5, #0]
 8006a7e:	b903      	cbnz	r3, 8006a82 <__sflush_r+0x76>
 8006a80:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a82:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a84:	602f      	str	r7, [r5, #0]
 8006a86:	b1b9      	cbz	r1, 8006ab8 <__sflush_r+0xac>
 8006a88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a8c:	4299      	cmp	r1, r3
 8006a8e:	d002      	beq.n	8006a96 <__sflush_r+0x8a>
 8006a90:	4628      	mov	r0, r5
 8006a92:	f7fe fa41 	bl	8004f18 <_free_r>
 8006a96:	2300      	movs	r3, #0
 8006a98:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a9a:	e00d      	b.n	8006ab8 <__sflush_r+0xac>
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	47b0      	blx	r6
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	1c50      	adds	r0, r2, #1
 8006aa6:	d1c9      	bne.n	8006a3c <__sflush_r+0x30>
 8006aa8:	682b      	ldr	r3, [r5, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d0c6      	beq.n	8006a3c <__sflush_r+0x30>
 8006aae:	2b1d      	cmp	r3, #29
 8006ab0:	d001      	beq.n	8006ab6 <__sflush_r+0xaa>
 8006ab2:	2b16      	cmp	r3, #22
 8006ab4:	d11d      	bne.n	8006af2 <__sflush_r+0xe6>
 8006ab6:	602f      	str	r7, [r5, #0]
 8006ab8:	2000      	movs	r0, #0
 8006aba:	e021      	b.n	8006b00 <__sflush_r+0xf4>
 8006abc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ac0:	b21b      	sxth	r3, r3
 8006ac2:	e01a      	b.n	8006afa <__sflush_r+0xee>
 8006ac4:	690f      	ldr	r7, [r1, #16]
 8006ac6:	2f00      	cmp	r7, #0
 8006ac8:	d0f6      	beq.n	8006ab8 <__sflush_r+0xac>
 8006aca:	0793      	lsls	r3, r2, #30
 8006acc:	bf18      	it	ne
 8006ace:	2300      	movne	r3, #0
 8006ad0:	680e      	ldr	r6, [r1, #0]
 8006ad2:	bf08      	it	eq
 8006ad4:	694b      	ldreq	r3, [r1, #20]
 8006ad6:	1bf6      	subs	r6, r6, r7
 8006ad8:	600f      	str	r7, [r1, #0]
 8006ada:	608b      	str	r3, [r1, #8]
 8006adc:	2e00      	cmp	r6, #0
 8006ade:	ddeb      	ble.n	8006ab8 <__sflush_r+0xac>
 8006ae0:	4633      	mov	r3, r6
 8006ae2:	463a      	mov	r2, r7
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	6a21      	ldr	r1, [r4, #32]
 8006ae8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006aec:	47e0      	blx	ip
 8006aee:	2800      	cmp	r0, #0
 8006af0:	dc07      	bgt.n	8006b02 <__sflush_r+0xf6>
 8006af2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006af6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006afa:	f04f 30ff 	mov.w	r0, #4294967295
 8006afe:	81a3      	strh	r3, [r4, #12]
 8006b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b02:	4407      	add	r7, r0
 8006b04:	1a36      	subs	r6, r6, r0
 8006b06:	e7e9      	b.n	8006adc <__sflush_r+0xd0>
 8006b08:	dfbffffe 	.word	0xdfbffffe

08006b0c <_fflush_r>:
 8006b0c:	b538      	push	{r3, r4, r5, lr}
 8006b0e:	690b      	ldr	r3, [r1, #16]
 8006b10:	4605      	mov	r5, r0
 8006b12:	460c      	mov	r4, r1
 8006b14:	b913      	cbnz	r3, 8006b1c <_fflush_r+0x10>
 8006b16:	2500      	movs	r5, #0
 8006b18:	4628      	mov	r0, r5
 8006b1a:	bd38      	pop	{r3, r4, r5, pc}
 8006b1c:	b118      	cbz	r0, 8006b26 <_fflush_r+0x1a>
 8006b1e:	6a03      	ldr	r3, [r0, #32]
 8006b20:	b90b      	cbnz	r3, 8006b26 <_fflush_r+0x1a>
 8006b22:	f7fd fa7b 	bl	800401c <__sinit>
 8006b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0f3      	beq.n	8006b16 <_fflush_r+0xa>
 8006b2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006b30:	07d0      	lsls	r0, r2, #31
 8006b32:	d404      	bmi.n	8006b3e <_fflush_r+0x32>
 8006b34:	0599      	lsls	r1, r3, #22
 8006b36:	d402      	bmi.n	8006b3e <_fflush_r+0x32>
 8006b38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b3a:	f7fd fb86 	bl	800424a <__retarget_lock_acquire_recursive>
 8006b3e:	4628      	mov	r0, r5
 8006b40:	4621      	mov	r1, r4
 8006b42:	f7ff ff63 	bl	8006a0c <__sflush_r>
 8006b46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b48:	4605      	mov	r5, r0
 8006b4a:	07da      	lsls	r2, r3, #31
 8006b4c:	d4e4      	bmi.n	8006b18 <_fflush_r+0xc>
 8006b4e:	89a3      	ldrh	r3, [r4, #12]
 8006b50:	059b      	lsls	r3, r3, #22
 8006b52:	d4e1      	bmi.n	8006b18 <_fflush_r+0xc>
 8006b54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b56:	f7fd fb79 	bl	800424c <__retarget_lock_release_recursive>
 8006b5a:	e7dd      	b.n	8006b18 <_fflush_r+0xc>

08006b5c <memmove>:
 8006b5c:	4288      	cmp	r0, r1
 8006b5e:	b510      	push	{r4, lr}
 8006b60:	eb01 0402 	add.w	r4, r1, r2
 8006b64:	d902      	bls.n	8006b6c <memmove+0x10>
 8006b66:	4284      	cmp	r4, r0
 8006b68:	4623      	mov	r3, r4
 8006b6a:	d807      	bhi.n	8006b7c <memmove+0x20>
 8006b6c:	1e43      	subs	r3, r0, #1
 8006b6e:	42a1      	cmp	r1, r4
 8006b70:	d008      	beq.n	8006b84 <memmove+0x28>
 8006b72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b7a:	e7f8      	b.n	8006b6e <memmove+0x12>
 8006b7c:	4601      	mov	r1, r0
 8006b7e:	4402      	add	r2, r0
 8006b80:	428a      	cmp	r2, r1
 8006b82:	d100      	bne.n	8006b86 <memmove+0x2a>
 8006b84:	bd10      	pop	{r4, pc}
 8006b86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b8e:	e7f7      	b.n	8006b80 <memmove+0x24>

08006b90 <strncmp>:
 8006b90:	b510      	push	{r4, lr}
 8006b92:	b16a      	cbz	r2, 8006bb0 <strncmp+0x20>
 8006b94:	3901      	subs	r1, #1
 8006b96:	1884      	adds	r4, r0, r2
 8006b98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b9c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d103      	bne.n	8006bac <strncmp+0x1c>
 8006ba4:	42a0      	cmp	r0, r4
 8006ba6:	d001      	beq.n	8006bac <strncmp+0x1c>
 8006ba8:	2a00      	cmp	r2, #0
 8006baa:	d1f5      	bne.n	8006b98 <strncmp+0x8>
 8006bac:	1ad0      	subs	r0, r2, r3
 8006bae:	bd10      	pop	{r4, pc}
 8006bb0:	4610      	mov	r0, r2
 8006bb2:	e7fc      	b.n	8006bae <strncmp+0x1e>

08006bb4 <_sbrk_r>:
 8006bb4:	b538      	push	{r3, r4, r5, lr}
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	4d05      	ldr	r5, [pc, #20]	@ (8006bd0 <_sbrk_r+0x1c>)
 8006bba:	4604      	mov	r4, r0
 8006bbc:	4608      	mov	r0, r1
 8006bbe:	602b      	str	r3, [r5, #0]
 8006bc0:	f7fa fb82 	bl	80012c8 <_sbrk>
 8006bc4:	1c43      	adds	r3, r0, #1
 8006bc6:	d102      	bne.n	8006bce <_sbrk_r+0x1a>
 8006bc8:	682b      	ldr	r3, [r5, #0]
 8006bca:	b103      	cbz	r3, 8006bce <_sbrk_r+0x1a>
 8006bcc:	6023      	str	r3, [r4, #0]
 8006bce:	bd38      	pop	{r3, r4, r5, pc}
 8006bd0:	20000388 	.word	0x20000388

08006bd4 <memcpy>:
 8006bd4:	440a      	add	r2, r1
 8006bd6:	4291      	cmp	r1, r2
 8006bd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bdc:	d100      	bne.n	8006be0 <memcpy+0xc>
 8006bde:	4770      	bx	lr
 8006be0:	b510      	push	{r4, lr}
 8006be2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006be6:	4291      	cmp	r1, r2
 8006be8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bec:	d1f9      	bne.n	8006be2 <memcpy+0xe>
 8006bee:	bd10      	pop	{r4, pc}

08006bf0 <nan>:
 8006bf0:	2000      	movs	r0, #0
 8006bf2:	4901      	ldr	r1, [pc, #4]	@ (8006bf8 <nan+0x8>)
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	7ff80000 	.word	0x7ff80000

08006bfc <__assert_func>:
 8006bfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006bfe:	4614      	mov	r4, r2
 8006c00:	461a      	mov	r2, r3
 8006c02:	4b09      	ldr	r3, [pc, #36]	@ (8006c28 <__assert_func+0x2c>)
 8006c04:	4605      	mov	r5, r0
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68d8      	ldr	r0, [r3, #12]
 8006c0a:	b954      	cbnz	r4, 8006c22 <__assert_func+0x26>
 8006c0c:	4b07      	ldr	r3, [pc, #28]	@ (8006c2c <__assert_func+0x30>)
 8006c0e:	461c      	mov	r4, r3
 8006c10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c14:	9100      	str	r1, [sp, #0]
 8006c16:	462b      	mov	r3, r5
 8006c18:	4905      	ldr	r1, [pc, #20]	@ (8006c30 <__assert_func+0x34>)
 8006c1a:	f000 fba7 	bl	800736c <fiprintf>
 8006c1e:	f000 fbb7 	bl	8007390 <abort>
 8006c22:	4b04      	ldr	r3, [pc, #16]	@ (8006c34 <__assert_func+0x38>)
 8006c24:	e7f4      	b.n	8006c10 <__assert_func+0x14>
 8006c26:	bf00      	nop
 8006c28:	20000018 	.word	0x20000018
 8006c2c:	08007cf5 	.word	0x08007cf5
 8006c30:	08007cc7 	.word	0x08007cc7
 8006c34:	08007cba 	.word	0x08007cba

08006c38 <_calloc_r>:
 8006c38:	b570      	push	{r4, r5, r6, lr}
 8006c3a:	fba1 5402 	umull	r5, r4, r1, r2
 8006c3e:	b93c      	cbnz	r4, 8006c50 <_calloc_r+0x18>
 8006c40:	4629      	mov	r1, r5
 8006c42:	f7fe f9db 	bl	8004ffc <_malloc_r>
 8006c46:	4606      	mov	r6, r0
 8006c48:	b928      	cbnz	r0, 8006c56 <_calloc_r+0x1e>
 8006c4a:	2600      	movs	r6, #0
 8006c4c:	4630      	mov	r0, r6
 8006c4e:	bd70      	pop	{r4, r5, r6, pc}
 8006c50:	220c      	movs	r2, #12
 8006c52:	6002      	str	r2, [r0, #0]
 8006c54:	e7f9      	b.n	8006c4a <_calloc_r+0x12>
 8006c56:	462a      	mov	r2, r5
 8006c58:	4621      	mov	r1, r4
 8006c5a:	f7fd fa78 	bl	800414e <memset>
 8006c5e:	e7f5      	b.n	8006c4c <_calloc_r+0x14>

08006c60 <rshift>:
 8006c60:	6903      	ldr	r3, [r0, #16]
 8006c62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006c6a:	f100 0414 	add.w	r4, r0, #20
 8006c6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006c72:	dd46      	ble.n	8006d02 <rshift+0xa2>
 8006c74:	f011 011f 	ands.w	r1, r1, #31
 8006c78:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006c7c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006c80:	d10c      	bne.n	8006c9c <rshift+0x3c>
 8006c82:	4629      	mov	r1, r5
 8006c84:	f100 0710 	add.w	r7, r0, #16
 8006c88:	42b1      	cmp	r1, r6
 8006c8a:	d335      	bcc.n	8006cf8 <rshift+0x98>
 8006c8c:	1a9b      	subs	r3, r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	1eea      	subs	r2, r5, #3
 8006c92:	4296      	cmp	r6, r2
 8006c94:	bf38      	it	cc
 8006c96:	2300      	movcc	r3, #0
 8006c98:	4423      	add	r3, r4
 8006c9a:	e015      	b.n	8006cc8 <rshift+0x68>
 8006c9c:	46a1      	mov	r9, r4
 8006c9e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006ca2:	f1c1 0820 	rsb	r8, r1, #32
 8006ca6:	40cf      	lsrs	r7, r1
 8006ca8:	f105 0e04 	add.w	lr, r5, #4
 8006cac:	4576      	cmp	r6, lr
 8006cae:	46f4      	mov	ip, lr
 8006cb0:	d816      	bhi.n	8006ce0 <rshift+0x80>
 8006cb2:	1a9a      	subs	r2, r3, r2
 8006cb4:	0092      	lsls	r2, r2, #2
 8006cb6:	3a04      	subs	r2, #4
 8006cb8:	3501      	adds	r5, #1
 8006cba:	42ae      	cmp	r6, r5
 8006cbc:	bf38      	it	cc
 8006cbe:	2200      	movcc	r2, #0
 8006cc0:	18a3      	adds	r3, r4, r2
 8006cc2:	50a7      	str	r7, [r4, r2]
 8006cc4:	b107      	cbz	r7, 8006cc8 <rshift+0x68>
 8006cc6:	3304      	adds	r3, #4
 8006cc8:	42a3      	cmp	r3, r4
 8006cca:	eba3 0204 	sub.w	r2, r3, r4
 8006cce:	bf08      	it	eq
 8006cd0:	2300      	moveq	r3, #0
 8006cd2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006cd6:	6102      	str	r2, [r0, #16]
 8006cd8:	bf08      	it	eq
 8006cda:	6143      	streq	r3, [r0, #20]
 8006cdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ce0:	f8dc c000 	ldr.w	ip, [ip]
 8006ce4:	fa0c fc08 	lsl.w	ip, ip, r8
 8006ce8:	ea4c 0707 	orr.w	r7, ip, r7
 8006cec:	f849 7b04 	str.w	r7, [r9], #4
 8006cf0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006cf4:	40cf      	lsrs	r7, r1
 8006cf6:	e7d9      	b.n	8006cac <rshift+0x4c>
 8006cf8:	f851 cb04 	ldr.w	ip, [r1], #4
 8006cfc:	f847 cf04 	str.w	ip, [r7, #4]!
 8006d00:	e7c2      	b.n	8006c88 <rshift+0x28>
 8006d02:	4623      	mov	r3, r4
 8006d04:	e7e0      	b.n	8006cc8 <rshift+0x68>

08006d06 <__hexdig_fun>:
 8006d06:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8006d0a:	2b09      	cmp	r3, #9
 8006d0c:	d802      	bhi.n	8006d14 <__hexdig_fun+0xe>
 8006d0e:	3820      	subs	r0, #32
 8006d10:	b2c0      	uxtb	r0, r0
 8006d12:	4770      	bx	lr
 8006d14:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8006d18:	2b05      	cmp	r3, #5
 8006d1a:	d801      	bhi.n	8006d20 <__hexdig_fun+0x1a>
 8006d1c:	3847      	subs	r0, #71	@ 0x47
 8006d1e:	e7f7      	b.n	8006d10 <__hexdig_fun+0xa>
 8006d20:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8006d24:	2b05      	cmp	r3, #5
 8006d26:	d801      	bhi.n	8006d2c <__hexdig_fun+0x26>
 8006d28:	3827      	subs	r0, #39	@ 0x27
 8006d2a:	e7f1      	b.n	8006d10 <__hexdig_fun+0xa>
 8006d2c:	2000      	movs	r0, #0
 8006d2e:	4770      	bx	lr

08006d30 <__gethex>:
 8006d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d34:	468a      	mov	sl, r1
 8006d36:	4690      	mov	r8, r2
 8006d38:	b085      	sub	sp, #20
 8006d3a:	9302      	str	r3, [sp, #8]
 8006d3c:	680b      	ldr	r3, [r1, #0]
 8006d3e:	9001      	str	r0, [sp, #4]
 8006d40:	1c9c      	adds	r4, r3, #2
 8006d42:	46a1      	mov	r9, r4
 8006d44:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006d48:	2830      	cmp	r0, #48	@ 0x30
 8006d4a:	d0fa      	beq.n	8006d42 <__gethex+0x12>
 8006d4c:	eba9 0303 	sub.w	r3, r9, r3
 8006d50:	f1a3 0b02 	sub.w	fp, r3, #2
 8006d54:	f7ff ffd7 	bl	8006d06 <__hexdig_fun>
 8006d58:	4605      	mov	r5, r0
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	d168      	bne.n	8006e30 <__gethex+0x100>
 8006d5e:	2201      	movs	r2, #1
 8006d60:	4648      	mov	r0, r9
 8006d62:	499f      	ldr	r1, [pc, #636]	@ (8006fe0 <__gethex+0x2b0>)
 8006d64:	f7ff ff14 	bl	8006b90 <strncmp>
 8006d68:	4607      	mov	r7, r0
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	d167      	bne.n	8006e3e <__gethex+0x10e>
 8006d6e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006d72:	4626      	mov	r6, r4
 8006d74:	f7ff ffc7 	bl	8006d06 <__hexdig_fun>
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	d062      	beq.n	8006e42 <__gethex+0x112>
 8006d7c:	4623      	mov	r3, r4
 8006d7e:	7818      	ldrb	r0, [r3, #0]
 8006d80:	4699      	mov	r9, r3
 8006d82:	2830      	cmp	r0, #48	@ 0x30
 8006d84:	f103 0301 	add.w	r3, r3, #1
 8006d88:	d0f9      	beq.n	8006d7e <__gethex+0x4e>
 8006d8a:	f7ff ffbc 	bl	8006d06 <__hexdig_fun>
 8006d8e:	fab0 f580 	clz	r5, r0
 8006d92:	f04f 0b01 	mov.w	fp, #1
 8006d96:	096d      	lsrs	r5, r5, #5
 8006d98:	464a      	mov	r2, r9
 8006d9a:	4616      	mov	r6, r2
 8006d9c:	7830      	ldrb	r0, [r6, #0]
 8006d9e:	3201      	adds	r2, #1
 8006da0:	f7ff ffb1 	bl	8006d06 <__hexdig_fun>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	d1f8      	bne.n	8006d9a <__gethex+0x6a>
 8006da8:	2201      	movs	r2, #1
 8006daa:	4630      	mov	r0, r6
 8006dac:	498c      	ldr	r1, [pc, #560]	@ (8006fe0 <__gethex+0x2b0>)
 8006dae:	f7ff feef 	bl	8006b90 <strncmp>
 8006db2:	2800      	cmp	r0, #0
 8006db4:	d13f      	bne.n	8006e36 <__gethex+0x106>
 8006db6:	b944      	cbnz	r4, 8006dca <__gethex+0x9a>
 8006db8:	1c74      	adds	r4, r6, #1
 8006dba:	4622      	mov	r2, r4
 8006dbc:	4616      	mov	r6, r2
 8006dbe:	7830      	ldrb	r0, [r6, #0]
 8006dc0:	3201      	adds	r2, #1
 8006dc2:	f7ff ffa0 	bl	8006d06 <__hexdig_fun>
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	d1f8      	bne.n	8006dbc <__gethex+0x8c>
 8006dca:	1ba4      	subs	r4, r4, r6
 8006dcc:	00a7      	lsls	r7, r4, #2
 8006dce:	7833      	ldrb	r3, [r6, #0]
 8006dd0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8006dd4:	2b50      	cmp	r3, #80	@ 0x50
 8006dd6:	d13e      	bne.n	8006e56 <__gethex+0x126>
 8006dd8:	7873      	ldrb	r3, [r6, #1]
 8006dda:	2b2b      	cmp	r3, #43	@ 0x2b
 8006ddc:	d033      	beq.n	8006e46 <__gethex+0x116>
 8006dde:	2b2d      	cmp	r3, #45	@ 0x2d
 8006de0:	d034      	beq.n	8006e4c <__gethex+0x11c>
 8006de2:	2400      	movs	r4, #0
 8006de4:	1c71      	adds	r1, r6, #1
 8006de6:	7808      	ldrb	r0, [r1, #0]
 8006de8:	f7ff ff8d 	bl	8006d06 <__hexdig_fun>
 8006dec:	1e43      	subs	r3, r0, #1
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	2b18      	cmp	r3, #24
 8006df2:	d830      	bhi.n	8006e56 <__gethex+0x126>
 8006df4:	f1a0 0210 	sub.w	r2, r0, #16
 8006df8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006dfc:	f7ff ff83 	bl	8006d06 <__hexdig_fun>
 8006e00:	f100 3cff 	add.w	ip, r0, #4294967295
 8006e04:	fa5f fc8c 	uxtb.w	ip, ip
 8006e08:	f1bc 0f18 	cmp.w	ip, #24
 8006e0c:	f04f 030a 	mov.w	r3, #10
 8006e10:	d91e      	bls.n	8006e50 <__gethex+0x120>
 8006e12:	b104      	cbz	r4, 8006e16 <__gethex+0xe6>
 8006e14:	4252      	negs	r2, r2
 8006e16:	4417      	add	r7, r2
 8006e18:	f8ca 1000 	str.w	r1, [sl]
 8006e1c:	b1ed      	cbz	r5, 8006e5a <__gethex+0x12a>
 8006e1e:	f1bb 0f00 	cmp.w	fp, #0
 8006e22:	bf0c      	ite	eq
 8006e24:	2506      	moveq	r5, #6
 8006e26:	2500      	movne	r5, #0
 8006e28:	4628      	mov	r0, r5
 8006e2a:	b005      	add	sp, #20
 8006e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e30:	2500      	movs	r5, #0
 8006e32:	462c      	mov	r4, r5
 8006e34:	e7b0      	b.n	8006d98 <__gethex+0x68>
 8006e36:	2c00      	cmp	r4, #0
 8006e38:	d1c7      	bne.n	8006dca <__gethex+0x9a>
 8006e3a:	4627      	mov	r7, r4
 8006e3c:	e7c7      	b.n	8006dce <__gethex+0x9e>
 8006e3e:	464e      	mov	r6, r9
 8006e40:	462f      	mov	r7, r5
 8006e42:	2501      	movs	r5, #1
 8006e44:	e7c3      	b.n	8006dce <__gethex+0x9e>
 8006e46:	2400      	movs	r4, #0
 8006e48:	1cb1      	adds	r1, r6, #2
 8006e4a:	e7cc      	b.n	8006de6 <__gethex+0xb6>
 8006e4c:	2401      	movs	r4, #1
 8006e4e:	e7fb      	b.n	8006e48 <__gethex+0x118>
 8006e50:	fb03 0002 	mla	r0, r3, r2, r0
 8006e54:	e7ce      	b.n	8006df4 <__gethex+0xc4>
 8006e56:	4631      	mov	r1, r6
 8006e58:	e7de      	b.n	8006e18 <__gethex+0xe8>
 8006e5a:	4629      	mov	r1, r5
 8006e5c:	eba6 0309 	sub.w	r3, r6, r9
 8006e60:	3b01      	subs	r3, #1
 8006e62:	2b07      	cmp	r3, #7
 8006e64:	dc0a      	bgt.n	8006e7c <__gethex+0x14c>
 8006e66:	9801      	ldr	r0, [sp, #4]
 8006e68:	f7fe f954 	bl	8005114 <_Balloc>
 8006e6c:	4604      	mov	r4, r0
 8006e6e:	b940      	cbnz	r0, 8006e82 <__gethex+0x152>
 8006e70:	4602      	mov	r2, r0
 8006e72:	21e4      	movs	r1, #228	@ 0xe4
 8006e74:	4b5b      	ldr	r3, [pc, #364]	@ (8006fe4 <__gethex+0x2b4>)
 8006e76:	485c      	ldr	r0, [pc, #368]	@ (8006fe8 <__gethex+0x2b8>)
 8006e78:	f7ff fec0 	bl	8006bfc <__assert_func>
 8006e7c:	3101      	adds	r1, #1
 8006e7e:	105b      	asrs	r3, r3, #1
 8006e80:	e7ef      	b.n	8006e62 <__gethex+0x132>
 8006e82:	2300      	movs	r3, #0
 8006e84:	f100 0a14 	add.w	sl, r0, #20
 8006e88:	4655      	mov	r5, sl
 8006e8a:	469b      	mov	fp, r3
 8006e8c:	45b1      	cmp	r9, r6
 8006e8e:	d337      	bcc.n	8006f00 <__gethex+0x1d0>
 8006e90:	f845 bb04 	str.w	fp, [r5], #4
 8006e94:	eba5 050a 	sub.w	r5, r5, sl
 8006e98:	10ad      	asrs	r5, r5, #2
 8006e9a:	6125      	str	r5, [r4, #16]
 8006e9c:	4658      	mov	r0, fp
 8006e9e:	f7fe fa2b 	bl	80052f8 <__hi0bits>
 8006ea2:	016d      	lsls	r5, r5, #5
 8006ea4:	f8d8 6000 	ldr.w	r6, [r8]
 8006ea8:	1a2d      	subs	r5, r5, r0
 8006eaa:	42b5      	cmp	r5, r6
 8006eac:	dd54      	ble.n	8006f58 <__gethex+0x228>
 8006eae:	1bad      	subs	r5, r5, r6
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	f7fe fdb3 	bl	8005a1e <__any_on>
 8006eb8:	4681      	mov	r9, r0
 8006eba:	b178      	cbz	r0, 8006edc <__gethex+0x1ac>
 8006ebc:	f04f 0901 	mov.w	r9, #1
 8006ec0:	1e6b      	subs	r3, r5, #1
 8006ec2:	1159      	asrs	r1, r3, #5
 8006ec4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8006ec8:	f003 021f 	and.w	r2, r3, #31
 8006ecc:	fa09 f202 	lsl.w	r2, r9, r2
 8006ed0:	420a      	tst	r2, r1
 8006ed2:	d003      	beq.n	8006edc <__gethex+0x1ac>
 8006ed4:	454b      	cmp	r3, r9
 8006ed6:	dc36      	bgt.n	8006f46 <__gethex+0x216>
 8006ed8:	f04f 0902 	mov.w	r9, #2
 8006edc:	4629      	mov	r1, r5
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f7ff febe 	bl	8006c60 <rshift>
 8006ee4:	442f      	add	r7, r5
 8006ee6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006eea:	42bb      	cmp	r3, r7
 8006eec:	da42      	bge.n	8006f74 <__gethex+0x244>
 8006eee:	4621      	mov	r1, r4
 8006ef0:	9801      	ldr	r0, [sp, #4]
 8006ef2:	f7fe f94f 	bl	8005194 <_Bfree>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006efa:	25a3      	movs	r5, #163	@ 0xa3
 8006efc:	6013      	str	r3, [r2, #0]
 8006efe:	e793      	b.n	8006e28 <__gethex+0xf8>
 8006f00:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8006f04:	2a2e      	cmp	r2, #46	@ 0x2e
 8006f06:	d012      	beq.n	8006f2e <__gethex+0x1fe>
 8006f08:	2b20      	cmp	r3, #32
 8006f0a:	d104      	bne.n	8006f16 <__gethex+0x1e6>
 8006f0c:	f845 bb04 	str.w	fp, [r5], #4
 8006f10:	f04f 0b00 	mov.w	fp, #0
 8006f14:	465b      	mov	r3, fp
 8006f16:	7830      	ldrb	r0, [r6, #0]
 8006f18:	9303      	str	r3, [sp, #12]
 8006f1a:	f7ff fef4 	bl	8006d06 <__hexdig_fun>
 8006f1e:	9b03      	ldr	r3, [sp, #12]
 8006f20:	f000 000f 	and.w	r0, r0, #15
 8006f24:	4098      	lsls	r0, r3
 8006f26:	ea4b 0b00 	orr.w	fp, fp, r0
 8006f2a:	3304      	adds	r3, #4
 8006f2c:	e7ae      	b.n	8006e8c <__gethex+0x15c>
 8006f2e:	45b1      	cmp	r9, r6
 8006f30:	d8ea      	bhi.n	8006f08 <__gethex+0x1d8>
 8006f32:	2201      	movs	r2, #1
 8006f34:	4630      	mov	r0, r6
 8006f36:	492a      	ldr	r1, [pc, #168]	@ (8006fe0 <__gethex+0x2b0>)
 8006f38:	9303      	str	r3, [sp, #12]
 8006f3a:	f7ff fe29 	bl	8006b90 <strncmp>
 8006f3e:	9b03      	ldr	r3, [sp, #12]
 8006f40:	2800      	cmp	r0, #0
 8006f42:	d1e1      	bne.n	8006f08 <__gethex+0x1d8>
 8006f44:	e7a2      	b.n	8006e8c <__gethex+0x15c>
 8006f46:	4620      	mov	r0, r4
 8006f48:	1ea9      	subs	r1, r5, #2
 8006f4a:	f7fe fd68 	bl	8005a1e <__any_on>
 8006f4e:	2800      	cmp	r0, #0
 8006f50:	d0c2      	beq.n	8006ed8 <__gethex+0x1a8>
 8006f52:	f04f 0903 	mov.w	r9, #3
 8006f56:	e7c1      	b.n	8006edc <__gethex+0x1ac>
 8006f58:	da09      	bge.n	8006f6e <__gethex+0x23e>
 8006f5a:	1b75      	subs	r5, r6, r5
 8006f5c:	4621      	mov	r1, r4
 8006f5e:	462a      	mov	r2, r5
 8006f60:	9801      	ldr	r0, [sp, #4]
 8006f62:	f7fe fb2d 	bl	80055c0 <__lshift>
 8006f66:	4604      	mov	r4, r0
 8006f68:	1b7f      	subs	r7, r7, r5
 8006f6a:	f100 0a14 	add.w	sl, r0, #20
 8006f6e:	f04f 0900 	mov.w	r9, #0
 8006f72:	e7b8      	b.n	8006ee6 <__gethex+0x1b6>
 8006f74:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006f78:	42bd      	cmp	r5, r7
 8006f7a:	dd6f      	ble.n	800705c <__gethex+0x32c>
 8006f7c:	1bed      	subs	r5, r5, r7
 8006f7e:	42ae      	cmp	r6, r5
 8006f80:	dc34      	bgt.n	8006fec <__gethex+0x2bc>
 8006f82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d022      	beq.n	8006fd0 <__gethex+0x2a0>
 8006f8a:	2b03      	cmp	r3, #3
 8006f8c:	d024      	beq.n	8006fd8 <__gethex+0x2a8>
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d115      	bne.n	8006fbe <__gethex+0x28e>
 8006f92:	42ae      	cmp	r6, r5
 8006f94:	d113      	bne.n	8006fbe <__gethex+0x28e>
 8006f96:	2e01      	cmp	r6, #1
 8006f98:	d10b      	bne.n	8006fb2 <__gethex+0x282>
 8006f9a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006f9e:	9a02      	ldr	r2, [sp, #8]
 8006fa0:	2562      	movs	r5, #98	@ 0x62
 8006fa2:	6013      	str	r3, [r2, #0]
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	6123      	str	r3, [r4, #16]
 8006fa8:	f8ca 3000 	str.w	r3, [sl]
 8006fac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fae:	601c      	str	r4, [r3, #0]
 8006fb0:	e73a      	b.n	8006e28 <__gethex+0xf8>
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	1e71      	subs	r1, r6, #1
 8006fb6:	f7fe fd32 	bl	8005a1e <__any_on>
 8006fba:	2800      	cmp	r0, #0
 8006fbc:	d1ed      	bne.n	8006f9a <__gethex+0x26a>
 8006fbe:	4621      	mov	r1, r4
 8006fc0:	9801      	ldr	r0, [sp, #4]
 8006fc2:	f7fe f8e7 	bl	8005194 <_Bfree>
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006fca:	2550      	movs	r5, #80	@ 0x50
 8006fcc:	6013      	str	r3, [r2, #0]
 8006fce:	e72b      	b.n	8006e28 <__gethex+0xf8>
 8006fd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1f3      	bne.n	8006fbe <__gethex+0x28e>
 8006fd6:	e7e0      	b.n	8006f9a <__gethex+0x26a>
 8006fd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1dd      	bne.n	8006f9a <__gethex+0x26a>
 8006fde:	e7ee      	b.n	8006fbe <__gethex+0x28e>
 8006fe0:	08007b48 	.word	0x08007b48
 8006fe4:	080079df 	.word	0x080079df
 8006fe8:	08007cf6 	.word	0x08007cf6
 8006fec:	1e6f      	subs	r7, r5, #1
 8006fee:	f1b9 0f00 	cmp.w	r9, #0
 8006ff2:	d130      	bne.n	8007056 <__gethex+0x326>
 8006ff4:	b127      	cbz	r7, 8007000 <__gethex+0x2d0>
 8006ff6:	4639      	mov	r1, r7
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	f7fe fd10 	bl	8005a1e <__any_on>
 8006ffe:	4681      	mov	r9, r0
 8007000:	2301      	movs	r3, #1
 8007002:	4629      	mov	r1, r5
 8007004:	1b76      	subs	r6, r6, r5
 8007006:	2502      	movs	r5, #2
 8007008:	117a      	asrs	r2, r7, #5
 800700a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800700e:	f007 071f 	and.w	r7, r7, #31
 8007012:	40bb      	lsls	r3, r7
 8007014:	4213      	tst	r3, r2
 8007016:	4620      	mov	r0, r4
 8007018:	bf18      	it	ne
 800701a:	f049 0902 	orrne.w	r9, r9, #2
 800701e:	f7ff fe1f 	bl	8006c60 <rshift>
 8007022:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007026:	f1b9 0f00 	cmp.w	r9, #0
 800702a:	d047      	beq.n	80070bc <__gethex+0x38c>
 800702c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007030:	2b02      	cmp	r3, #2
 8007032:	d015      	beq.n	8007060 <__gethex+0x330>
 8007034:	2b03      	cmp	r3, #3
 8007036:	d017      	beq.n	8007068 <__gethex+0x338>
 8007038:	2b01      	cmp	r3, #1
 800703a:	d109      	bne.n	8007050 <__gethex+0x320>
 800703c:	f019 0f02 	tst.w	r9, #2
 8007040:	d006      	beq.n	8007050 <__gethex+0x320>
 8007042:	f8da 3000 	ldr.w	r3, [sl]
 8007046:	ea49 0903 	orr.w	r9, r9, r3
 800704a:	f019 0f01 	tst.w	r9, #1
 800704e:	d10e      	bne.n	800706e <__gethex+0x33e>
 8007050:	f045 0510 	orr.w	r5, r5, #16
 8007054:	e032      	b.n	80070bc <__gethex+0x38c>
 8007056:	f04f 0901 	mov.w	r9, #1
 800705a:	e7d1      	b.n	8007000 <__gethex+0x2d0>
 800705c:	2501      	movs	r5, #1
 800705e:	e7e2      	b.n	8007026 <__gethex+0x2f6>
 8007060:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007062:	f1c3 0301 	rsb	r3, r3, #1
 8007066:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007068:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800706a:	2b00      	cmp	r3, #0
 800706c:	d0f0      	beq.n	8007050 <__gethex+0x320>
 800706e:	f04f 0c00 	mov.w	ip, #0
 8007072:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007076:	f104 0314 	add.w	r3, r4, #20
 800707a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800707e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007082:	4618      	mov	r0, r3
 8007084:	f853 2b04 	ldr.w	r2, [r3], #4
 8007088:	f1b2 3fff 	cmp.w	r2, #4294967295
 800708c:	d01b      	beq.n	80070c6 <__gethex+0x396>
 800708e:	3201      	adds	r2, #1
 8007090:	6002      	str	r2, [r0, #0]
 8007092:	2d02      	cmp	r5, #2
 8007094:	f104 0314 	add.w	r3, r4, #20
 8007098:	d13c      	bne.n	8007114 <__gethex+0x3e4>
 800709a:	f8d8 2000 	ldr.w	r2, [r8]
 800709e:	3a01      	subs	r2, #1
 80070a0:	42b2      	cmp	r2, r6
 80070a2:	d109      	bne.n	80070b8 <__gethex+0x388>
 80070a4:	2201      	movs	r2, #1
 80070a6:	1171      	asrs	r1, r6, #5
 80070a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80070ac:	f006 061f 	and.w	r6, r6, #31
 80070b0:	fa02 f606 	lsl.w	r6, r2, r6
 80070b4:	421e      	tst	r6, r3
 80070b6:	d13a      	bne.n	800712e <__gethex+0x3fe>
 80070b8:	f045 0520 	orr.w	r5, r5, #32
 80070bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070be:	601c      	str	r4, [r3, #0]
 80070c0:	9b02      	ldr	r3, [sp, #8]
 80070c2:	601f      	str	r7, [r3, #0]
 80070c4:	e6b0      	b.n	8006e28 <__gethex+0xf8>
 80070c6:	4299      	cmp	r1, r3
 80070c8:	f843 cc04 	str.w	ip, [r3, #-4]
 80070cc:	d8d9      	bhi.n	8007082 <__gethex+0x352>
 80070ce:	68a3      	ldr	r3, [r4, #8]
 80070d0:	459b      	cmp	fp, r3
 80070d2:	db17      	blt.n	8007104 <__gethex+0x3d4>
 80070d4:	6861      	ldr	r1, [r4, #4]
 80070d6:	9801      	ldr	r0, [sp, #4]
 80070d8:	3101      	adds	r1, #1
 80070da:	f7fe f81b 	bl	8005114 <_Balloc>
 80070de:	4681      	mov	r9, r0
 80070e0:	b918      	cbnz	r0, 80070ea <__gethex+0x3ba>
 80070e2:	4602      	mov	r2, r0
 80070e4:	2184      	movs	r1, #132	@ 0x84
 80070e6:	4b19      	ldr	r3, [pc, #100]	@ (800714c <__gethex+0x41c>)
 80070e8:	e6c5      	b.n	8006e76 <__gethex+0x146>
 80070ea:	6922      	ldr	r2, [r4, #16]
 80070ec:	f104 010c 	add.w	r1, r4, #12
 80070f0:	3202      	adds	r2, #2
 80070f2:	0092      	lsls	r2, r2, #2
 80070f4:	300c      	adds	r0, #12
 80070f6:	f7ff fd6d 	bl	8006bd4 <memcpy>
 80070fa:	4621      	mov	r1, r4
 80070fc:	9801      	ldr	r0, [sp, #4]
 80070fe:	f7fe f849 	bl	8005194 <_Bfree>
 8007102:	464c      	mov	r4, r9
 8007104:	6923      	ldr	r3, [r4, #16]
 8007106:	1c5a      	adds	r2, r3, #1
 8007108:	6122      	str	r2, [r4, #16]
 800710a:	2201      	movs	r2, #1
 800710c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007110:	615a      	str	r2, [r3, #20]
 8007112:	e7be      	b.n	8007092 <__gethex+0x362>
 8007114:	6922      	ldr	r2, [r4, #16]
 8007116:	455a      	cmp	r2, fp
 8007118:	dd0b      	ble.n	8007132 <__gethex+0x402>
 800711a:	2101      	movs	r1, #1
 800711c:	4620      	mov	r0, r4
 800711e:	f7ff fd9f 	bl	8006c60 <rshift>
 8007122:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007126:	3701      	adds	r7, #1
 8007128:	42bb      	cmp	r3, r7
 800712a:	f6ff aee0 	blt.w	8006eee <__gethex+0x1be>
 800712e:	2501      	movs	r5, #1
 8007130:	e7c2      	b.n	80070b8 <__gethex+0x388>
 8007132:	f016 061f 	ands.w	r6, r6, #31
 8007136:	d0fa      	beq.n	800712e <__gethex+0x3fe>
 8007138:	4453      	add	r3, sl
 800713a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800713e:	f7fe f8db 	bl	80052f8 <__hi0bits>
 8007142:	f1c6 0620 	rsb	r6, r6, #32
 8007146:	42b0      	cmp	r0, r6
 8007148:	dbe7      	blt.n	800711a <__gethex+0x3ea>
 800714a:	e7f0      	b.n	800712e <__gethex+0x3fe>
 800714c:	080079df 	.word	0x080079df

08007150 <L_shift>:
 8007150:	f1c2 0208 	rsb	r2, r2, #8
 8007154:	0092      	lsls	r2, r2, #2
 8007156:	b570      	push	{r4, r5, r6, lr}
 8007158:	f1c2 0620 	rsb	r6, r2, #32
 800715c:	6843      	ldr	r3, [r0, #4]
 800715e:	6804      	ldr	r4, [r0, #0]
 8007160:	fa03 f506 	lsl.w	r5, r3, r6
 8007164:	432c      	orrs	r4, r5
 8007166:	40d3      	lsrs	r3, r2
 8007168:	6004      	str	r4, [r0, #0]
 800716a:	f840 3f04 	str.w	r3, [r0, #4]!
 800716e:	4288      	cmp	r0, r1
 8007170:	d3f4      	bcc.n	800715c <L_shift+0xc>
 8007172:	bd70      	pop	{r4, r5, r6, pc}

08007174 <__match>:
 8007174:	b530      	push	{r4, r5, lr}
 8007176:	6803      	ldr	r3, [r0, #0]
 8007178:	3301      	adds	r3, #1
 800717a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800717e:	b914      	cbnz	r4, 8007186 <__match+0x12>
 8007180:	6003      	str	r3, [r0, #0]
 8007182:	2001      	movs	r0, #1
 8007184:	bd30      	pop	{r4, r5, pc}
 8007186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800718a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800718e:	2d19      	cmp	r5, #25
 8007190:	bf98      	it	ls
 8007192:	3220      	addls	r2, #32
 8007194:	42a2      	cmp	r2, r4
 8007196:	d0f0      	beq.n	800717a <__match+0x6>
 8007198:	2000      	movs	r0, #0
 800719a:	e7f3      	b.n	8007184 <__match+0x10>

0800719c <__hexnan>:
 800719c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a0:	2500      	movs	r5, #0
 80071a2:	680b      	ldr	r3, [r1, #0]
 80071a4:	4682      	mov	sl, r0
 80071a6:	115e      	asrs	r6, r3, #5
 80071a8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80071ac:	f013 031f 	ands.w	r3, r3, #31
 80071b0:	bf18      	it	ne
 80071b2:	3604      	addne	r6, #4
 80071b4:	1f37      	subs	r7, r6, #4
 80071b6:	4690      	mov	r8, r2
 80071b8:	46b9      	mov	r9, r7
 80071ba:	463c      	mov	r4, r7
 80071bc:	46ab      	mov	fp, r5
 80071be:	b087      	sub	sp, #28
 80071c0:	6801      	ldr	r1, [r0, #0]
 80071c2:	9301      	str	r3, [sp, #4]
 80071c4:	f846 5c04 	str.w	r5, [r6, #-4]
 80071c8:	9502      	str	r5, [sp, #8]
 80071ca:	784a      	ldrb	r2, [r1, #1]
 80071cc:	1c4b      	adds	r3, r1, #1
 80071ce:	9303      	str	r3, [sp, #12]
 80071d0:	b342      	cbz	r2, 8007224 <__hexnan+0x88>
 80071d2:	4610      	mov	r0, r2
 80071d4:	9105      	str	r1, [sp, #20]
 80071d6:	9204      	str	r2, [sp, #16]
 80071d8:	f7ff fd95 	bl	8006d06 <__hexdig_fun>
 80071dc:	2800      	cmp	r0, #0
 80071de:	d151      	bne.n	8007284 <__hexnan+0xe8>
 80071e0:	9a04      	ldr	r2, [sp, #16]
 80071e2:	9905      	ldr	r1, [sp, #20]
 80071e4:	2a20      	cmp	r2, #32
 80071e6:	d818      	bhi.n	800721a <__hexnan+0x7e>
 80071e8:	9b02      	ldr	r3, [sp, #8]
 80071ea:	459b      	cmp	fp, r3
 80071ec:	dd13      	ble.n	8007216 <__hexnan+0x7a>
 80071ee:	454c      	cmp	r4, r9
 80071f0:	d206      	bcs.n	8007200 <__hexnan+0x64>
 80071f2:	2d07      	cmp	r5, #7
 80071f4:	dc04      	bgt.n	8007200 <__hexnan+0x64>
 80071f6:	462a      	mov	r2, r5
 80071f8:	4649      	mov	r1, r9
 80071fa:	4620      	mov	r0, r4
 80071fc:	f7ff ffa8 	bl	8007150 <L_shift>
 8007200:	4544      	cmp	r4, r8
 8007202:	d952      	bls.n	80072aa <__hexnan+0x10e>
 8007204:	2300      	movs	r3, #0
 8007206:	f1a4 0904 	sub.w	r9, r4, #4
 800720a:	f844 3c04 	str.w	r3, [r4, #-4]
 800720e:	461d      	mov	r5, r3
 8007210:	464c      	mov	r4, r9
 8007212:	f8cd b008 	str.w	fp, [sp, #8]
 8007216:	9903      	ldr	r1, [sp, #12]
 8007218:	e7d7      	b.n	80071ca <__hexnan+0x2e>
 800721a:	2a29      	cmp	r2, #41	@ 0x29
 800721c:	d157      	bne.n	80072ce <__hexnan+0x132>
 800721e:	3102      	adds	r1, #2
 8007220:	f8ca 1000 	str.w	r1, [sl]
 8007224:	f1bb 0f00 	cmp.w	fp, #0
 8007228:	d051      	beq.n	80072ce <__hexnan+0x132>
 800722a:	454c      	cmp	r4, r9
 800722c:	d206      	bcs.n	800723c <__hexnan+0xa0>
 800722e:	2d07      	cmp	r5, #7
 8007230:	dc04      	bgt.n	800723c <__hexnan+0xa0>
 8007232:	462a      	mov	r2, r5
 8007234:	4649      	mov	r1, r9
 8007236:	4620      	mov	r0, r4
 8007238:	f7ff ff8a 	bl	8007150 <L_shift>
 800723c:	4544      	cmp	r4, r8
 800723e:	d936      	bls.n	80072ae <__hexnan+0x112>
 8007240:	4623      	mov	r3, r4
 8007242:	f1a8 0204 	sub.w	r2, r8, #4
 8007246:	f853 1b04 	ldr.w	r1, [r3], #4
 800724a:	429f      	cmp	r7, r3
 800724c:	f842 1f04 	str.w	r1, [r2, #4]!
 8007250:	d2f9      	bcs.n	8007246 <__hexnan+0xaa>
 8007252:	1b3b      	subs	r3, r7, r4
 8007254:	f023 0303 	bic.w	r3, r3, #3
 8007258:	3304      	adds	r3, #4
 800725a:	3401      	adds	r4, #1
 800725c:	3e03      	subs	r6, #3
 800725e:	42b4      	cmp	r4, r6
 8007260:	bf88      	it	hi
 8007262:	2304      	movhi	r3, #4
 8007264:	2200      	movs	r2, #0
 8007266:	4443      	add	r3, r8
 8007268:	f843 2b04 	str.w	r2, [r3], #4
 800726c:	429f      	cmp	r7, r3
 800726e:	d2fb      	bcs.n	8007268 <__hexnan+0xcc>
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	b91b      	cbnz	r3, 800727c <__hexnan+0xe0>
 8007274:	4547      	cmp	r7, r8
 8007276:	d128      	bne.n	80072ca <__hexnan+0x12e>
 8007278:	2301      	movs	r3, #1
 800727a:	603b      	str	r3, [r7, #0]
 800727c:	2005      	movs	r0, #5
 800727e:	b007      	add	sp, #28
 8007280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007284:	3501      	adds	r5, #1
 8007286:	2d08      	cmp	r5, #8
 8007288:	f10b 0b01 	add.w	fp, fp, #1
 800728c:	dd06      	ble.n	800729c <__hexnan+0x100>
 800728e:	4544      	cmp	r4, r8
 8007290:	d9c1      	bls.n	8007216 <__hexnan+0x7a>
 8007292:	2300      	movs	r3, #0
 8007294:	2501      	movs	r5, #1
 8007296:	f844 3c04 	str.w	r3, [r4, #-4]
 800729a:	3c04      	subs	r4, #4
 800729c:	6822      	ldr	r2, [r4, #0]
 800729e:	f000 000f 	and.w	r0, r0, #15
 80072a2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80072a6:	6020      	str	r0, [r4, #0]
 80072a8:	e7b5      	b.n	8007216 <__hexnan+0x7a>
 80072aa:	2508      	movs	r5, #8
 80072ac:	e7b3      	b.n	8007216 <__hexnan+0x7a>
 80072ae:	9b01      	ldr	r3, [sp, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d0dd      	beq.n	8007270 <__hexnan+0xd4>
 80072b4:	f04f 32ff 	mov.w	r2, #4294967295
 80072b8:	f1c3 0320 	rsb	r3, r3, #32
 80072bc:	40da      	lsrs	r2, r3
 80072be:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80072c2:	4013      	ands	r3, r2
 80072c4:	f846 3c04 	str.w	r3, [r6, #-4]
 80072c8:	e7d2      	b.n	8007270 <__hexnan+0xd4>
 80072ca:	3f04      	subs	r7, #4
 80072cc:	e7d0      	b.n	8007270 <__hexnan+0xd4>
 80072ce:	2004      	movs	r0, #4
 80072d0:	e7d5      	b.n	800727e <__hexnan+0xe2>

080072d2 <__ascii_mbtowc>:
 80072d2:	b082      	sub	sp, #8
 80072d4:	b901      	cbnz	r1, 80072d8 <__ascii_mbtowc+0x6>
 80072d6:	a901      	add	r1, sp, #4
 80072d8:	b142      	cbz	r2, 80072ec <__ascii_mbtowc+0x1a>
 80072da:	b14b      	cbz	r3, 80072f0 <__ascii_mbtowc+0x1e>
 80072dc:	7813      	ldrb	r3, [r2, #0]
 80072de:	600b      	str	r3, [r1, #0]
 80072e0:	7812      	ldrb	r2, [r2, #0]
 80072e2:	1e10      	subs	r0, r2, #0
 80072e4:	bf18      	it	ne
 80072e6:	2001      	movne	r0, #1
 80072e8:	b002      	add	sp, #8
 80072ea:	4770      	bx	lr
 80072ec:	4610      	mov	r0, r2
 80072ee:	e7fb      	b.n	80072e8 <__ascii_mbtowc+0x16>
 80072f0:	f06f 0001 	mvn.w	r0, #1
 80072f4:	e7f8      	b.n	80072e8 <__ascii_mbtowc+0x16>

080072f6 <_realloc_r>:
 80072f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072fa:	4680      	mov	r8, r0
 80072fc:	4615      	mov	r5, r2
 80072fe:	460c      	mov	r4, r1
 8007300:	b921      	cbnz	r1, 800730c <_realloc_r+0x16>
 8007302:	4611      	mov	r1, r2
 8007304:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007308:	f7fd be78 	b.w	8004ffc <_malloc_r>
 800730c:	b92a      	cbnz	r2, 800731a <_realloc_r+0x24>
 800730e:	f7fd fe03 	bl	8004f18 <_free_r>
 8007312:	2400      	movs	r4, #0
 8007314:	4620      	mov	r0, r4
 8007316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800731a:	f000 f840 	bl	800739e <_malloc_usable_size_r>
 800731e:	4285      	cmp	r5, r0
 8007320:	4606      	mov	r6, r0
 8007322:	d802      	bhi.n	800732a <_realloc_r+0x34>
 8007324:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007328:	d8f4      	bhi.n	8007314 <_realloc_r+0x1e>
 800732a:	4629      	mov	r1, r5
 800732c:	4640      	mov	r0, r8
 800732e:	f7fd fe65 	bl	8004ffc <_malloc_r>
 8007332:	4607      	mov	r7, r0
 8007334:	2800      	cmp	r0, #0
 8007336:	d0ec      	beq.n	8007312 <_realloc_r+0x1c>
 8007338:	42b5      	cmp	r5, r6
 800733a:	462a      	mov	r2, r5
 800733c:	4621      	mov	r1, r4
 800733e:	bf28      	it	cs
 8007340:	4632      	movcs	r2, r6
 8007342:	f7ff fc47 	bl	8006bd4 <memcpy>
 8007346:	4621      	mov	r1, r4
 8007348:	4640      	mov	r0, r8
 800734a:	f7fd fde5 	bl	8004f18 <_free_r>
 800734e:	463c      	mov	r4, r7
 8007350:	e7e0      	b.n	8007314 <_realloc_r+0x1e>

08007352 <__ascii_wctomb>:
 8007352:	4603      	mov	r3, r0
 8007354:	4608      	mov	r0, r1
 8007356:	b141      	cbz	r1, 800736a <__ascii_wctomb+0x18>
 8007358:	2aff      	cmp	r2, #255	@ 0xff
 800735a:	d904      	bls.n	8007366 <__ascii_wctomb+0x14>
 800735c:	228a      	movs	r2, #138	@ 0x8a
 800735e:	f04f 30ff 	mov.w	r0, #4294967295
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	4770      	bx	lr
 8007366:	2001      	movs	r0, #1
 8007368:	700a      	strb	r2, [r1, #0]
 800736a:	4770      	bx	lr

0800736c <fiprintf>:
 800736c:	b40e      	push	{r1, r2, r3}
 800736e:	b503      	push	{r0, r1, lr}
 8007370:	4601      	mov	r1, r0
 8007372:	ab03      	add	r3, sp, #12
 8007374:	4805      	ldr	r0, [pc, #20]	@ (800738c <fiprintf+0x20>)
 8007376:	f853 2b04 	ldr.w	r2, [r3], #4
 800737a:	6800      	ldr	r0, [r0, #0]
 800737c:	9301      	str	r3, [sp, #4]
 800737e:	f000 f83d 	bl	80073fc <_vfiprintf_r>
 8007382:	b002      	add	sp, #8
 8007384:	f85d eb04 	ldr.w	lr, [sp], #4
 8007388:	b003      	add	sp, #12
 800738a:	4770      	bx	lr
 800738c:	20000018 	.word	0x20000018

08007390 <abort>:
 8007390:	2006      	movs	r0, #6
 8007392:	b508      	push	{r3, lr}
 8007394:	f000 fa06 	bl	80077a4 <raise>
 8007398:	2001      	movs	r0, #1
 800739a:	f7f9 ff20 	bl	80011de <_exit>

0800739e <_malloc_usable_size_r>:
 800739e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073a2:	1f18      	subs	r0, r3, #4
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	bfbc      	itt	lt
 80073a8:	580b      	ldrlt	r3, [r1, r0]
 80073aa:	18c0      	addlt	r0, r0, r3
 80073ac:	4770      	bx	lr

080073ae <__sfputc_r>:
 80073ae:	6893      	ldr	r3, [r2, #8]
 80073b0:	b410      	push	{r4}
 80073b2:	3b01      	subs	r3, #1
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	6093      	str	r3, [r2, #8]
 80073b8:	da07      	bge.n	80073ca <__sfputc_r+0x1c>
 80073ba:	6994      	ldr	r4, [r2, #24]
 80073bc:	42a3      	cmp	r3, r4
 80073be:	db01      	blt.n	80073c4 <__sfputc_r+0x16>
 80073c0:	290a      	cmp	r1, #10
 80073c2:	d102      	bne.n	80073ca <__sfputc_r+0x1c>
 80073c4:	bc10      	pop	{r4}
 80073c6:	f000 b931 	b.w	800762c <__swbuf_r>
 80073ca:	6813      	ldr	r3, [r2, #0]
 80073cc:	1c58      	adds	r0, r3, #1
 80073ce:	6010      	str	r0, [r2, #0]
 80073d0:	7019      	strb	r1, [r3, #0]
 80073d2:	4608      	mov	r0, r1
 80073d4:	bc10      	pop	{r4}
 80073d6:	4770      	bx	lr

080073d8 <__sfputs_r>:
 80073d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073da:	4606      	mov	r6, r0
 80073dc:	460f      	mov	r7, r1
 80073de:	4614      	mov	r4, r2
 80073e0:	18d5      	adds	r5, r2, r3
 80073e2:	42ac      	cmp	r4, r5
 80073e4:	d101      	bne.n	80073ea <__sfputs_r+0x12>
 80073e6:	2000      	movs	r0, #0
 80073e8:	e007      	b.n	80073fa <__sfputs_r+0x22>
 80073ea:	463a      	mov	r2, r7
 80073ec:	4630      	mov	r0, r6
 80073ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073f2:	f7ff ffdc 	bl	80073ae <__sfputc_r>
 80073f6:	1c43      	adds	r3, r0, #1
 80073f8:	d1f3      	bne.n	80073e2 <__sfputs_r+0xa>
 80073fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080073fc <_vfiprintf_r>:
 80073fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007400:	460d      	mov	r5, r1
 8007402:	4614      	mov	r4, r2
 8007404:	4698      	mov	r8, r3
 8007406:	4606      	mov	r6, r0
 8007408:	b09d      	sub	sp, #116	@ 0x74
 800740a:	b118      	cbz	r0, 8007414 <_vfiprintf_r+0x18>
 800740c:	6a03      	ldr	r3, [r0, #32]
 800740e:	b90b      	cbnz	r3, 8007414 <_vfiprintf_r+0x18>
 8007410:	f7fc fe04 	bl	800401c <__sinit>
 8007414:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007416:	07d9      	lsls	r1, r3, #31
 8007418:	d405      	bmi.n	8007426 <_vfiprintf_r+0x2a>
 800741a:	89ab      	ldrh	r3, [r5, #12]
 800741c:	059a      	lsls	r2, r3, #22
 800741e:	d402      	bmi.n	8007426 <_vfiprintf_r+0x2a>
 8007420:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007422:	f7fc ff12 	bl	800424a <__retarget_lock_acquire_recursive>
 8007426:	89ab      	ldrh	r3, [r5, #12]
 8007428:	071b      	lsls	r3, r3, #28
 800742a:	d501      	bpl.n	8007430 <_vfiprintf_r+0x34>
 800742c:	692b      	ldr	r3, [r5, #16]
 800742e:	b99b      	cbnz	r3, 8007458 <_vfiprintf_r+0x5c>
 8007430:	4629      	mov	r1, r5
 8007432:	4630      	mov	r0, r6
 8007434:	f000 f938 	bl	80076a8 <__swsetup_r>
 8007438:	b170      	cbz	r0, 8007458 <_vfiprintf_r+0x5c>
 800743a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800743c:	07dc      	lsls	r4, r3, #31
 800743e:	d504      	bpl.n	800744a <_vfiprintf_r+0x4e>
 8007440:	f04f 30ff 	mov.w	r0, #4294967295
 8007444:	b01d      	add	sp, #116	@ 0x74
 8007446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744a:	89ab      	ldrh	r3, [r5, #12]
 800744c:	0598      	lsls	r0, r3, #22
 800744e:	d4f7      	bmi.n	8007440 <_vfiprintf_r+0x44>
 8007450:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007452:	f7fc fefb 	bl	800424c <__retarget_lock_release_recursive>
 8007456:	e7f3      	b.n	8007440 <_vfiprintf_r+0x44>
 8007458:	2300      	movs	r3, #0
 800745a:	9309      	str	r3, [sp, #36]	@ 0x24
 800745c:	2320      	movs	r3, #32
 800745e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007462:	2330      	movs	r3, #48	@ 0x30
 8007464:	f04f 0901 	mov.w	r9, #1
 8007468:	f8cd 800c 	str.w	r8, [sp, #12]
 800746c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007618 <_vfiprintf_r+0x21c>
 8007470:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007474:	4623      	mov	r3, r4
 8007476:	469a      	mov	sl, r3
 8007478:	f813 2b01 	ldrb.w	r2, [r3], #1
 800747c:	b10a      	cbz	r2, 8007482 <_vfiprintf_r+0x86>
 800747e:	2a25      	cmp	r2, #37	@ 0x25
 8007480:	d1f9      	bne.n	8007476 <_vfiprintf_r+0x7a>
 8007482:	ebba 0b04 	subs.w	fp, sl, r4
 8007486:	d00b      	beq.n	80074a0 <_vfiprintf_r+0xa4>
 8007488:	465b      	mov	r3, fp
 800748a:	4622      	mov	r2, r4
 800748c:	4629      	mov	r1, r5
 800748e:	4630      	mov	r0, r6
 8007490:	f7ff ffa2 	bl	80073d8 <__sfputs_r>
 8007494:	3001      	adds	r0, #1
 8007496:	f000 80a7 	beq.w	80075e8 <_vfiprintf_r+0x1ec>
 800749a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800749c:	445a      	add	r2, fp
 800749e:	9209      	str	r2, [sp, #36]	@ 0x24
 80074a0:	f89a 3000 	ldrb.w	r3, [sl]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f000 809f 	beq.w	80075e8 <_vfiprintf_r+0x1ec>
 80074aa:	2300      	movs	r3, #0
 80074ac:	f04f 32ff 	mov.w	r2, #4294967295
 80074b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074b4:	f10a 0a01 	add.w	sl, sl, #1
 80074b8:	9304      	str	r3, [sp, #16]
 80074ba:	9307      	str	r3, [sp, #28]
 80074bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80074c2:	4654      	mov	r4, sl
 80074c4:	2205      	movs	r2, #5
 80074c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ca:	4853      	ldr	r0, [pc, #332]	@ (8007618 <_vfiprintf_r+0x21c>)
 80074cc:	f7fc febf 	bl	800424e <memchr>
 80074d0:	9a04      	ldr	r2, [sp, #16]
 80074d2:	b9d8      	cbnz	r0, 800750c <_vfiprintf_r+0x110>
 80074d4:	06d1      	lsls	r1, r2, #27
 80074d6:	bf44      	itt	mi
 80074d8:	2320      	movmi	r3, #32
 80074da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074de:	0713      	lsls	r3, r2, #28
 80074e0:	bf44      	itt	mi
 80074e2:	232b      	movmi	r3, #43	@ 0x2b
 80074e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074e8:	f89a 3000 	ldrb.w	r3, [sl]
 80074ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80074ee:	d015      	beq.n	800751c <_vfiprintf_r+0x120>
 80074f0:	4654      	mov	r4, sl
 80074f2:	2000      	movs	r0, #0
 80074f4:	f04f 0c0a 	mov.w	ip, #10
 80074f8:	9a07      	ldr	r2, [sp, #28]
 80074fa:	4621      	mov	r1, r4
 80074fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007500:	3b30      	subs	r3, #48	@ 0x30
 8007502:	2b09      	cmp	r3, #9
 8007504:	d94b      	bls.n	800759e <_vfiprintf_r+0x1a2>
 8007506:	b1b0      	cbz	r0, 8007536 <_vfiprintf_r+0x13a>
 8007508:	9207      	str	r2, [sp, #28]
 800750a:	e014      	b.n	8007536 <_vfiprintf_r+0x13a>
 800750c:	eba0 0308 	sub.w	r3, r0, r8
 8007510:	fa09 f303 	lsl.w	r3, r9, r3
 8007514:	4313      	orrs	r3, r2
 8007516:	46a2      	mov	sl, r4
 8007518:	9304      	str	r3, [sp, #16]
 800751a:	e7d2      	b.n	80074c2 <_vfiprintf_r+0xc6>
 800751c:	9b03      	ldr	r3, [sp, #12]
 800751e:	1d19      	adds	r1, r3, #4
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	9103      	str	r1, [sp, #12]
 8007524:	2b00      	cmp	r3, #0
 8007526:	bfbb      	ittet	lt
 8007528:	425b      	neglt	r3, r3
 800752a:	f042 0202 	orrlt.w	r2, r2, #2
 800752e:	9307      	strge	r3, [sp, #28]
 8007530:	9307      	strlt	r3, [sp, #28]
 8007532:	bfb8      	it	lt
 8007534:	9204      	strlt	r2, [sp, #16]
 8007536:	7823      	ldrb	r3, [r4, #0]
 8007538:	2b2e      	cmp	r3, #46	@ 0x2e
 800753a:	d10a      	bne.n	8007552 <_vfiprintf_r+0x156>
 800753c:	7863      	ldrb	r3, [r4, #1]
 800753e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007540:	d132      	bne.n	80075a8 <_vfiprintf_r+0x1ac>
 8007542:	9b03      	ldr	r3, [sp, #12]
 8007544:	3402      	adds	r4, #2
 8007546:	1d1a      	adds	r2, r3, #4
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	9203      	str	r2, [sp, #12]
 800754c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007550:	9305      	str	r3, [sp, #20]
 8007552:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800761c <_vfiprintf_r+0x220>
 8007556:	2203      	movs	r2, #3
 8007558:	4650      	mov	r0, sl
 800755a:	7821      	ldrb	r1, [r4, #0]
 800755c:	f7fc fe77 	bl	800424e <memchr>
 8007560:	b138      	cbz	r0, 8007572 <_vfiprintf_r+0x176>
 8007562:	2240      	movs	r2, #64	@ 0x40
 8007564:	9b04      	ldr	r3, [sp, #16]
 8007566:	eba0 000a 	sub.w	r0, r0, sl
 800756a:	4082      	lsls	r2, r0
 800756c:	4313      	orrs	r3, r2
 800756e:	3401      	adds	r4, #1
 8007570:	9304      	str	r3, [sp, #16]
 8007572:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007576:	2206      	movs	r2, #6
 8007578:	4829      	ldr	r0, [pc, #164]	@ (8007620 <_vfiprintf_r+0x224>)
 800757a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800757e:	f7fc fe66 	bl	800424e <memchr>
 8007582:	2800      	cmp	r0, #0
 8007584:	d03f      	beq.n	8007606 <_vfiprintf_r+0x20a>
 8007586:	4b27      	ldr	r3, [pc, #156]	@ (8007624 <_vfiprintf_r+0x228>)
 8007588:	bb1b      	cbnz	r3, 80075d2 <_vfiprintf_r+0x1d6>
 800758a:	9b03      	ldr	r3, [sp, #12]
 800758c:	3307      	adds	r3, #7
 800758e:	f023 0307 	bic.w	r3, r3, #7
 8007592:	3308      	adds	r3, #8
 8007594:	9303      	str	r3, [sp, #12]
 8007596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007598:	443b      	add	r3, r7
 800759a:	9309      	str	r3, [sp, #36]	@ 0x24
 800759c:	e76a      	b.n	8007474 <_vfiprintf_r+0x78>
 800759e:	460c      	mov	r4, r1
 80075a0:	2001      	movs	r0, #1
 80075a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80075a6:	e7a8      	b.n	80074fa <_vfiprintf_r+0xfe>
 80075a8:	2300      	movs	r3, #0
 80075aa:	f04f 0c0a 	mov.w	ip, #10
 80075ae:	4619      	mov	r1, r3
 80075b0:	3401      	adds	r4, #1
 80075b2:	9305      	str	r3, [sp, #20]
 80075b4:	4620      	mov	r0, r4
 80075b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075ba:	3a30      	subs	r2, #48	@ 0x30
 80075bc:	2a09      	cmp	r2, #9
 80075be:	d903      	bls.n	80075c8 <_vfiprintf_r+0x1cc>
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d0c6      	beq.n	8007552 <_vfiprintf_r+0x156>
 80075c4:	9105      	str	r1, [sp, #20]
 80075c6:	e7c4      	b.n	8007552 <_vfiprintf_r+0x156>
 80075c8:	4604      	mov	r4, r0
 80075ca:	2301      	movs	r3, #1
 80075cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80075d0:	e7f0      	b.n	80075b4 <_vfiprintf_r+0x1b8>
 80075d2:	ab03      	add	r3, sp, #12
 80075d4:	9300      	str	r3, [sp, #0]
 80075d6:	462a      	mov	r2, r5
 80075d8:	4630      	mov	r0, r6
 80075da:	4b13      	ldr	r3, [pc, #76]	@ (8007628 <_vfiprintf_r+0x22c>)
 80075dc:	a904      	add	r1, sp, #16
 80075de:	f7fb fec3 	bl	8003368 <_printf_float>
 80075e2:	4607      	mov	r7, r0
 80075e4:	1c78      	adds	r0, r7, #1
 80075e6:	d1d6      	bne.n	8007596 <_vfiprintf_r+0x19a>
 80075e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075ea:	07d9      	lsls	r1, r3, #31
 80075ec:	d405      	bmi.n	80075fa <_vfiprintf_r+0x1fe>
 80075ee:	89ab      	ldrh	r3, [r5, #12]
 80075f0:	059a      	lsls	r2, r3, #22
 80075f2:	d402      	bmi.n	80075fa <_vfiprintf_r+0x1fe>
 80075f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075f6:	f7fc fe29 	bl	800424c <__retarget_lock_release_recursive>
 80075fa:	89ab      	ldrh	r3, [r5, #12]
 80075fc:	065b      	lsls	r3, r3, #25
 80075fe:	f53f af1f 	bmi.w	8007440 <_vfiprintf_r+0x44>
 8007602:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007604:	e71e      	b.n	8007444 <_vfiprintf_r+0x48>
 8007606:	ab03      	add	r3, sp, #12
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	462a      	mov	r2, r5
 800760c:	4630      	mov	r0, r6
 800760e:	4b06      	ldr	r3, [pc, #24]	@ (8007628 <_vfiprintf_r+0x22c>)
 8007610:	a904      	add	r1, sp, #16
 8007612:	f7fc f947 	bl	80038a4 <_printf_i>
 8007616:	e7e4      	b.n	80075e2 <_vfiprintf_r+0x1e6>
 8007618:	08007ca1 	.word	0x08007ca1
 800761c:	08007ca7 	.word	0x08007ca7
 8007620:	08007cab 	.word	0x08007cab
 8007624:	08003369 	.word	0x08003369
 8007628:	080073d9 	.word	0x080073d9

0800762c <__swbuf_r>:
 800762c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800762e:	460e      	mov	r6, r1
 8007630:	4614      	mov	r4, r2
 8007632:	4605      	mov	r5, r0
 8007634:	b118      	cbz	r0, 800763e <__swbuf_r+0x12>
 8007636:	6a03      	ldr	r3, [r0, #32]
 8007638:	b90b      	cbnz	r3, 800763e <__swbuf_r+0x12>
 800763a:	f7fc fcef 	bl	800401c <__sinit>
 800763e:	69a3      	ldr	r3, [r4, #24]
 8007640:	60a3      	str	r3, [r4, #8]
 8007642:	89a3      	ldrh	r3, [r4, #12]
 8007644:	071a      	lsls	r2, r3, #28
 8007646:	d501      	bpl.n	800764c <__swbuf_r+0x20>
 8007648:	6923      	ldr	r3, [r4, #16]
 800764a:	b943      	cbnz	r3, 800765e <__swbuf_r+0x32>
 800764c:	4621      	mov	r1, r4
 800764e:	4628      	mov	r0, r5
 8007650:	f000 f82a 	bl	80076a8 <__swsetup_r>
 8007654:	b118      	cbz	r0, 800765e <__swbuf_r+0x32>
 8007656:	f04f 37ff 	mov.w	r7, #4294967295
 800765a:	4638      	mov	r0, r7
 800765c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800765e:	6823      	ldr	r3, [r4, #0]
 8007660:	6922      	ldr	r2, [r4, #16]
 8007662:	b2f6      	uxtb	r6, r6
 8007664:	1a98      	subs	r0, r3, r2
 8007666:	6963      	ldr	r3, [r4, #20]
 8007668:	4637      	mov	r7, r6
 800766a:	4283      	cmp	r3, r0
 800766c:	dc05      	bgt.n	800767a <__swbuf_r+0x4e>
 800766e:	4621      	mov	r1, r4
 8007670:	4628      	mov	r0, r5
 8007672:	f7ff fa4b 	bl	8006b0c <_fflush_r>
 8007676:	2800      	cmp	r0, #0
 8007678:	d1ed      	bne.n	8007656 <__swbuf_r+0x2a>
 800767a:	68a3      	ldr	r3, [r4, #8]
 800767c:	3b01      	subs	r3, #1
 800767e:	60a3      	str	r3, [r4, #8]
 8007680:	6823      	ldr	r3, [r4, #0]
 8007682:	1c5a      	adds	r2, r3, #1
 8007684:	6022      	str	r2, [r4, #0]
 8007686:	701e      	strb	r6, [r3, #0]
 8007688:	6962      	ldr	r2, [r4, #20]
 800768a:	1c43      	adds	r3, r0, #1
 800768c:	429a      	cmp	r2, r3
 800768e:	d004      	beq.n	800769a <__swbuf_r+0x6e>
 8007690:	89a3      	ldrh	r3, [r4, #12]
 8007692:	07db      	lsls	r3, r3, #31
 8007694:	d5e1      	bpl.n	800765a <__swbuf_r+0x2e>
 8007696:	2e0a      	cmp	r6, #10
 8007698:	d1df      	bne.n	800765a <__swbuf_r+0x2e>
 800769a:	4621      	mov	r1, r4
 800769c:	4628      	mov	r0, r5
 800769e:	f7ff fa35 	bl	8006b0c <_fflush_r>
 80076a2:	2800      	cmp	r0, #0
 80076a4:	d0d9      	beq.n	800765a <__swbuf_r+0x2e>
 80076a6:	e7d6      	b.n	8007656 <__swbuf_r+0x2a>

080076a8 <__swsetup_r>:
 80076a8:	b538      	push	{r3, r4, r5, lr}
 80076aa:	4b29      	ldr	r3, [pc, #164]	@ (8007750 <__swsetup_r+0xa8>)
 80076ac:	4605      	mov	r5, r0
 80076ae:	6818      	ldr	r0, [r3, #0]
 80076b0:	460c      	mov	r4, r1
 80076b2:	b118      	cbz	r0, 80076bc <__swsetup_r+0x14>
 80076b4:	6a03      	ldr	r3, [r0, #32]
 80076b6:	b90b      	cbnz	r3, 80076bc <__swsetup_r+0x14>
 80076b8:	f7fc fcb0 	bl	800401c <__sinit>
 80076bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076c0:	0719      	lsls	r1, r3, #28
 80076c2:	d422      	bmi.n	800770a <__swsetup_r+0x62>
 80076c4:	06da      	lsls	r2, r3, #27
 80076c6:	d407      	bmi.n	80076d8 <__swsetup_r+0x30>
 80076c8:	2209      	movs	r2, #9
 80076ca:	602a      	str	r2, [r5, #0]
 80076cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076d0:	f04f 30ff 	mov.w	r0, #4294967295
 80076d4:	81a3      	strh	r3, [r4, #12]
 80076d6:	e033      	b.n	8007740 <__swsetup_r+0x98>
 80076d8:	0758      	lsls	r0, r3, #29
 80076da:	d512      	bpl.n	8007702 <__swsetup_r+0x5a>
 80076dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80076de:	b141      	cbz	r1, 80076f2 <__swsetup_r+0x4a>
 80076e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80076e4:	4299      	cmp	r1, r3
 80076e6:	d002      	beq.n	80076ee <__swsetup_r+0x46>
 80076e8:	4628      	mov	r0, r5
 80076ea:	f7fd fc15 	bl	8004f18 <_free_r>
 80076ee:	2300      	movs	r3, #0
 80076f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80076f2:	89a3      	ldrh	r3, [r4, #12]
 80076f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80076f8:	81a3      	strh	r3, [r4, #12]
 80076fa:	2300      	movs	r3, #0
 80076fc:	6063      	str	r3, [r4, #4]
 80076fe:	6923      	ldr	r3, [r4, #16]
 8007700:	6023      	str	r3, [r4, #0]
 8007702:	89a3      	ldrh	r3, [r4, #12]
 8007704:	f043 0308 	orr.w	r3, r3, #8
 8007708:	81a3      	strh	r3, [r4, #12]
 800770a:	6923      	ldr	r3, [r4, #16]
 800770c:	b94b      	cbnz	r3, 8007722 <__swsetup_r+0x7a>
 800770e:	89a3      	ldrh	r3, [r4, #12]
 8007710:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007718:	d003      	beq.n	8007722 <__swsetup_r+0x7a>
 800771a:	4621      	mov	r1, r4
 800771c:	4628      	mov	r0, r5
 800771e:	f000 f882 	bl	8007826 <__smakebuf_r>
 8007722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007726:	f013 0201 	ands.w	r2, r3, #1
 800772a:	d00a      	beq.n	8007742 <__swsetup_r+0x9a>
 800772c:	2200      	movs	r2, #0
 800772e:	60a2      	str	r2, [r4, #8]
 8007730:	6962      	ldr	r2, [r4, #20]
 8007732:	4252      	negs	r2, r2
 8007734:	61a2      	str	r2, [r4, #24]
 8007736:	6922      	ldr	r2, [r4, #16]
 8007738:	b942      	cbnz	r2, 800774c <__swsetup_r+0xa4>
 800773a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800773e:	d1c5      	bne.n	80076cc <__swsetup_r+0x24>
 8007740:	bd38      	pop	{r3, r4, r5, pc}
 8007742:	0799      	lsls	r1, r3, #30
 8007744:	bf58      	it	pl
 8007746:	6962      	ldrpl	r2, [r4, #20]
 8007748:	60a2      	str	r2, [r4, #8]
 800774a:	e7f4      	b.n	8007736 <__swsetup_r+0x8e>
 800774c:	2000      	movs	r0, #0
 800774e:	e7f7      	b.n	8007740 <__swsetup_r+0x98>
 8007750:	20000018 	.word	0x20000018

08007754 <_raise_r>:
 8007754:	291f      	cmp	r1, #31
 8007756:	b538      	push	{r3, r4, r5, lr}
 8007758:	4605      	mov	r5, r0
 800775a:	460c      	mov	r4, r1
 800775c:	d904      	bls.n	8007768 <_raise_r+0x14>
 800775e:	2316      	movs	r3, #22
 8007760:	6003      	str	r3, [r0, #0]
 8007762:	f04f 30ff 	mov.w	r0, #4294967295
 8007766:	bd38      	pop	{r3, r4, r5, pc}
 8007768:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800776a:	b112      	cbz	r2, 8007772 <_raise_r+0x1e>
 800776c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007770:	b94b      	cbnz	r3, 8007786 <_raise_r+0x32>
 8007772:	4628      	mov	r0, r5
 8007774:	f000 f830 	bl	80077d8 <_getpid_r>
 8007778:	4622      	mov	r2, r4
 800777a:	4601      	mov	r1, r0
 800777c:	4628      	mov	r0, r5
 800777e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007782:	f000 b817 	b.w	80077b4 <_kill_r>
 8007786:	2b01      	cmp	r3, #1
 8007788:	d00a      	beq.n	80077a0 <_raise_r+0x4c>
 800778a:	1c59      	adds	r1, r3, #1
 800778c:	d103      	bne.n	8007796 <_raise_r+0x42>
 800778e:	2316      	movs	r3, #22
 8007790:	6003      	str	r3, [r0, #0]
 8007792:	2001      	movs	r0, #1
 8007794:	e7e7      	b.n	8007766 <_raise_r+0x12>
 8007796:	2100      	movs	r1, #0
 8007798:	4620      	mov	r0, r4
 800779a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800779e:	4798      	blx	r3
 80077a0:	2000      	movs	r0, #0
 80077a2:	e7e0      	b.n	8007766 <_raise_r+0x12>

080077a4 <raise>:
 80077a4:	4b02      	ldr	r3, [pc, #8]	@ (80077b0 <raise+0xc>)
 80077a6:	4601      	mov	r1, r0
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	f7ff bfd3 	b.w	8007754 <_raise_r>
 80077ae:	bf00      	nop
 80077b0:	20000018 	.word	0x20000018

080077b4 <_kill_r>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	2300      	movs	r3, #0
 80077b8:	4d06      	ldr	r5, [pc, #24]	@ (80077d4 <_kill_r+0x20>)
 80077ba:	4604      	mov	r4, r0
 80077bc:	4608      	mov	r0, r1
 80077be:	4611      	mov	r1, r2
 80077c0:	602b      	str	r3, [r5, #0]
 80077c2:	f7f9 fcfc 	bl	80011be <_kill>
 80077c6:	1c43      	adds	r3, r0, #1
 80077c8:	d102      	bne.n	80077d0 <_kill_r+0x1c>
 80077ca:	682b      	ldr	r3, [r5, #0]
 80077cc:	b103      	cbz	r3, 80077d0 <_kill_r+0x1c>
 80077ce:	6023      	str	r3, [r4, #0]
 80077d0:	bd38      	pop	{r3, r4, r5, pc}
 80077d2:	bf00      	nop
 80077d4:	20000388 	.word	0x20000388

080077d8 <_getpid_r>:
 80077d8:	f7f9 bcea 	b.w	80011b0 <_getpid>

080077dc <__swhatbuf_r>:
 80077dc:	b570      	push	{r4, r5, r6, lr}
 80077de:	460c      	mov	r4, r1
 80077e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077e4:	4615      	mov	r5, r2
 80077e6:	2900      	cmp	r1, #0
 80077e8:	461e      	mov	r6, r3
 80077ea:	b096      	sub	sp, #88	@ 0x58
 80077ec:	da0c      	bge.n	8007808 <__swhatbuf_r+0x2c>
 80077ee:	89a3      	ldrh	r3, [r4, #12]
 80077f0:	2100      	movs	r1, #0
 80077f2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80077f6:	bf14      	ite	ne
 80077f8:	2340      	movne	r3, #64	@ 0x40
 80077fa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80077fe:	2000      	movs	r0, #0
 8007800:	6031      	str	r1, [r6, #0]
 8007802:	602b      	str	r3, [r5, #0]
 8007804:	b016      	add	sp, #88	@ 0x58
 8007806:	bd70      	pop	{r4, r5, r6, pc}
 8007808:	466a      	mov	r2, sp
 800780a:	f000 f849 	bl	80078a0 <_fstat_r>
 800780e:	2800      	cmp	r0, #0
 8007810:	dbed      	blt.n	80077ee <__swhatbuf_r+0x12>
 8007812:	9901      	ldr	r1, [sp, #4]
 8007814:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007818:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800781c:	4259      	negs	r1, r3
 800781e:	4159      	adcs	r1, r3
 8007820:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007824:	e7eb      	b.n	80077fe <__swhatbuf_r+0x22>

08007826 <__smakebuf_r>:
 8007826:	898b      	ldrh	r3, [r1, #12]
 8007828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800782a:	079d      	lsls	r5, r3, #30
 800782c:	4606      	mov	r6, r0
 800782e:	460c      	mov	r4, r1
 8007830:	d507      	bpl.n	8007842 <__smakebuf_r+0x1c>
 8007832:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007836:	6023      	str	r3, [r4, #0]
 8007838:	6123      	str	r3, [r4, #16]
 800783a:	2301      	movs	r3, #1
 800783c:	6163      	str	r3, [r4, #20]
 800783e:	b003      	add	sp, #12
 8007840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007842:	466a      	mov	r2, sp
 8007844:	ab01      	add	r3, sp, #4
 8007846:	f7ff ffc9 	bl	80077dc <__swhatbuf_r>
 800784a:	9f00      	ldr	r7, [sp, #0]
 800784c:	4605      	mov	r5, r0
 800784e:	4639      	mov	r1, r7
 8007850:	4630      	mov	r0, r6
 8007852:	f7fd fbd3 	bl	8004ffc <_malloc_r>
 8007856:	b948      	cbnz	r0, 800786c <__smakebuf_r+0x46>
 8007858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800785c:	059a      	lsls	r2, r3, #22
 800785e:	d4ee      	bmi.n	800783e <__smakebuf_r+0x18>
 8007860:	f023 0303 	bic.w	r3, r3, #3
 8007864:	f043 0302 	orr.w	r3, r3, #2
 8007868:	81a3      	strh	r3, [r4, #12]
 800786a:	e7e2      	b.n	8007832 <__smakebuf_r+0xc>
 800786c:	89a3      	ldrh	r3, [r4, #12]
 800786e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007876:	81a3      	strh	r3, [r4, #12]
 8007878:	9b01      	ldr	r3, [sp, #4]
 800787a:	6020      	str	r0, [r4, #0]
 800787c:	b15b      	cbz	r3, 8007896 <__smakebuf_r+0x70>
 800787e:	4630      	mov	r0, r6
 8007880:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007884:	f000 f81e 	bl	80078c4 <_isatty_r>
 8007888:	b128      	cbz	r0, 8007896 <__smakebuf_r+0x70>
 800788a:	89a3      	ldrh	r3, [r4, #12]
 800788c:	f023 0303 	bic.w	r3, r3, #3
 8007890:	f043 0301 	orr.w	r3, r3, #1
 8007894:	81a3      	strh	r3, [r4, #12]
 8007896:	89a3      	ldrh	r3, [r4, #12]
 8007898:	431d      	orrs	r5, r3
 800789a:	81a5      	strh	r5, [r4, #12]
 800789c:	e7cf      	b.n	800783e <__smakebuf_r+0x18>
	...

080078a0 <_fstat_r>:
 80078a0:	b538      	push	{r3, r4, r5, lr}
 80078a2:	2300      	movs	r3, #0
 80078a4:	4d06      	ldr	r5, [pc, #24]	@ (80078c0 <_fstat_r+0x20>)
 80078a6:	4604      	mov	r4, r0
 80078a8:	4608      	mov	r0, r1
 80078aa:	4611      	mov	r1, r2
 80078ac:	602b      	str	r3, [r5, #0]
 80078ae:	f7f9 fce5 	bl	800127c <_fstat>
 80078b2:	1c43      	adds	r3, r0, #1
 80078b4:	d102      	bne.n	80078bc <_fstat_r+0x1c>
 80078b6:	682b      	ldr	r3, [r5, #0]
 80078b8:	b103      	cbz	r3, 80078bc <_fstat_r+0x1c>
 80078ba:	6023      	str	r3, [r4, #0]
 80078bc:	bd38      	pop	{r3, r4, r5, pc}
 80078be:	bf00      	nop
 80078c0:	20000388 	.word	0x20000388

080078c4 <_isatty_r>:
 80078c4:	b538      	push	{r3, r4, r5, lr}
 80078c6:	2300      	movs	r3, #0
 80078c8:	4d05      	ldr	r5, [pc, #20]	@ (80078e0 <_isatty_r+0x1c>)
 80078ca:	4604      	mov	r4, r0
 80078cc:	4608      	mov	r0, r1
 80078ce:	602b      	str	r3, [r5, #0]
 80078d0:	f7f9 fce3 	bl	800129a <_isatty>
 80078d4:	1c43      	adds	r3, r0, #1
 80078d6:	d102      	bne.n	80078de <_isatty_r+0x1a>
 80078d8:	682b      	ldr	r3, [r5, #0]
 80078da:	b103      	cbz	r3, 80078de <_isatty_r+0x1a>
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	bd38      	pop	{r3, r4, r5, pc}
 80078e0:	20000388 	.word	0x20000388

080078e4 <_init>:
 80078e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078e6:	bf00      	nop
 80078e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ea:	bc08      	pop	{r3}
 80078ec:	469e      	mov	lr, r3
 80078ee:	4770      	bx	lr

080078f0 <_fini>:
 80078f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f2:	bf00      	nop
 80078f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078f6:	bc08      	pop	{r3}
 80078f8:	469e      	mov	lr, r3
 80078fa:	4770      	bx	lr
